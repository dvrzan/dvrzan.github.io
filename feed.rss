<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Danijela's blog</title><description>All things Swift and more</description><link>https://danijelavrzan.com</link><language>en</language><lastBuildDate>Tue, 26 Jul 2022 08:42:52 -0400</lastBuildDate><pubDate>Tue, 26 Jul 2022 08:42:52 -0400</pubDate><ttl>250</ttl><atom:link href="https://danijelavrzan.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://danijelavrzan.com/posts/2022/07/how-to-test-custom-codable</guid><title>How to test custom Codable initializer</title><description>Sometimes, when parsing a JSON, you need to implement a custom Codable initializer. Because of that custom logic, you're no longer using the default implementation. It's a good idea to test your code.</description><link>https://danijelavrzan.com/posts/2022/07/how-to-test-custom-codable</link><pubDate>Tue, 26 Jul 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to test custom Codable initializer</h1><p>Sometimes, when parsing a <strong>JSON</strong>, you need to implement a custom <code>Codable</code> initializer. Whether <code>Decodable</code> or <code>Encodable</code>, depends on the use-case.</p><p>Because of that custom logic, you're no longer using the default implementation. It's a good idea to test your code.</p><h2>Custom Decodable initializer</h2><p>Consider the following struct with a custom decodable initializer:</p><pre><code><span class="keyword">struct</span> Conference: <span class="type">Codable</span> {
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> city: <span class="type">String</span>
  <span class="keyword">let</span> country: <span class="type">String</span>
  <span class="keyword">let</span> date: <span class="type">String</span>
  <span class="keyword">let</span> days: <span class="type">Int</span>
  <span class="keyword">let</span> isOnline: <span class="type">Bool</span>

  <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
    <span class="keyword">case</span> name, city, country, date, days, isOnline
  }

  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
    name = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">name</span>)
    city = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">city</span>)
    country = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">country</span>)
    date = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">date</span>)
    days = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">days</span>)
    isOnline = (<span class="keyword">try</span>? container.<span class="call">decode</span>(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">isOnline</span>)) ?? <span class="keyword">false</span>
  }
}
</code></pre><p>Instead of creating an optional with a default value, you create a custom decoder for <code>isOnline</code> in the initializer. If the key is missing, give it a default value of <code>false</code>.</p><h2>Mock the data</h2><p>First, you need to create a mock data for the <code>Conference</code>. If you try to create a conference, you'll see you can't initialize a <code>Conference</code> object using its properties:</p><img src="https://danijelavrzan.com/images/posts/2022/07/testing-custom-codable-01.png%20"Initializing a struct with a custom codable initializer has no stored properties to define"" alt="Initializing a struct with a custom codable initializer has no stored properties to define"/><p>When you create custom decodable initializer, you lose the <strong>memberwise initializer</strong>.</p><h2>Memberwise initializer</h2><p>Structure types automatically get a default initializer, called <strong>memberwise initializer</strong>. It's generated by compiler based on structure's stored properties or <em>members</em>. But, if you define custom initializer, you lose the default memberwise initializer.</p><blockquote><p>You can learn more about memberwise initializers in the Apple's <a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html">Swift Language Guide</a>.</p></blockquote><p>Luckily, there's an easy solution. To preserve the memberwise initializer, you need to move the initializer to an <strong>extension</strong>:</p><pre><code><span class="keyword">extension</span> <span class="type">Conference</span> {
    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
      <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
      name = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">name</span>)
      city = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">city</span>)
      country = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">country</span>)
      date = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">date</span>)
      days = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">days</span>)
      isOnline = (<span class="keyword">try</span>? container.<span class="call">decode</span>(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">isOnline</span>)) ?? <span class="keyword">false</span>
    }
}
</code></pre><p>Now you have both your custom initializer and the memberwise initializer:</p><img src="https://danijelavrzan.com/images/posts/2022/07/testing-custom-codable-02.png%20"Memberwise initializer is preserved when moving custom initializer to an extension"" alt="Memberwise initializer is preserved when moving custom initializer to an extension"/><p>With this, you can create some mock data:</p><pre><code><span class="keyword">struct</span> Seed {
    <span class="keyword">static let</span> conference = <span class="type">Conference</span>(
        name: <span class="string">"iOSDevUK"</span>,
        city: <span class="string">"Aberystwyth"</span>,
        country: <span class="string">"United Kingdom"</span>,
        date: <span class="string">"04/09/2022"</span>,
        days: <span class="number">4</span>,
        isOnline: <span class="keyword">false</span>
    )
}
</code></pre><h2>Mock the JSON</h2><p>To test if your custom decodable implementation works, you also need to mock the JSON data:</p><pre><code><span class="keyword">private let</span> conferenceData = <span class="type">Data</span>(<span class="string">"""
{
    "name": "iOSDevUK",
    "city": "Aberystwyth",
    "country": "United Kingdom",
    "date": "04/09/2022",
    "days": 4
}
"""</span>.<span class="property">utf8</span>)
</code></pre><h2>Unit test</h2><p>Pass the JSON data to the <code>JSONDecoder.decode(_:from:)</code> and test whether the decoded output is equal to the expected <code>conference</code> seed:</p><pre><code><span class="keyword">func</span> test_customDecoding_returnsExpectedValue() {
    <span class="comment">//Given</span>
    <span class="keyword">let</span> conference = <span class="type">Seed</span>.<span class="property">conference</span>

    <span class="comment">//When</span>
    <span class="keyword">let</span> decodedConference = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Conference</span>.<span class="keyword">self</span>, from: conferenceData)

    <span class="comment">//Then</span>
    <span class="call">XCTAssertEqual</span>(
        decodedConference,
        conference,
        <span class="string">"Decoded JSON doesn't match the given Conference() object"</span>
    )
}
</code></pre><p>Now, Xcode will complain once more:</p><img src="https://danijelavrzan.com/images/posts/2022/07/testing-custom-codable-03.png%20"When asserting two values are equal, add Equatable conformance"" alt="When asserting two values are equal, add Equatable conformance"/><p>Because you're testing for equality, you need to add the <code>Equatable</code> conformance to the <code>Conference</code> struct:</p><pre><code><span class="keyword">struct</span> Conference: <span class="type">Codable</span>, <span class="type">Equatable</span> {
  ...
}
</code></pre><p>That's it! You should have a passing unit test for your custom decodable initializer.</p><blockquote><p>Make sure your conference seed and the JSON you're testing with have identical data. If one value is incorrect, the test will fail.</p></blockquote><h2>Failing test</h2><p>If your test fails, <code>XCTAssertEqual</code> doesn't really give any useful information on why and where the test failed:</p><img src="https://danijelavrzan.com/images/posts/2022/07/testing-custom-codable-04.png%20"XCTAssert fails and shows a lengthy error"" alt="XCTAssert fails and shows a lengthy error"/><p>Imagine testing against an array of data or a large nested JSON. It would be impossible to look where the test failed.</p><p>Krzysztof Zabłocki (<a href="https://twitter.com/merowing_">@merowing_</a>), created a pretty cool library to help you identify the difference between two instances, conveniently called <a href="https://github.com/krzysztofzablocki/Difference">Difference</a>.</p><p>When you import the library to your project, instead of the obscure error message, you'll see this:</p><img src="https://danijelavrzan.com/images/posts/2022/07/testing-custom-codable-05.png%20"XCTAssert error when using a library called Difference"" alt="XCTAssert error when using a library called Difference"/><p>Pretty cool, right? I use the library in my projects and I can tell you it helps a lot when you have large JSON files. Thank you Krzysztof!</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown</guid><title>Publish: Creating Website Content with Markdown</title><description>After generating a website using Publish you have two options to start building your website: using markdown files or programmatically. In this post, you'll learn how to add sections and content with markdown files.</description><link>https://danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown</link><pubDate>Tue, 28 Jun 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Publish: Creating Website Content with Markdown</h1><blockquote><p>If you're wondering how to get started using <a href="https://github.com/JohnSundell/Publish">Publish</a>, check the <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">How to Create a Personal Website in Swift using Publish</a> post. Continue reading to learn how to create content for your website with markdown files.</p></blockquote><h2>Project Structure</h2><p>Publish generates static websites as Xcode Packages where the executable product is your website.<br><br>When you open <strong>Package.swift</strong> for the first time, you'll see the following folder structure:</p><img src="https://danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-01.png%20"Folder structure of projects generated by Publish"" alt="Folder structure of projects generated by Publish"/><h3>Content</h3><p><strong>Content</strong> is where you put your website's content; blog posts, sections, and pages.</p><p>Publish lets you generate your website's content in two ways: by using markdown files or programmatically. When you add markdown files to <strong>Content</strong>, Publish parses the content automatically. It uses <a href="https://github.com/johnsundell/ink.git">Ink</a> markdown parser library, created by John Sundell.</p><p>We'll explore how to generate content with markdown files in the rest of the article.</p><h3>Output</h3><p><strong>Output</strong> is the main folder of your website. It contains all the files necessary to display the content of the website. It's generated every time you build the project in Xcode. Once you start adding more content and custom pages to your website, you'll see more files and folders appear.</p><blockquote><p>You don't add or edit anything in this folder as it contains all the content and information to generate your website. Consider it as <em>read-only</em>. You'll see <strong>feed</strong> and <strong>sitemap</strong> files there along with <strong>styles.css</strong>. This CSS file is the pre-defined styling for your website, but you'll learn how to customize it and add custom styling in the later post.</p></blockquote><h3>Resources</h3><p><strong>Resources</strong> is where you add any media files for your content, like images, videos, audio, and fonts.</p><h3>Sources</h3><p><strong>Sources</strong> has all the <em>Swift</em> files to build your website. Currently, there's one <strong>main.swift</strong> file which contains a configuration information for your website. You can add sections, specific item metadata, website properties, and configure publishing steps:</p><img src="https://danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-02.png%20"main.swift file showing the pre-defined configuration for the website"" alt="main.swift file showing the pre-defined configuration for the website"/><blockquote><p>Publish uses specific terminology to refer to basic structure of the website. <strong>Pages</strong> are standalone webpages on your website. <strong>Sections</strong> are special types of webpages, navigated using navigation menu. <strong>Items</strong> are blog posts.</p></blockquote><h2>Content Structure</h2><p>When you first generate your website, you'll see two items in <strong>Content</strong>; <strong>index.md</strong> file and <strong>posts</strong> folder. Inside <strong>posts</strong>, there are two files: <strong>index.md</strong> and <strong>first-post.md</strong>.</p><p>The root index file is your website's homepage. You can see it when you open the website in your browser:</p><img src="https://danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-03.png%20"MyWebsite running on local server in Google Chrome"" alt="MyWebsite running on local server in Google Chrome"/><p>Right now, if you try to add anything inside the markdown file it won't render on the website. As you can see, the file is empty, but the homepage of your website has some data displayed. These components get added programmatically using the built-in <strong>Foundation</strong> theme that Publish ships with. Anything you add in both index files is overriden programmatically.</p><p>You won't be creating a custom theme in this post, but you can take a look at the built-in theme and how the components get created programmatically. Under <strong>Package Dependencies</strong>, find <strong>Publish</strong> and expand it. Go to <strong>Sources</strong> -&gt; <strong>Publish</strong> -&gt; <strong>API</strong> and open <strong>Theme+Foundation</strong> file:</p><img src="https://danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-03.png%20"Theme+Foudation.swift file showing the first few lines of code"" alt="Theme+Foudation.swift file showing the first few lines of code"/><blockquote><p>We'll take a look at how to build a custom theme in one of the future posts.</p></blockquote><p>You can try adding more markdown files to <strong>posts</strong> as additional blog posts and once you build your website, they will all appear on your homepage.</p><h2>Adding Sections</h2><p>Open <strong>main.swift</strong> file and add two more sections under <code>SectionID</code>. You can add any section you want. Let's add <strong>about</strong> and <strong>portfolio</strong> sections:</p><pre><code><span class="comment">// This type acts as the configuration for your website.</span>
<span class="keyword">struct</span> MyWebsite: <span class="type">Website</span> {
    <span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
        <span class="comment">// Add the sections that you want your website to contain here:</span>
        <span class="keyword">case</span> posts
        <span class="comment">// New sections</span>
        <span class="keyword">case</span> about
        <span class="keyword">case</span> portfolio
    }
    ...
</code></pre><p>Build the project and you'll see two new folders under <strong>Output</strong>: <strong>about</strong> and <strong>portfolio</strong>. Refresh your website and you'll see two more sections in your navigation menu.</p><p>To populate your new section pages with content, add <strong>about.md</strong> and <strong>portfolio.md</strong> files to the root of <strong>Content</strong> folder. The files need to have the same name as sections. Then write some markdown inside. Build the project and refresh the website:</p><img src="https://danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-04.png%20"About webpage showing the section's content and three navigation menu items: My Posts, About and Portfolio"" alt="About webpage showing the section's content and three navigation menu items: My Posts, About and Portfolio"/><h2>Adding Pages</h2><p>To add standalone pages that you can navigate to using navigation menu, add the markdown file for the page in the root of <strong>Content</strong>. Then, link to the page anywhere you'd like.</p><p>Let's say you want to add a custom <strong>Contact</strong> page. Create a <strong>contact.md</strong> file and add the link to it in about section with markdown <code>[Contact me](/contact)</code>. Build the project, refresh the website and you can navigate to the contact page:</p><img src="https://danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-05.png%20"Contact page with Contact Me! title and two paragraphs"" alt="Contact page with Contact Me! title and two paragraphs"/><hr><p>You've learned how to build your website with markdown using the built-in Foundation theme. You can add sections, standalone pages, and blog posts. You can build a simple static website using markdown only.</p><p>In the future post, you'll learn how to go behind the scenes and build your website in Swift with a custom theme. You'll also learn how to add some flavor and colors with CSS.</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish</guid><title>How to Create a Personal Website in Swift using Publish</title><description>Publish is a static site generator that lets you build website in your favourite programming language - Swift!</description><link>https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish</link><pubDate>Tue, 14 Jun 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to Create a Personal Website in Swift using Publish</h1><p>So you've decided to create a personal website to show your portfolio or start writing a blog. The biggest decision you need to make is choose the tech stack to build the website.</p><h2>CMS or a Static Site</h2><p>You could go with the <strong>Content Management Service (CMS)</strong> that lets you build a website without knowing any web development, like <a href="https://wordpress.com">WordPress</a> or <a href="https://webflow.com">Webflow</a>. If you're feeling more adventorous and want something simple yet customizable, you could choose a static site generator.</p><blockquote><p>Of course, there's always an option to build the entire website yourself. But, let's be honest, who has time for that? Besides, there are many great options out there to choose from!</p></blockquote><p><strong>Static site generator</strong> is an alternative to CMS and a very popular choice among developers. It's a tool that generates a static website based on raw data and a set of templates, automating the task of coding individual HTML pages. These HTML pages are pre-built and load the same way every time a website is open. This makes static websites fast as they load quickly in users' browsers.</p><p>Dynamic websites, on the other hand, load differently each time based on any different data input, like user location, input or action, and require JavaScript code within the browser to render properly.</p><p>Static websites are also <strong>100% JavaScript free</strong> by default. Of course, you could always add JS code yourself later.</p><p>The most popular static site generator among developers is <a href="https://jekyllrb.com">Jekyll</a>. It's using <a href="https://shopify.github.io/liquid/">Liquid</a>, a template language created by Shopify and written in Ruby.</p><p>There's also a third option that you might consider and it's what this post is all about so let's get right to it.</p><h2>Publish</h2><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built by John Sundell to help Swift developers create their personal websites using language they already know. That's right, you can build a static website in Swift, just like this website!</p><blockquote><p>While Publish helps you write website components in Swift, you still need some basic understanding of HTML and CSS. But worry not; nothing complex that a little bit of searching online won't help.</p></blockquote><p>Every website created with Publish is a Swift package. When deployed, a pre-defined set of steps get executed that builds and renders the HTML components and styles them with CSS. We've already mentioned how static sites are pre-built, so Publish does exactly that. Apart from rendering HTML, it also generates the RSS feed and a site map for you.</p><p>Publish comes with a built-in theme that let's you get started quickly, called <strong>Foundation</strong>. It serves as a starting point and you can replace it with your own at any time.</p><h2>Installing the Publish Command Line Tool</h2><blockquote><p>At the time of writing, Publish 0.9.0 version is the latest and supports Swift version 5.5 (or later) and macOS Monterey (12.0) or later. Make sure to check the <a href="https://github.com/JohnSundell/Publish#system-requirements">System Requirements</a> in the official documentation.</p></blockquote><p>Publish comes with a neat command line tool that makes it easy to set up new website projects. To install the tool, clone the Publish repo, get into the root folder and run <code>make</code>:</p><pre><code class="language-no-highlight">$ git clone https://github.com/JohnSundell/Publish.git
$ cd Publish
$ make
</code></pre><blockquote><p>You use the <code>cd</code> command to change the current working directory and <code>make</code> is a utility command for building programs from source code. In this case you build the command line tool for Publish.</p></blockquote><p>To see the list of available commands, run <code>publish help</code> in the command line and you'll see this:</p><pre><code class="language-no-highlight">Publish Command Line Interface
------------------------------
Interact with the Publish static site generator from
the command line, to create new websites, or to generate
and deploy existing ones.

Available commands:

- new: Set up a new website in the current folder.
- generate: Generate the website in the current folder.
- run: Generate and run a localhost server on default port 8000 for the 
       website in the current folder. Use the "-p" or "--port" option for  
       customizing the default port.
- deploy: Generate and deploy the website in the current folder, according to
          its deployment method.
</code></pre><p>These four commands are all you need and will come quite handy.</p><h2>Creating a New Website</h2><p>To create a new website you'll use the Publish command line tool. All you need to do is create a new folder and run <code>publish new</code> inside the newly created folder:</p><pre><code class="language-no-highlight">$ mkdir MyWebsite
$ cd MyWebsite
$ publish new
</code></pre><blockquote><p>You use the <code>mkdir</code> command to create new folders.</p></blockquote><p>Now run <code>open Package.swift</code> or find the folder in Finder and open <strong>Package.swift</strong> manually.</p><p>Xcode will open your new website as a package:</p><img src="https://danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-01.png%20"Xcode window with a Package.swift open"" alt="Xcode window with a Package.swift open"/><p>All you have to do is, run the package in Xcode with <strong>Product</strong> -&gt; <strong>Run</strong> or press the <strong>Command + R</strong> keys. This will generate and update the website every time you make new changes. You'll see the following output in the Xcode console:</p><pre><code class="language-no-highlight">Publishing MyWebsite (6 steps)
[1/6] Copy 'Resources' files
[2/6] Add Markdown files from 'Content' folder
[3/6] Sort items
[4/6] Generate HTML
[5/6] Generate RSS feed
[6/6] Generate site map
✅ Successfully published MyWebsite
Program ended with exit code: 0
</code></pre><h2>Running Website Locally</h2><p>You can preview your website locally before it's published by running a local server. Simply run <code>publish run</code> in command line while in the root folder of your website to run the server and open the link from the console in your browser of choice. If you haven't customized the port, it will be <code>http://localhost:8000</code></p><img src="https://danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-02.png%20"Command line output of running publish run"" alt="Command line output of running publish run"/><p>Right now, you'll see your website built with the default Foundation theme:</p><img src="https://danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-03.png%20"MyWebsite running on local server in Google Chrome"" alt="MyWebsite running on local server in Google Chrome"/><p>That's it. Your new website is up and running!</p><p>When you're done working on your website, go back to your Terminal and press <strong>ENTER</strong> to stop the server. When you want to resume, follow the same steps to start the local server.</p><hr><p>This is the first post in the series of how to build a personal website using Publish. If you've been using Publish and found a better way to do something or you think I'm missing something important, please let me know! I'd love to hear what you've learned yourself.</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://danijelavrzan.com/posts/2022/05/why-speak-at-conferences</guid><title>Why speak at conferences and how to apply</title><description>Attending conferences is a great way to learn new things, meet other developers, and promote your company or personal projects you've been working on. But have you ever wondered what it's like to be a speaker? Are you interested in speaking but don't know how or where to start? Impostor syndrome? You have more to offer than you think! Let's see why you should apply as a speaker and how to do that.</description><link>https://danijelavrzan.com/posts/2022/05/why-speak-at-conferences</link><pubDate>Tue, 31 May 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Why speak at conferences and how to apply</h1><p><strong><em>"Prepare as best as you can, but expect everything to go wrong."</em></strong></p><p>Conference speaking is one of the things I've never expected to do myself. At least not this early in my career. The thought never even crossed my mind.</p><p>I got invited to speak at my first conference and things went on from there. Now, almost a year later, I love speaking at conferences. It's a different world from being an attendee. You get to do everything other attendees do; listen to other talks, learn, and meet new people. But you also get a sneak peek behind the curtains. You get to hang out with other speakers and have an amazing opportunity of sharing your experience with others.</p><h2>Overcoming Impostor Syndrome</h2><p>Who would want to listen to me? What do I have to offer that another more experienced developer cannot? Everyone is going to see that I know nothing and they'll call me an impostor. We've all been there.</p><p>Nobody knows everything. When you learn a new concept and do something practical with it, you gain experience. Experience is what matters and no one can argue your experience is wrong. Take that personal experience to your advantage and make a talk about it. You've find a cool new concept to implement navigation in SwiftUI? Talk about it! Share it with other developers.</p><p>Talk about topics that interest you; that you're passionate about. You don't have to be an expert on the topic to give a talk about it. The secret is to make others reconsider their perspective through yours. The only difference between speakers and other attendees is they have learned something well and they are willing to talk about it.</p><h2>Coming up with an idea</h2><p>One of my previous projects used an architectural pattern I've never heard about before. When I talked to other developers about it, no one heard of it either. So I thought it would make a perfect conference talk. I knew how the pattern worked in a large codebase and have been working with it for over a year.</p><p>Some developers like to submit talk proposals on a technical topic they want to learn more about. At the time they submit their talk, they only have a high level understanding of the topic. If you think you have enough time to learn more about it and get a decent understanding, it's a way to go. But, I wouldn't suggest this.</p><p>Try to get a better understanding of the topic you're submitting a talk proposal for. You will be more comfortable talking about it and it reduces a lot of stress before your talk. Attendees are, after all, paying to come and listen to your talk and are eager to learn from it.</p><p>The topic doesn't have to be unique either. Want to talk about an API but somebody already gave a talk about it? So what, your point of view matters too. Remember, it's all about your own perspective.</p><blockquote><p><strong><em>I don't think I have anything new to say, it's all covered before</em></strong> is only your brain trying to convince you not to do it. It's scary and inconvenient. After all, we like being comfortable. Break out of it and do it! You'll feel amazing afterwards. There's nothing like that feeling of accomplishment after you've delivered your talk.</p></blockquote><p>Once you have a topic (or a few) in mind that you feel you're ready to give a talk about, find conferences that interest you and start applying.</p><h2>Call For Papers</h2><p><strong>CFP</strong> or Call For Papers is a first step in the process. Conferences usually open their CFPs six to four months before the conference and give a month or two for speakers to apply.</p><p>Once you start the application process, your talk doesn't need to be ready. You might start working on your slides and practicing your talk a month or two before the conference. Or as soon as you'd like, but I don't recommend leaving it until the last minute, especially if you're not familiar with the topic. Other things may come up that you weren't expecting and you'll end up rushing and doing sloppy work. The more prepared you are for your talk - the less stressed you'll be.</p><blockquote><p>Of course, no amount of preparation will reduce the stress as you're about to go on stage. Even experienced speakers with years of experience behind them get stressed before the talk. It's completely human. Remember to breathe, drink some water, and you'll do great!</p></blockquote><p>Application process starts with a form and three important fields that you need to fill; talk title, talk description, and about yourself. Some of them may ask more details, but these are consistent parts of every application. Let's talk about each of them.</p><h3>Talk Title</h3><p>Talk title is the first thing conference attendeeds see. You want to keep it short, but descriptive enough to convey the message your talk will give.</p><p>For my iOSDevUK '22 talk about Publish framework to build static websites in Swift, I came up with the title: <strong>"Swift your personal website using Publish"</strong>. In Publish, you write your website components in Swift programming language. The end result is a fast and responsive (swift) static website. I thought it would be a nice play with words.</p><p>Once you have the talk title ready, it's time to come up with the talk description.</p><h3>Talk Description</h3><p>Talk description should answer the following questions:</p><ul><li>Why are you giving this talk?</li><li>What is the purpose of the talk?</li><li>What will the audience take away from it?</li></ul><p>This doesn't mean the description should be a massive block of text. If there is no requirement in the CFP form, keep it around 100 - 150 words long. Nobody likes to read a wall of text. The person reading the description should be able to have answers to the above questions. The idea is to make it interesting so people want to see your talk. Especially if a conference has more tracks.</p><p>This part of application is also called an <strong>abstract</strong>, which means that your talk description should be exactly that. If you know what you want to talk about, then write specific things. But if you have an idea or are not quite sure what approach you want to take, try to write it without anything specific so you have some room to change it up later.</p><p>It's all about balance. Take some time to write a good description and ask others for feedback. Remember to run it through a spell check too, you don't want grammatical errors in there. It shows that you care and are ready to deliver an amazing talk.</p><blockquote><p>One thing I like to do is take a look at how other speakers write their talk titles and descriptions to get inspiration from them. Open any conference website and find talks from previous years. You might get an idea from there.</p></blockquote><p>You wrote the hardest part of application, well done! Now's the time to think about yourself.</p><h3>About Yourself</h3><p>It may sound simple, but I always spend so much time writing and changing the <strong>About Me</strong> part. Use this part of application to tell people a little about yourself. I've seen developers write around 100-150 words. Or you can make it as short as you'd like. I've even seen conferences asking for 200 words of text.</p><p>Mention what you do, where you're from and where you work. Add a little bit about your personal life, like hobbies or fun facts. Write anything you want to share with attendee so they get to know you. If there's no requirement, choose whether you want to write it in first or third person. I've seen different approaches on this. It's up to you.</p><h3>Final thoughts</h3><p>Talk title and description are what conference organizers look at when deciding whether to accept your talk proposal. Make it count! Take time to refine your idea. You have more than enough time to submit a talk proposal. I like to take notes on things I've learned and later revisit them to see if they'd make a great conference talk or a blog post.</p><p>Finally, get excited, you submitted your first talk!</p><p>Don't get discouraged if your talk doesn't get accepted. Conferences get hundreds of applications and have to make a choice what would be of most interest to all attendees. You're always welcome to submit multiple applications and apply to more than one conference.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions or comments. I'd be more than happy to provide any guidance or take a look at your application and provide feedback. Remember, you have more to share about your experience than you think. Anything interesting that you've worked on is a potential topic for a conference talk.</p><p>Thank you for reading and I'm looking forward to seeing your talks!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://danijelavrzan.com/posts/2022/05/how-to-test-published-property</guid><title>How to test @Published property with XCTest</title><description>@Published properties stream values over time and any changes on the property are immediately sent to all observers. Let's recap how the property works and then we'll take a look at how we can test @Published properties using Apple's testing framework - XCTest.</description><link>https://danijelavrzan.com/posts/2022/05/how-to-test-published-property</link><pubDate>Tue, 17 May 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to test @Published property with XCTest</h1><p>How you're testing a functionality of your code depends on what you want to test and understanding how the code works. Let's start with a quick recap of <code>@Published</code> property.</p><h2>@Published property</h2><p><code>@Published</code> properties stream values over time. When the property's marked as <code>@Published</code> it gets assigned a <code>willSet</code> observer. Any changes on the property are immediately sent to all observers.</p><pre><code><span class="keyword">class</span> VideoListViewModel {
  <span class="keyword">@Published var</span> videos = [<span class="type">Video</span>]()
}
</code></pre><p>Observers are views that watch for any upcoming changes on the property to decide if they need to redraw themselves to display newest data. For view to receive any upcoming updates, you need to mark the object you want to observe with <code>@ObservedObject</code>.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@ObservedObject var</span> viewModel: <span class="type">VideoListViewModel</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>Then any type marked as <code>@ObservedObject</code> needs to conform to <strong>ObservableObject</strong> protocol. Conforming to this protocol creates an <code>objectWillChange</code> publisher. It allows observes to watch for any future changes to its <code>@Published</code> properties.</p><pre><code><span class="keyword">class</span> VideoListViewModel: <span class="type">ObservableObject</span> {
  ...
}
</code></pre><h2>Testing current value with direct access</h2><p><code>@Published</code> property is still <strong><em>just</em></strong> like any other property and we can get its current (wrapped) value by asking for it directly.</p><p>One of the use cases here is to test the initial value of the property.</p><pre><code><span class="keyword">func</span> test_videos_initialValue_isEmpty() {
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()

  <span class="call">XCTAssertTrue</span>(
      viewModel.<span class="property">videos</span>.<span class="property">isEmpty</span>,
      <span class="string">"Expected initial value to be empty, but got</span> \(viewModel.<span class="property">videos</span>)<span class="string">."</span>
  )
}
</code></pre><p>Another use case is testing a synchonous operation. A simple example would be to append new values to <strong>videos</strong> array with <code>.append(_:)</code>.</p><pre><code><span class="keyword">func</span> appendVideos() {
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My First Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Second Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Third Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Fourth Video"</span>))
}
</code></pre><p>You can assert property's current value after the function gets called. The operation will complete before the assertion.</p><pre><code><span class="keyword">func</span> test_videos_whenAppendVideosCalled_hasFourVideos() {
  <span class="comment">//Given</span>
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()
  <span class="comment">//When</span>
  viewModel.<span class="call">appendVideos</span>()
  <span class="comment">//Then</span>
  <span class="call">XCTAssertEqual</span>(viewModel.<span class="property">videos</span>.<span class="property">count</span>, <span class="number">4</span>)
}
</code></pre><p>The whole point of <code>@Published</code> properties is to stream any changes to the view before the value is set. It's like giving someone a heads up something will happen before it does. In that case, you'd want to test the values sent to the view.</p><h2>Testing published value by subscribing to it</h2><p><code>@Published</code> properties stream values over time. To get the published (projected) value of the property, you need to subscribe to it with <code>.sink(receiveValue:)</code>.</p><blockquote><p>While word <strong>sink</strong> might sound confusing at first, it's a common math term. It's often used in engineering and refers to end location of anything that flows (water, data, time, heat etc.). <strong>Source</strong> is where the flow starts and <strong>sink</strong> is where the flow ends. In graph theory, sink is a node of a directed graph with no exiting edges; meaning all directed edges flow towards it. In <strong>Combine</strong>, reactive stream flows towards <code>.sink(receiveValue:)</code>.</p></blockquote><p>To fetch data for the <code>@Published</code> property you'll likely have an asynchronous operation, so you need to use test expectations.</p><pre><code><span class="keyword">func</span> test_videos_whenFetchVideosCalled_hasFourVideos() <span class="keyword">async</span> {
  <span class="comment">//Given</span>
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()
  <span class="keyword">let</span> expectation = <span class="type">XCTestExpectation</span>(description: <span class="string">"Publishes 4 videos"</span>)

  viewModel.<span class="property">$videos</span>
    <span class="comment">// Remove the first (initial) value - we don't need it</span>
    .<span class="call">dropFirst</span>()
    .<span class="call">sink</span>(receiveValue: {
      <span class="comment">// Assert there are 4 new values</span>
      <span class="call">XCTAssertEqual</span>($0.<span class="property">count</span>, <span class="number">4</span>)
      <span class="comment">// Fulfill the expectation</span>
      expectation.<span class="call">fulfill</span>()
    })
    .<span class="call">store</span>(in: &amp;cancellables)

  <span class="comment">//When</span>
  <span class="keyword">await</span> viewModel.<span class="call">fetchVideos</span>()

  <span class="comment">//Then</span>
  <span class="call">wait</span>(for: [expectation], timeout: <span class="number">1</span>)
}
</code></pre><p>These two examples are common use cases of how you can approach testing your <code>@Published</code> properties. There may be more complex use cases and it all depends on your code. I hope this gives you an idea and a good starting point.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback. These blog posts come from my own learning and sharing what I've learned with everyone, in hope it can help you where I've struggled. We're all learning and trying to be better developers every day. Constructive feedback is most welcome.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item></channel></rss>