<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Danijela's blog</title><description>All things Swift and more</description><link>https://www.danijelavrzan.com</link><language>en</language><lastBuildDate>Thu, 14 Dec 2023 10:02:21 -0500</lastBuildDate><pubDate>Thu, 14 Dec 2023 10:02:21 -0500</pubDate><ttl>250</ttl><atom:link href="https://www.danijelavrzan.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/12/content-unavailable-view</guid><title>Handle empty views in SwiftUI with ContentUnavailableView</title><description>Discover how to use SwiftUI's ContentUnavailableView to effortlessly handle empty views in your app. It's easy to use, customizable, and has a pre-defined view for an empty search state. Available in iOS 17.0+.</description><link>https://www.danijelavrzan.com/posts/2023/12/content-unavailable-view</link><pubDate>Wed, 13 Dec 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>Handle empty views in SwiftUI with ContentUnavailableView</h1><p>iOS 17 brought a bag of new goodies in SwiftUI. Among them, the new <code>ContentUnavailableView</code>. It allows us to present an empty state to the user without having to create custom error views.</p><p>It's easy to use, customizable, and has a pre-defined view for an empty <strong>search</strong> state.</p><p>It's recommended to be used in situations where a view’s content cannot be displayed. This could be due to a network error, a list without items, a search that returns no results and other empty states.</p><p>Let's see it in action.</p><h2>Empty search state</h2><p>Search is a common feature in a lot of apps. Presenting an error screen while the user is typing is a good user experience. Never keep your user's wondering about the current state of the app.</p><p>It's so common, that we got a custom <code>search</code> instance of the <code>ContentUnavailableView</code>.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> viewModel = <span class="type">ViewModel</span>()

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationStack</span> {
            <span class="type">List</span> {
                <span class="type">ForEach</span>(viewModel.<span class="property">searchResults</span>, id: \.<span class="keyword">self</span>) { fruit <span class="keyword">in</span>
                    <span class="type">NavigationLink</span> {
                        <span class="type">Text</span>(fruit)
                    } label: {
                        <span class="type">Text</span>(fruit)
                    }
                }
            }
            .<span class="call">navigationTitle</span>(<span class="string">"Fruit"</span>)
            .<span class="call">searchable</span>(text: <span class="property">$viewModel</span>.<span class="property">searchText</span>)
            .<span class="call">overlay</span> {
                <span class="keyword">if</span> viewModel.<span class="property">searchResults</span>.<span class="property">isEmpty</span> {
                    <span class="comment">// Search unavailable view</span>
                    <span class="type">ContentUnavailableView</span>.<span class="call">search</span>(text: searchText)
                }
            }
        }
    }
}
</code></pre><p>Add the empty search state with <code>ContentUnavailableView.search(text: searchText)</code>. It has an optional search <code>text</code> parameter that shows the search text that the user entered.</p><p>Add it as an overlay on the <code>List</code> while the user is typing and if search is returning no results.</p><img src="https://www.danijelavrzan.com/images/posts/2023/12/content-unavailable-view-01.png "List with data on the left and content unavailable view with a search instance on the right"" alt="List with data on the left and content unavailable view with a search instance on the right"/><p>It looks great! No need to create custom error views anymore. It adds a system image and a default description for you.</p><h2>Custom empty states</h2><p>We can also create custom unavailable views with any custom view or a more simple ones with a string and an image. It depends on your use case.</p><p>Let's take a look at an example where we're fetching data from the network and showing it in a list.</p><pre><code><span class="keyword">struct</span> ListView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> viewModel = <span class="type">ViewModel</span>()

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationStack</span> {
            <span class="type">List</span> {
                <span class="type">ForEach</span>(viewModel.<span class="property">data</span>, id: \.<span class="keyword">self</span>) { fruit <span class="keyword">in</span>
                    <span class="type">NavigationLink</span> {
                        <span class="type">Text</span>(fruit)
                    } label: {
                        <span class="type">Text</span>(fruit)
                    }
                }
            }
            .<span class="call">navigationTitle</span>(<span class="string">"Fruit"</span>)
            .<span class="call">overlay</span> {
                <span class="keyword">if</span> viewModel.<span class="property">data</span>.<span class="property">isEmpty</span> {
                    <span class="comment">// Custom unavailable view</span>
                    <span class="type">ContentUnavailableView</span> {
                        <span class="type">Label</span>(<span class="string">"Oh no!"</span>, systemImage: <span class="string">"teddybear.fill"</span>)
                    } description: {
                        <span class="type">Text</span>(<span class="string">"Sorry, our bears were hungry and ate all the fruit."</span>)
                    } actions: {
                        <span class="type">Button</span>(<span class="string">"Try again"</span>) {}
                            .<span class="call">buttonStyle</span>(.<span class="dotAccess">borderedProminent</span>)
                    }
                }
            }
        }
    }
}
</code></pre><p>If network call fails and no data is returned, we show a custom view, which in this case is a <code>Label</code>, custom <code>description</code>, and an <code>action</code>. Both <code>description</code> and <code>action</code> are optional in the above initializer.</p><img src="https://www.danijelavrzan.com/images/posts/2023/12/content-unavailable-view-02.png "List with data on the left and custom content unavailable view on the right"" alt="List with data on the left and custom content unavailable view on the right"/><p>You can also use more simple initializer with <strong>title</strong>, an optional <strong>description</strong> and an optional <strong>image</strong>. You don't need to create custom views, but there's the flexibility of customization.</p><blockquote><p>All strings are <strong>localizable</strong> as well, just like any other view component. If you're using the initializer with a <strong>title</strong> and an <strong>image</strong>, <strong>title</strong> is a <code>LocalizedStringKey</code>.</p></blockquote><h2>Final Thoughts</h2><p><a href="https://developer.apple.com/documentation/swiftui/contentunavailableview">ContentUnavailableView</a> is great addition to the list of available SwiftUI components. You don't have to create custom error views anymore and it's automatically positioned in the middle of the screen. No need to add custom frames or alignment.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">X (Twitter)</a> or <a href="https://iosdev.space/@dvrzan">Mastodon</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/12/custom-dark-mode-color</guid><title>Add custom dark mode color to your app</title><description>When developing apps in SwiftUI, we're given a set of components that allow us to support both light and dark modes without a lot of work. But, there might be occasions where you want a different dark mode color for your app. Like dark blue.</description><link>https://www.danijelavrzan.com/posts/2023/12/custom-dark-mode-color</link><pubDate>Thu, 7 Dec 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>Add custom dark mode color to your app</h1><p>Today, it's quite common for apps to support both light and dark color modes. In fact, if your app is only available in light mode, it's likely dark mode is a highly requested feature.</p><p>When developing apps in SwiftUI, we're given a set of components and tools that allow us to support both light and dark modes without a lot of work. If you're using default fonts and system colors, you get this feature in your app out-of-the-box.</p><h2>Default dark mode system colors</h2><p>When using default system colors, the white color gets converted to black color, or what sometimes is referred to as "true black".</p><p>This is how an app would look like in dark mode with default system colors:</p><img src="https://www.danijelavrzan.com/images/posts/2023/12/custom-dark-mode-color-01.png "Three iPhone screens with a regular view, a form, and a list in default dark mode colors"" alt="Three iPhone screens with a regular view, a form, and a list in default dark mode colors"/><p>But, there might be occasions where you want a different dark mode color for your app. Like <strong>dark blue</strong> for example, which is a popular option often seen in apps.</p><p>An app could look like this in dark mode with custom dark blue colors:</p><img src="https://www.danijelavrzan.com/images/posts/2023/12/custom-dark-mode-color-02.png "Three iPhone screens with a regular view, a form, and a list in custom dark mode colors"" alt="Three iPhone screens with a regular view, a form, and a list in custom dark mode colors"/><blockquote><p>Any time you're using custom colors, you lose all the good stuff that automatically comes with system colors. Make sure your colors follow Apple's Human Interface Guidelines and use good contrast and accessibility features. I suggest reading the <a href="https://developer.apple.com/design/human-interface-guidelines/accessibility#Color-and-effects">Accessibility's Color and Effects</a> and <a href="https://developer.apple.com/design/human-interface-guidelines/color">Color</a> sections of the guide to learn more.</p></blockquote><p>Let's implement a custom dark mode color in our app - <strong>dark blue</strong>.</p><h2>Color assets</h2><p>First, we need to create the <strong>Color Assets</strong>.</p><p>Add the following three colors to your <code>Assets.xcassets</code> folder:</p><ul><li>Background<ul><li>Any Appearance (Light) - <code>#FFFFFF</code></li><li>Dark - <code>#0E141B</code><ul></ul></li></ul></li></ul><ul><li>ListBackground<ul><li>Any Appearance (Light) - <code>#F2F2F7</code></li><li>Dark - <code>#0E141B</code><ul></ul></li></ul></li></ul><ul><li>ListRowBackground<ul><li>Any Appearance (Light) - <code>#FFFFFF</code></li><li>Dark - <code>#1C1F24</code></li></ul></li></ul><p>We'll use <strong>Background</strong> for the <code>ScrollView</code> and all other general <code>Views</code>. <strong>ListBackground</strong> and <strong>ListRowBackground</strong> are specifically for the <code>List</code> and <code>Form</code>. These two views are both scrollable views. But the difference is they both have rows or sections which need to have a different background color.</p><p>Both <strong>Background</strong> and <strong>ListBackground</strong> have the same dark mode color, but the <strong>ListBackground</strong> is not pure white in light mode. It's light gray.</p><p>I chose the above colors to my liking, but you're welcome to update them to your preference. Light mode colors are mimicking the default light mode system colors. Only the dark mode colors are different.</p><h2>View Background</h2><p>Adding background color to regular views, like <code>VStack</code> and <code>HStack</code> is simple. All you need to do is add <code>background()</code> modifier to the top most view in your view hierarchy.</p><p>In this example, the top most view is a <code>VStack</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">HStack</span> {
                <span class="type">VStack</span> {...}
            }

            <span class="type">VStack</span> {...}
        }
        .<span class="call">padding</span>()
        <span class="comment">// Add background color to the VStack</span>
        .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">background</span>)
    }
}
</code></pre><p>That's it! This will apply a custom background to your entire view.</p><h2>ScrollView Background</h2><p><code>ScrollView</code> is a bit different and requires an additional modifier to change the background.</p><p>We can take the above <strong>ContentView</strong> and embed the <code>VStack</code> in the <code>ScrollView</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ScrollView</span> {
            <span class="type">VStack</span> {
                <span class="type">HStack</span> {
                    <span class="type">VStack</span> {...}
                }

                <span class="type">VStack</span> {...}
            }
        }
        .<span class="call">padding</span>()
        <span class="comment">// Add background color to the ScrollView</span>
        .<span class="call">scrollContentBackground</span>(.<span class="dotAccess">hidden</span>)
        .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">background</span>)
    }
}
</code></pre><p>Before we apply a custom background to any scrollable view, we need to remove the default background of that view with <code>scrollContentBackground(.hidden)</code> modifier.</p><p>Applying <code>background()</code> without removing the default background of the scrollable view will not have any results.</p><h2>List and Form Background</h2><p><code>List</code> and <code>Form</code> are also scrollable views, so the same principle applies. Add the <code>scrollContentBackground(.hidden)</code> and <code>background()</code> modifiers at the end of the list:</p><pre><code><span class="keyword">struct</span> ListView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationStack</span> {
            <span class="type">List</span> {
                <span class="type">NavigationLink</span> {
                    <span class="type">SomeView</span>()
                } label: {...}

                <span class="type">NavigationLink</span> {
                    <span class="type">SomeOtherView</span>()
                } label: {...}

                <span class="type">Section</span> {
                    <span class="type">NavigationLink</span> {
                        <span class="type">SomeDifferentView</span>()
                    } label: {...}
                } header: {
                    <span class="type">Text</span>(<span class="string">"Header"</span>)
                }
            }
            .<span class="call">navigationTitle</span>(<span class="string">"Settings"</span>)
            <span class="comment">// Add background color to the List</span>
            .<span class="call">scrollContentBackground</span>(.<span class="dotAccess">hidden</span>)
            .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">listBackground</span>)
        }
    }
}
</code></pre><p>The only difference in this case is the color we're applying. We're using the <code>ListBackground</code> color so the view looks good in light mode as well.</p><p>Remember to always use this pair of modifiers when working with any scrollable view, like <code>ScrollView</code>, <code>List</code> and <code>Form</code>.</p><p>Next, we need to change the background color of the list row as well.</p><h3>List and Form Row Background</h3><p><code>List</code> and <code>Form</code> both have rows that use different background colors then the rest of the view.</p><p>We need to change that color as well or the default system color will be used which doesn't go well with our new dark blue color.</p><pre><code><span class="keyword">struct</span> ListView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationStack</span> {
            <span class="type">List</span> {
                <span class="type">NavigationLink</span> {
                    <span class="type">SomeView</span>()
                } label: {...}
                <span class="comment">// Add background color to the list row</span>
                .<span class="call">listRowBackground</span>(<span class="type">Color</span>.<span class="property">listRowBackground</span>)
                
                <span class="type">NavigationLink</span> {
                    <span class="type">SomeOtherView</span>()
                } label: {...}
                <span class="comment">// Add background color to the list row</span>
                .<span class="call">listRowBackground</span>(<span class="type">Color</span>.<span class="property">listRowBackground</span>)
                
                <span class="type">Section</span> {
                    <span class="type">NavigationLink</span> {
                        <span class="type">SomeDifferentView</span>()
                    } label: {...}
                } header: {
                    <span class="type">Text</span>(<span class="string">"Header"</span>)
                }
                <span class="comment">// Add background color to the list row</span>
                .<span class="call">listRowBackground</span>(<span class="type">Color</span>.<span class="property">listRowBackground</span>)
            }
            .<span class="call">navigationTitle</span>(<span class="string">"Settings"</span>)
            <span class="comment">// Add background color to the List</span>
            .<span class="call">scrollContentBackground</span>(.<span class="dotAccess">hidden</span>)
            .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">listBackground</span>)
        }
    }
}
</code></pre><p>To change the background color of the list row, add the <code>listRowBackground()</code> modifier to the row itself. If you have multiple rows, you need to add it to every row. When you have a <code>Section</code> in the code, you can add the modifier there and it will apply to every row in that section.</p><p>That's it! There's not a lot of code here, but a lot of figuring out what modifiers to use and where to apply them.</p><h2>Final Thoughts</h2><p>System default background colors are a great start when developing your apps. But sometimes you want to change them and add your own custom colors.</p><p>If you do decide to use your own colors, always make sure the colors have good contrast.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">X (Twitter)</a> or <a href="https://iosdev.space/@dvrzan">Mastodon</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/11/create-tabview-with-enums</guid><title>Handle TabView data in a type-safe way with Enums</title><description>Enums are a data type that allow you to define your own values and work with them in a type-safe way. In this article, we'll create a TabView and utilize enums to define the data we need, in a type-safe way.</description><link>https://www.danijelavrzan.com/posts/2023/11/create-tabview-with-enums</link><pubDate>Tue, 14 Nov 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>Handle TabView data in a type-safe way with Enums</h1><p>Enumerations, or <em>enums</em> for short, are a data type that allow you to define your own values and work with them in a type-safe way. This greatly reduces the likelihood of unexpected and invalid states and makes your code more readable.</p><p>In this article, we'll create a <code>TabView</code> and utilize enums to define the data we need, in a type-safe way.</p><h2>Creating a TabView</h2><p>Let's create a new view called <strong>TabViewNavigation</strong> with a <code>TabView</code> and two tab items:</p><pre><code><span class="keyword">struct</span> TabNavigationView: <span class="type">View</span> {
    <span class="comment">// Persist the selected tab between app launches</span>
    <span class="keyword">@SceneStorage</span>(<span class="string">"SelectedTab"</span>) <span class="keyword">private var</span> selectedTab = <span class="string">"Home"</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">TabView</span> {
            <span class="type">HomeView</span>()
                .<span class="call">tabItem</span> {
                    <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house"</span>)
                }
                .<span class="call">tag</span>(<span class="string">"Home"</span>)
            <span class="type">SettingsView</span>()
                .<span class="call">tabItem</span> {
                    <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>)
                }
                .<span class="call">tag</span>(<span class="string">"Settings"</span>)
        }
    }
}
</code></pre><p>We create two tabs called <strong>Home</strong> and <strong>Settings</strong> with appropriate <strong>SFSymbols</strong>. Tabs have unique names, so we use their name as a tag.</p><p>This implementation works great. You can create a <code>TabView</code> like this and use it in your app without any issues. However, notice we're using raw strings in our labels and <strong>"Home"</strong> string is repeated three times.</p><p>While this works, there's a better way to handle all the tab information in a type-safe way without repeating strings and calling for potential errors in your code.</p><h2>Creating a Tab enum</h2><p>This is a perfect example of where to use enums in your code. Each tab in the <code>TabView</code> is a unique value. There are no two tabs with the same name.</p><p>Create a new <code>enum</code> called <strong>Tab</strong> with two cases:</p><pre><code><span class="keyword">enum</span> Tab {
    <span class="keyword">case</span> home
    <span class="keyword">case</span> settings
}
</code></pre><p>The number of values depends on how many tabs you have.</p><h3>Handle tab data</h3><p>I want to expand the enum to handle all data for the tab's <code>Label</code>. Add two computed properties; <strong>title</strong> and <strong>icon</strong>:</p><pre><code><span class="comment">// Set `String` as raw value type for @SceneStorage</span>
<span class="keyword">enum</span> Tab: <span class="type">String</span> {
    <span class="keyword">case</span> home
    <span class="keyword">case</span> settings

    <span class="comment">// tab title</span>
    <span class="keyword">var</span> title: <span class="type">String</span> {
        <span class="keyword">switch self</span> {
            <span class="keyword">case</span> .<span class="dotAccess">home</span>:
                <span class="keyword">return</span> <span class="string">"Home"</span>
            <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
                <span class="keyword">return</span> <span class="string">"Settings"</span>
        }
    }

    <span class="comment">// tab icon</span>
    <span class="keyword">var</span> icon: <span class="type">String</span> {
        <span class="keyword">switch self</span> {
            <span class="keyword">case</span> .<span class="dotAccess">home</span>:
                <span class="keyword">return</span> <span class="string">"house"</span>
            <span class="keyword">case</span> .<span class="dotAccess">settings</span>:
                <span class="keyword">return</span> <span class="string">"gear"</span>
        }
    }
}
</code></pre><p>Here, we use switch on the enum itself and return the string depending on the value.</p><p>Both properties are of type <code>String</code> because that's what the <code>Label</code> initializer requires.</p><p>Apart from title and icon, we want to use enum to persist the selected tab with <code>@SceneStorage</code>. You need to specify <code>String</code> as the raw type for the enum so you can use it with <code>@SceneStorage</code>.</p><h2>Using Tab with TabView</h2><p>Now all that's left is to rewrite the <strong>TabNavigationView</strong> and use <code>Tab</code> instead:</p><pre><code><span class="keyword">struct</span> TabNavigationView: <span class="type">View</span> {
    <span class="keyword">@SceneStorage</span>(<span class="string">"SelectedTab"</span>) <span class="keyword">private var</span> selectedTab: <span class="type">Tab</span> = .<span class="dotAccess">home</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">TabView</span> {
            <span class="type">HomeView</span>()
                .<span class="call">tabItem</span> {
                    <span class="type">Label</span>(<span class="type">Tab</span>.<span class="property">home</span>.<span class="property">title</span>, systemImage: <span class="type">Tab</span>.<span class="property">home</span>.<span class="property">icon</span>)
                }
                .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">home</span>)
            <span class="type">SettingsView</span>()
                .<span class="call">tabItem</span> {
                    <span class="type">Label</span>(<span class="type">Tab</span>.<span class="property">settings</span>.<span class="property">title</span>, systemImage: <span class="type">Tab</span>.<span class="property">settings</span>.<span class="property">icon</span>)
                }
                .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">settings</span>)
        }
    }
}
</code></pre><p>That looks better than using raw strings everywhere. It's more readable and it's type-safe as well.</p><h2>Final Thoughts</h2><p>Enums are a first-class types in Swift, and unlike in some other programming langages, can be very powerful behind the basic implementation. They can be extended to add additional functionalities as well.</p><p>Utilizing enums in your code can help you make it more readable and avoid unnecessary errors.</p><p>If you want to learn more about enums, the official <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations/">Swift documentation</a> is a great place to start.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">X (Twitter)</a> or <a href="https://iosdev.space/@dvrzan">Mastodon</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/11/review-pull-requests</guid><title>Effective pull request reviews</title><description>Creating PRs is an easy task. Creating good PRs requires time and effort. Reviewing them, on the other hand, is something completely different. Here are some things you should look for when reviewing other people's PRs.</description><link>https://www.danijelavrzan.com/posts/2023/11/review-pull-requests</link><pubDate>Wed, 1 Nov 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Effective pull request reviews</h1><p>Creating PRs is an easy task. Creating <em>good</em> PRs requires time and effort. Reviewing them, on the other hand, is something completely different.</p><blockquote><p>If you're new to PRs (pull requests) or would like to read more on how to create a good pull request, I suggest starting with <a href="https://www.danijelavrzan.com/posts/2023/02/create-pull-request/">5 Tips to creating a (good) pull request</a>.</p></blockquote><p>Code reviews are all about getting a second opinion on your code and a good place to catch any potential issues. They are also a great learning opportunity. Someone might suggest a different approach you might not have thought about before.</p><p>Let's see what are some things you should look for when reviewing other people's code. Or what you can do to make sure the code quality is consistent throughout the codebase. Or even better, try to improve it.</p><h2>Approaching the review</h2><p>There are two sides to any PR; the PR author and the reviewer.</p><p>In this post, we'll take a look at how to approach reviewing the PR. However, it's worth mentioning that both sides are equally responsible on how they approach the review process.</p><p>Written communication often lacks tone and context. Reviewers can use positive language and emojis to make their comments sound friendly. But even that can be misunderstood if you're on the receiving side. Consider the intention behind the words and don't jump to conclusions about the reviewer's attitude.</p><p>Whenever you're reading someone else's comments on your work, never assume bad intentions. Not only during PR reviews, but in general. If someone is being mean on purpose, call them out. A mean person is always mean and that doesn't go unnoticed in the team. But that's a different issue altogether.</p><h2>Your tone and language</h2><p>When approaching the review, consider how you write your comments and suggestions. While the tone of the conversation definitely depends on the person reading the comment, consider how you write the comments as well.</p><p>You might know more about the topic and add some suggestions to improve the code. There could be some silly mistakes that were missed but should still be pointed out. That's all part of the review process.</p><p>PR reviews are not only to point issues and mistakes, try to add some encouraging comments as well if someone has done something exceptionally well. A small encouragement and a nice word go a long way!</p><h2>Put asside time to review assigned PRs</h2><p>This is a good practice to consider. No one likes to wait long time for their PRs to be reviewed just because the reviewers are not paying attention.</p><p>I don't think anyone is fond of doing PR reviews. They are distracting and require the reviewer to completely switch their focus from the work they are doing. But, they are a part of your daily work.</p><p>Set aside some time early in the morning before you start your work. Or right before the end of work before you close your laptop for the day.</p><h2>Use a menu app to keep track of all PRs</h2><p>This one is a time saver! I've learned this from a colleague at work and I'll never go back.</p><p>There's a macOS menu bar app called <a href="https://github.com/swiftbar/SwiftBar">SwiftBar</a> that can run custom shell scripts and add them to your menu. It has a plugin repository that you can search or write your own scripts. There are probably some other apps out there as well, but this one works like a charm.</p><img src="https://www.danijelavrzan.com/images/posts/2023/11/review-pull-requests-01.png "SwiftBar menu app showing 1 PR in the menu and detailed information about it"" alt="SwiftBar menu app showing 1 PR in the menu and detailed information about it"/><p>Get the GitHub repository plugin and adjust it to work for your repositories. When someone assigns a PR to you on the repositories you're watching, it will let you know in the menu bar and show the number of PRs. Once you review a PR, the number will go down. It's really handy!</p><h2>Reviewing the PR</h2><p>Before you start reviewing the PR, make sure the PR is ready to be reviewed. While it's on the PR author to make sure that's the case, sometimes you'll get assigned to a PR that's not quite yet ready to be reviewed. Ask for any missing information and come back to it later.</p><p>Now's the time to start the review process.</p><h3>Grammar mistakes</h3><p>Grammar mistakes can happen to anyone.</p><p>It's okay to comment on grammar mistakes you see in the code. Code should be easily readable and sometimes a missing letter can completely change the meaning of the word. If you spot them, call them out.</p><h3>Naming</h3><p>Naming objects and variables in the code is hard. Really.</p><p>When you're writing code, a name you give to a variable might make sense to you in that specific moment. But the meaning can be completely lost on another person.</p><p>If you're reading someone else's code and the name doesn't make sense to you and you can't infer the meaning from the context, let the author know. It's likely someone else will have the same issue as you. Suggest a different name if you have any other ideas or talk with the author and come to an agreement.</p><h3>Understanding the code</h3><p>Naming conventions and grammar mistakes are a few things you can start with when doing a code review, but you'll also have to understand the logic.</p><p>This is probably the hardest part of the review. The more experienced you are, the easier it will be. If the PR author created a good PR and gave enough information with screenshots or videos, your job will be much easier. A good PR makes a world of difference.</p><p>In any way, you need to understand what you're reviewing. At least, to the best of your knowledge.</p><p>Ask for help. Message the PR author directly and ask them to walk you through the code. It's fast and it will give you the context you could be missing. There's no shame in asking for help.</p><p>This is especially useful for large PRs.</p><h3>Code improvement suggestions</h3><p>If you can spot a line of code that can be improved, suggest it to the author and explain why you think it should be changed. Maybe you've learned something new recently and can suggest a good improvement to the code. Or maybe the new language version came out recently and changed how the code is written.</p><p>Whatever the reason, if you can spot any code improvements, suggest them to the author and always try to add a reason behind it.</p><p>Don't request a code change just because you prefer to do it some other way yourself. If it doesn't add real value, don't be pushy about it.</p><h3>App UI vs design</h3><p>If the PR you're reviewing has a UI component to it, check if the app's UI looks like the design. There should be a link to the design in the PR or the work ticket itself. If it's not, ask the code author to provide the link.</p><p>If you notice something wasn't done correctly, mention it to the author so they know to correct it.</p><h3>Tests and code coverage</h3><p>It's likely you'll have a test coverage report on the PR itself, once the CI has finished running. However, check if tests have been added or updated in the PR. Sometimes, people forget to add tests. Especially if CI passes and code coverage for the PR is satisfied.</p><p>If you notice tests are missing or a specific edge case hasn't been tested, mention it in the review.</p><h2>Final Thoughts</h2><p>Reviewing code is hard. But it's a great learning opportunity. It's also a good place to catch any issues in the code and reduce potential bugs in the code. We all make mistakes.</p><p>PRs are part of our everyday work, whether that's creating them or reviewing them. Just as you would care about writing your code well, give the same effort to reviewing someone else's code.</p><p>It's okay to review and approve the PR with no comments if you haven't noticed anything that can be changed or improved. Give a thumbs up and say "good work".</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">X (Twitter)</a> or <a href="https://iosdev.space/@dvrzan">Mastodon</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/10/combine-swift-charts</guid><title>Combine charts to create stunning designs with Swift Charts</title><description>SwiftCharts framework makes it easy to add charts to your app and display the data to your users in a visually pleasing way. In this article, we'll design a custom chart to display weight tracking data over a period of one week. We'll utilize line chart and area chart to make our graph look more stylish.</description><link>https://www.danijelavrzan.com/posts/2023/10/combine-swift-charts</link><pubDate>Wed, 18 Oct 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Combine charts to create stunning designs with Swift Charts</h1><p><a href="https://developer.apple.com/documentation/charts">Swift Charts</a> is a data visualization framework that can be used with SwiftUI to create powerful customizable charts with minimal code. Use it to present your app's data in a visually pleasing way.</p><blockquote><p>Swift Charts were announced at <strong>WWDC22</strong> and are available to use with <strong>iOS 16.0+</strong>.</p></blockquote><p>There are many different chart types available; including line charts, bar charts, area charts, and scatter plot charts. They are easy to use and offer a wide range of customization options. You can apply different modifiers to override default behavior and add animations.</p><p>Localization and accessibility features are supported as well.</p><p>In this article, we'll design a custom chart to display weight tracking data over a period of one week. We'll utilize <strong>Line Chart</strong> and <strong>Area Chart</strong> to make our graph look more stylish.</p><p>Final chart will look like this:</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-01.png "iPhone showing a screen with a custom chart displaying weight tracking data over a period of a week"" alt="iPhone showing a screen with a custom chart displaying weight tracking data over a period of a week"/><h2>Data Model</h2><p>To create the chart, we need data. We'll use a model that stores the weight and the date the weight was measured. Then we'll add some test data for a period of one week.</p><pre><code><span class="comment">// Data Model</span>
<span class="keyword">struct</span> TestWeight: <span class="type">Identifiable</span> {
    <span class="keyword">var</span> id = <span class="type">UUID</span>()
    <span class="keyword">var</span> weight: <span class="type">Double</span>
    <span class="keyword">var</span> date: <span class="type">Date</span>

    <span class="keyword">init</span>(id: <span class="type">UUID</span> = <span class="type">UUID</span>(), weight: <span class="type">Double</span>, day: <span class="type">Int</span>) {
        <span class="keyword">self</span>.<span class="property">id</span> = id
        <span class="keyword">self</span>.<span class="property">weight</span> = weight
        <span class="keyword">let</span> calendar = <span class="type">Calendar</span>.<span class="property">current</span>
        <span class="keyword">self</span>.<span class="property">date</span> = calendar.<span class="call">date</span>(from: <span class="type">DateComponents</span>(year: <span class="number">2023</span>, month: <span class="number">10</span>, day: day))!
    }
}

<span class="comment">// Test data</span>
<span class="keyword">var</span> weight: [<span class="type">TestWeight</span>] = [
    <span class="type">TestWeight</span>(weight: <span class="number">69.4</span>, day: <span class="number">2</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">69.2</span>, day: <span class="number">3</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">70.0</span>, day: <span class="number">4</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">69.7</span>, day: <span class="number">5</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">69.0</span>, day: <span class="number">6</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">68.8</span>, day: <span class="number">7</span>),
    <span class="type">TestWeight</span>(weight: <span class="number">68.0</span>, day: <span class="number">8</span>)
]
</code></pre><h2>Implement Line Chart</h2><p>Before creating a chart, you need to <code>import Charts</code> at the top of the file.</p><p>We'll start with the basic line chart called <code>LineMark</code>, the one you get out-of-the-box.</p><pre><code><span class="type">Chart</span> {
    <span class="type">ForEach</span>(weight) { data <span class="keyword">in</span>
        <span class="type">LineMark</span>(
            x: .<span class="call">value</span>(<span class="string">"Day"</span>, data.<span class="property">date</span>, unit: .<span class="dotAccess">day</span>),
            y: .<span class="call">value</span>(<span class="string">"Weight"</span>, data.<span class="property">weight</span>)
        )
        .<span class="call">foregroundStyle</span>(<span class="type">Color</span>.<span class="property">pink</span>)
    }
}
.<span class="call">frame</span>(height: <span class="number">150</span>)
</code></pre><p><code>LineMark</code> displays the data in a sequence of connected line segments. It has an <strong>x</strong> and <strong>y</strong> positions. We iterate over the <code>weight</code> data and display the <code>date</code> on the <strong>x-axis</strong> and <code>weight</code> on the <strong>y-axis</strong>.</p><p>You can use the <code>.foregroundStyle()</code> modifier to add a color to your chart. I'm using the system <code>.pink</code>.</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-02.png "Line Chart showing weight data on the y-axis and dates on the x-axis"" alt="Line Chart showing weight data on the y-axis and dates on the x-axis"/><p>The chart looks great considering we just used the basic line chart with no customization. One of the biggest issues at the moment, is the chart looks almost like a straight line.</p><p>That's because our weight data doesn't change in value drastically day by day. That's a good thing as far as the data is concerned! However, it doesn't look very good and you can't really see the change.</p><h2>Override default chart elements</h2><p>We'll customize the chart to scale better for our specific use case.</p><p>There are many different customization options available to create amazing charts. It depends what data you're displaying and how you want to design the chart. We'll go through a few different options.</p><h3>Add a symbol</h3><p>We'll add a circle symbol to mark the days the weight change happened so we can see it more clearly. Add the <code>.symbol()</code> modifier to the <code>LineMark</code> with a circle shape:</p><pre><code>.<span class="call">symbol</span> {
    <span class="type">Circle</span>()
        .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">pink</span>)
        .<span class="call">frame</span>(width: <span class="number">8</span>)
}
</code></pre><p>Your chart will now look like this:</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-03.png "Line Chart showing weight data on the y-axis and dates on the x-axis with a symbol"" alt="Line Chart showing weight data on the y-axis and dates on the x-axis with a symbol"/><p>Much better!</p><h3>Customize the x-axis</h3><p>The bottom of the chart, or x-axis, shows the days in a short date format in incremental values of two, so every other day. I want to show my data for every day of the week. We'll customize the x-axis to display the data how we want to.</p><p>For that, we have the <code>chartXAxis(content:)</code> modifier.</p><p>Let's use it to modify our x-axis. Add the modifier to the <code>Chart()</code> below the frame:</p><pre><code>.<span class="call">chartXAxis</span> {
    <span class="type">AxisMarks</span>(values: .<span class="call">stride</span>(by: .<span class="dotAccess">day</span>)) { <span class="keyword">_ in</span>
        <span class="type">AxisTick</span>()
        <span class="type">AxisGridLine</span>()
        <span class="type">AxisValueLabel</span>(format: .<span class="dotAccess">dateTime</span>.<span class="call">weekday</span>(.<span class="dotAccess">abbreviated</span>), centered: <span class="keyword">true</span>)
    }
}
</code></pre><p><code>AxisMarks</code> defines group of visual marks that a chart draws to indicate the composition of a chart’s axes. It allows us to define properties like the grid line and the value label.</p><p>We changed the label format to show the days of the week in <code>.abbreviated</code> format.</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-04.png "Line Chart showing weight data on the y-axis and days of the week on the x-axis"" alt="Line Chart showing weight data on the y-axis and days of the week on the x-axis"/><h3>Customize the y-axis scale</h3><p>The y-axis scale presents a <em>problem</em> in our case. It's very unlikely someone will have a weight of 0. And even although the weight changes every day, it's not going to change drastically.</p><p>We'll add another modifier to the chart called <code>.chartYScale</code> and add a custom scale that makes more sense for our data.</p><pre><code>.<span class="call">chartYScale</span>(domain: <span class="number">62</span>...<span class="number">70</span>)
</code></pre><p>I'm using hard-coded values from <strong>62 - 70</strong>. If you were implementing this yourself, you'd want to make these values dynamic.</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-05.png "Line Chart showing weight data on the y-axis with custom scale and days of the week on the x-axis"" alt="Line Chart showing weight data on the y-axis with custom scale and days of the week on the x-axis"/><p>The bottom value of <strong>62</strong> correlates to the <strong>weight goal</strong> the user has set for themselves, which we'll set with the value of <strong>63</strong>. The bottom value is the <strong>goal weight - 1</strong>. This is intentional.</p><p>We'll add a rule mark to display the goal weight for the user and move that line by 1 on the chart so there's some space between the goal line and the x-axis.</p><h2>Add a Rule Mark</h2><p>Next, we'll add a rule mark or the weight goal line. We want the user is track their weight and see where they stand compared to their weight goal. We'll use a weight goal of <strong>63</strong>.</p><pre><code><span class="comment">// Line Chart

// Rule mark for the goal weight</span>
<span class="type">RuleMark</span>(y: .<span class="call">value</span>(<span class="string">"Goal Weight"</span>, <span class="number">63</span>))
    .<span class="call">foregroundStyle</span>(<span class="type">Color</span>.<span class="property">secondary</span>)
    .<span class="call">lineStyle</span>(<span class="type">StrokeStyle</span>(lineWidth: <span class="number">0.8</span>, dash: [<span class="number">10</span>]))
    .<span class="call">annotation</span>(alignment: .<span class="dotAccess">topTrailing</span>) {
        <span class="type">Text</span>(<span class="string">"Your Goal:  63 kg"</span>)
            .<span class="call">font</span>(.<span class="dotAccess">subheadline</span>).<span class="call">bold</span>()
            .<span class="call">padding</span>(.<span class="dotAccess">trailing</span>, <span class="number">32</span>)
            .<span class="call">foregroundStyle</span>(<span class="type">Color</span>.<span class="property">secondary</span>)
    }
</code></pre><p>Rule mark adds a line graph to your chart and it can be positioned on the x or y axis. We added a rule mark on the x axis with the value of <strong>63</strong>. I want to add some style to it so I added a custom dashed line style and annotated the graph to display the goal weight data on the graph itself.</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-06.png "Line Chart showing goal weight as a rule mark"" alt="Line Chart showing goal weight as a rule mark"/><p>Now that's starting to look quite nice!</p><h2>Add an Area Chart</h2><p>The graph looks nice, but I want to make it even better. It looks empty so I want to color the area below the graph to give it some <em>life</em>.</p><p>We'll add an area chart and apply some custom styling.</p><p>Add an <code>AreaMark</code> to the chart below the <code>RuleMark</code>:</p><pre><code><span class="comment">// Line Chart

// Rule mark for the goal weight

// Area Chart</span>
<span class="type">ForEach</span>(weight) { data <span class="keyword">in</span>
    <span class="type">AreaMark</span>(
        x: .<span class="call">value</span>(<span class="string">"Day"</span>, data.<span class="property">date</span>, unit: .<span class="dotAccess">day</span>),
        yStart: .<span class="call">value</span>(<span class="string">"WeightLow"</span>, <span class="number">63</span>),
        yEnd: .<span class="call">value</span>(<span class="string">"WeightLow"</span>,  data.<span class="property">weight</span>)
    )
  .<span class="call">foregroundStyle</span>(<span class="type">Color</span>.<span class="property">pink</span>)
}
</code></pre><p><code>AreaMark</code> can be initialized with the same <strong>x</strong> and <strong>y axis</strong> properties. In this case, we used a different initializer with the <strong>x</strong>, <strong>yStart</strong>, and <strong>yEnd</strong> properties. We need this initializer to apply our custom color formatting.</p><p>The <code>x</code> value is the horizontal position on the chart, or where our area chart starts and ends on the x-axis.</p><p><code>yStart</code> value is the bottom vertical constraint for the area chart on the y-axis. It's set to the value of the rule mark, or the goal weight. This is where we want the color to start.</p><p><code>yEnd</code> is the top vertical constraint for the area chart on the y-axis. The values correspond to the same values as the line chart so the charts blend in without overlapping. This is where our color will end.</p><p>It doesn't look good with the solid color, so we need to create a new gradient color for it. I've played around with the opacity values to make it look nice for this one.</p><pre><code><span class="keyword">var</span> gradientColor: <span class="type">LinearGradient</span> {
    <span class="type">LinearGradient</span>(
        gradient: <span class="type">Gradient</span>(
            colors: [
                <span class="type">Color</span>.<span class="property">pink</span>.<span class="call">opacity</span>(<span class="number">0.8</span>),
                <span class="type">Color</span>.<span class="property">pink</span>.<span class="call">opacity</span>(<span class="number">0.01</span>),
            ]
        ),
        startPoint: .<span class="dotAccess">top</span>,
        endPoint: .<span class="dotAccess">bottom</span>
    )
}
</code></pre><p>Now change the foreground style from <code>Color.pink</code> to <code>gradientColor</code>.<br><br>And that's it! We have our custom chart.</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-07.png "Custom line chart with gradient colored area below the chart"" alt="Custom line chart with gradient colored area below the chart"/><h2>Add some information about the chart</h2><p>For the final design, we'll add our chart to a <code>VStack</code> and add some information about the chart.</p><pre><code><span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
        <span class="type">Text</span>(<span class="string">"Weight"</span>)
            .<span class="call">font</span>(.<span class="dotAccess">title3</span>).<span class="call">bold</span>()
        <span class="type">Text</span>(<span class="string">"Last 7 days"</span>)
            .<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)
            .<span class="call">foregroundStyle</span>(.<span class="dotAccess">secondary</span>)
            .<span class="call">padding</span>(.<span class="dotAccess">bottom</span>)
    }
    
    <span class="type">Chart</span>()
}
</code></pre><p>Now it looks much better!</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/combine-swift-charts-08.png "Custom line chart with gradient colored area below the chart and informational text above the chart"" alt="Custom line chart with gradient colored area below the chart and informational text above the chart"/><h2>Final Thoughts</h2><p>SwiftCharts really makes it easy to add charts to your app and display the data to your users in a visually pleasing way. Much better than a list of raw data values.</p><p>Default charts are well designed and can be used without much customization. But if you want to customize any part of the chart, there are many different modifiers available.</p><p>I've had a lot of fun playing with this chart and I hope you will too. If you've played around and created some custom charts yourself, let me know! I'm interested to see your amazing creations.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/10/swift-algorithms-chunked</guid><title>Split your data easily and efficiently with .chunked()</title><description>Swift Algorithms is an open source package of sequence and collection algorithms. It contains many generic algorithms found in other popular programming languages. In this post, we'll take a look at how to implement the .chunked() algorithm to chunk an array of data and display it in your UI.</description><link>https://www.danijelavrzan.com/posts/2023/10/swift-algorithms-chunked</link><pubDate>Wed, 4 Oct 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Split your data easily and efficiently with .chunked()</h1><p><a href="https://github.com/apple/swift-algorithms">Swift Algorithms</a> is an open source package of sequence and collection algorithms. It contains many generic algorithms found in other popular programming languages.</p><p>It was created by Apple engineers to help developers improve the code we write. If you write a lot of lengthy raw loops that can often get difficult to read and understand, it's very likely there is an algorithm in the package you can use instead.</p><p>Swift Algorithms package serves as a playground for algorithms to be tested in the real world. If they are valuable enough and used by a lot of developers, there is a chance they will be moved into the standard library.</p><p>In this post, we'll take a look at how to implement the <code>.chunked()</code> algorithm to <em>chunk</em> an array of data and display it in your UI.</p><p>Swift Algorithms package can be added to your project via Swift Package Manager and imported with <code>import Algorithms</code>.</p><h2>App Example</h2><p>We'll use an example app to implement the algorithm. A travel app showing a list of all the places you've visited or are planning to visit, sorted by date in descending order.</p><h3>Data Model</h3><p>We'll use the following <code>Travel</code> model to display some basic information about the trip, along with the <code>date</code> the trip took place.</p><pre><code><span class="keyword">struct</span> Travel: <span class="type">Identifiable</span>, <span class="type">Hashable</span> {
    <span class="keyword">let</span> id = <span class="type">UUID</span>()
    <span class="keyword">let</span> country: <span class="type">String</span>
    <span class="keyword">let</span> city: <span class="type">String</span>
    <span class="keyword">let</span> date: <span class="type">Date</span>
    <span class="keyword">let</span> image: <span class="type">String</span>
}
</code></pre><p>The struct conforms to <code>Hashable</code> so we can iterate over the elements in <code>ForEach</code> to display the data in the UI.</p><p>Then, we mock the data and create an array of travels.</p><pre><code><span class="keyword">extension</span> <span class="type">Travel</span> {
    <span class="keyword">static let</span> travels: [<span class="type">Travel</span>] = [
        <span class="type">Travel</span>(
            country: <span class="string">"Maldives"</span>,
            city: <span class="string">"Malé"</span>,
            date: .<span class="keyword">init</span>(timeIntervalSince1970: <span class="number">1712432922</span>), <span class="comment">// Apr 6, 2024</span>
            image: <span class="string">"male"</span>
        ),
        ...
    ]
}
</code></pre><h3>List of travels</h3><p>Now all you need is display the information in any way you'd like. In this example, I'm using a simple <code>List</code> that shows all my travels, including an image.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">List</span> {
            <span class="type">ForEach</span>(<span class="type">Travel</span>.<span class="property">travels</span>, id: \.<span class="property">id</span>) { travel <span class="keyword">in</span>
                <span class="type">HStack</span>(alignment: .<span class="dotAccess">top</span>) {
                    <span class="type">Image</span>(travel.<span class="property">image</span>)
                        .<span class="call">resizable</span>()
                        .<span class="call">frame</span>(width: <span class="number">100</span>, height: <span class="number">60</span>)
                        .<span class="call">scaledToFit</span>()
                        .<span class="call">cornerRadius</span>(<span class="number">5</span>)
                    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
                        <span class="type">Text</span>(travel.<span class="property">city</span> + <span class="string">", "</span> + travel.<span class="property">country</span>)
                        <span class="type">Text</span>(travel.<span class="property">date</span>, style: .<span class="dotAccess">date</span>)
                            .<span class="call">padding</span>(.<span class="dotAccess">top</span>, <span class="number">2</span>)
                            .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
                    }
                }
            }
        }
    }
}
</code></pre><p>The app looks like this:</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/swift-algorithms-chunked-01.png "iPhone app with a screen showing a list of travel data"" alt="iPhone app with a screen showing a list of travel data"/><h2>Chunked algorithm</h2><p>Chunked algorithm has a few different variations. You can break your data into equal chunks or define a predicate, depending on the use case.</p><p>If you want to learn more about the algorithm itself, how it works and how it's designed, check the <a href="https://github.com/apple/swift-algorithms/blob/main/Guides/Chunked.md">official documentation</a> to learn more.</p><blockquote><p>It's worth mentioning the algorithm has a complexity of <strong>O(n)</strong> where <strong>n</strong> is the number of elements in the collection. It's very efficient!</p></blockquote><h3>About .chunked(by:)</h3><p>While it's great to see a list of all the travels in my app grouped together, it would be even better to split the list by month.</p><p>This is where <code>.chunked(by:)</code> comes into play. We can define a custom predicate to test consecutive elements in the array and it will create subsequences where the predicate is satisfied.</p><p>It’s important to mention the collection has to be sorted for chunked to work. In the case of my app, travels are already sorted by date in descending order. If your collection of data is not sorted, remember to do that first.</p><h3>Using .chunked(by:)</h3><p>We'll create <code>travelsChunked</code> to store the new collection and chunk the <code>travels</code> array by comparing consecutive dates by their month.</p><pre><code><span class="keyword">static var</span> travelsChunked: [[<span class="type">Travel</span>]] {
    <span class="keyword">let</span> chunked = travels.<span class="call">chunked</span> {
        <span class="type">Calendar</span>.<span class="property">current</span>.<span class="call">isDate</span>($0.<span class="property">date</span>, equalTo: $1.<span class="property">date</span>, toGranularity: .<span class="dotAccess">month</span>)
    }
    <span class="keyword">return</span> chunked.<span class="call">map</span> { <span class="type">Array</span>($0) }
}
</code></pre><p>Chunked algorithm breaks the base collection into subsequences of type <code>ArraySlice</code>. It's what allows the chunked to be fast and efficient. <code>ArraySlice</code> has the same interface as <code>Array</code> and generally same operations can be performed on both.</p><p>However, long-term storage of an <code>ArraySlice</code> is strongly discouraged. It holds a reference to the entire storage of the larger array and can cause memory leaks. We used <code>.map()</code> to transform it into an array instead.</p><p>Visually, it looks like this:</p><pre><code><span class="comment">// Starting array</span>
[<span class="type">January</span> <span class="number">2</span>, <span class="type">January</span> <span class="number">4</span>, <span class="type">January</span> <span class="number">14</span>, <span class="type">May</span> <span class="number">1</span>, <span class="type">September</span> <span class="number">21</span>, <span class="type">April</span> <span class="number">6</span>]

<span class="comment">// After chunked is performed</span>
[ [<span class="type">January</span> <span class="number">2</span>, <span class="type">January</span> <span class="number">4</span>, <span class="type">January</span> <span class="number">14</span>], [<span class="type">May</span> <span class="number">1</span>], [<span class="type">September</span> <span class="number">21</span>], [<span class="type">April</span> <span class="number">6</span>] ]
</code></pre><p>Now we have an array of arrays, grouped by month and we can implement it in our UI.</p><h3>UI Implementation</h3><p>Switch the <code>travels</code> array with <code>travelsChunked</code> and add an additional <code>ForEach</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">List</span> {
            <span class="type">ForEach</span>(<span class="type">Travel</span>.<span class="property">travelsChunked</span>, id: \.<span class="keyword">self</span>) { travels <span class="keyword">in</span>
                <span class="type">Section</span> {
                    <span class="type">ForEach</span>(travels) { travel <span class="keyword">in</span>
                        <span class="type">HStack</span>(alignment: .<span class="dotAccess">top</span>) {
                            <span class="type">Image</span>(travel.<span class="property">image</span>)
                                .<span class="call">resizable</span>()
                                .<span class="call">frame</span>(width: <span class="number">100</span>, height: <span class="number">60</span>)
                                .<span class="call">scaledToFit</span>()
                                .<span class="call">cornerRadius</span>(<span class="number">5</span>)
                            <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
                                <span class="type">Text</span>(travel.<span class="property">city</span> + <span class="string">", "</span> + travel.<span class="property">country</span>)
                                <span class="type">Text</span>(travel.<span class="property">date</span>, style: .<span class="dotAccess">date</span>)
                                    .<span class="call">padding</span>(.<span class="dotAccess">top</span>, <span class="number">2</span>)
                                    .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
                            }
                        }
                    }
                } header: {
                    <span class="type">Text</span>(travels.<span class="property">first</span>!.date.<span class="call">formatted</span>(.<span class="dotAccess">dateTime</span>.<span class="call">month</span>(.<span class="dotAccess">wide</span>)))
                }
            }
        }
    }
}
</code></pre><p>In the first <code>ForEach</code> you get the subsequences of the <code>travelsChunked</code> array and then grab the information for each travel with the second <code>ForEach</code>.</p><p>I've used <code>Section</code> with a <code>header</code> to group travels by month, but there are other UI components you can use as well. The header has a <code>Text</code> label that displays the month of the travel. It takes the month of the first element in the array and displays it in a <strong>wide</strong> format, which is the full month name.</p><p>The final UI looks much better:</p><img src="https://www.danijelavrzan.com/images/posts/2023/10/swift-algorithms-chunked-02.png "iPhone app with a screen showing a list of travel data grouped by month"" alt="iPhone app with a screen showing a list of travel data grouped by month"/><h2>Final Thoughts</h2><p>You've seen how to implement one of many algorithms the Swift Algorithms package has to offer.</p><p>What's great about implementation is how simple chunked is to use and it's only a few lines of code. It would be more complex if you wanted to implement a custom solution. You'd also have to make sure it's efficient and fast, especially when working with large collections of data.</p><p>Check out other algorithms in the package and see if you have any custom implementations in your code you can switch with an algorithm from the package instead.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/06/string-catalog</guid><title>Localize your app with String Catalog</title><description>Localizing your app is a big part of making it more inclusive and available to people in other languages. Apple has made it easier for developers to localize our apps. Starting with Xcode 15 and String Catalogs.</description><link>https://www.danijelavrzan.com/posts/2023/06/string-catalog</link><pubDate>Wed, 14 Jun 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Localize your app with String Catalog</h1><p>Localizing your app is a big part of making it more inclusive and available to people in other languages.</p><p>Previously, if you wanted to localize your app, you had to maintain <code>strings</code> and <code>stringsdict</code> files yourself. It was a lot of manual work that often resulted in missing localized content.</p><p>Apple has made it easier for developers to localize our apps, starting with Xcode 15 and <strong>String Catalogs</strong>.</p><blockquote><p>You can start using String Catalog with Xcode 15 and it's back deployable to any OS, no minimum version required!</p></blockquote><h2>String Catalog</h2><p>String Catalog makes it easy to manage all your strings in one place and make sure your content is fully localized before the app reaches your users.</p><p>We'll localize this small app for ordering books:</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-01.png "iPhone showing Buy Books screen in an app"" alt="iPhone showing Buy Books screen in an app"/><p>Localizing your app is as easy as creating a new file under <strong>File</strong> -&gt; <strong>New</strong> -&gt; <strong>File...</strong> and selecting <strong>String Catalog</strong> under <strong>Resources</strong>. Name your new file and once you click <strong>Create</strong>, that's it!</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-02.png "Xcode screen with an Empty String Catalog warning"" alt="Xcode screen with an Empty String Catalog warning"/><p>Almost.</p><p>String Catalog generates and updates your localizable strings on build time. If you're creating a new catalog, you need to build your project to populate the strings.</p><p>Build the project in Xcode and you'll see all your strings automatically added to the table.</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-03.png "String Catalog in Xcode with populated strings"" alt="String Catalog in Xcode with populated strings"/><h2>Build Settings</h2><p>String Catalog uses a technology in the Swift compiler to extract localizable Swift strings. For this reason, make sure you've enabled the build setting <strong>Use Compiler to Extract Swift Strings</strong> under <strong>Localization</strong>:</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-04.png "Use Compiler to Extract Swift Strings build setting"" alt="Use Compiler to Extract Swift Strings build setting"/><h2>Localizable String</h2><p>Localizable strings are found in source code, interface builder files and even Info plists.</p><p>Take a look at this <code>String</code>:</p><pre><code><span class="type">String</span>(
	localized: <span class="string">"buy.books.title"</span>,
	defaultValue: <span class="string">"Buy Books"</span>,
	table: <span class="string">"Purchases"</span>,
	comment: <span class="string">"Screen title for buying books"</span>
)
</code></pre><p>Localizable strings have four components. The first one is the <code>Key</code>, a unique identifier for your string. It can be equal to the string itself or any other format you like. For example, the key for the title string could be "Buy Books" or "buy.books.title".</p><p>If you have a string with a key as "buy.books.title", you'd want to give it a <code>Value</code> of "Buy Books". Value is optional and if not provided, the default value is your key. You'll see shortly why you'd want to have your key in this format for some of your strings.</p><p>Next, <code>Comment</code> provides a way to give your translators context around a specific string to provide a proper translation. It's not a required field, but it's recommended.</p><p>And finally, you can specify the <code>Table</code> where you want your string stored. You can have multiple tables, depending on your use case. By default, strings from your code get generated in "Localizable" catalog.</p><blockquote><p>String Catalog contains an entire string table in a single <code>.xcstrings</code> file. Your project can have more tables if needed.</p></blockquote><p>Every time you create a string literal in your code, it automatically becomes localizable. Whether you specify it inside a <code>View</code> or create a <code>String</code> variable:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> cancelOrderNew = <span class="type">String</span>(
        localized: <span class="string">"Cancel.order.new"</span>,
        defaultValue: <span class="string">"Cancel"</span>,
        comment: <span class="string">"Cancel button on the new order screen"</span>
    )
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span>(spacing: <span class="number">30</span>) {
            <span class="comment">// `Cancel` button</span>
            <span class="type">Button</span> {
                <span class="comment">// action</span>
            } label: {
                <span class="type">Text</span>(cancelOrderNew)
            }
            <span class="comment">// `Buy` button</span>
            <span class="type">Button</span>(<span class="string">"Buy"</span>) {
                <span class="comment">// action</span>
            }
        }
    }
}
</code></pre><h3>Non-localizable strings</h3><p>If you want to mark your string as non-localizable and exclude it from localization, initialize it with <code>init(verbatim:)</code> initializer instead.</p><pre><code><span class="type">Text</span>(verbatim: <span class="string">"AppName"</span>)
</code></pre><p>This comes useful for strings like your app name that don't need to localization and will always display the same in all languages.</p><p>If string was already added to the String Catalog, it will be automatically removed on build time.</p><h2>Adding other languages</h2><p>To localize your app in another language, click the <strong>+</strong> button at the bottom left of the table and choose a new language. It will add the new language and populate all the strings for you.</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-05.png "String Catalog in Xcode with populated strings in Croatian language"" alt="String Catalog in Xcode with populated strings in Croatian language"/><p>It also shows you the percentage of your localized strings and updates the status to <code>NEW</code>, until all strings have been reviewed.</p><p>There are a few different <strong>STATE</strong> status badges available:</p><ul><li><code>STALE</code> - string is not found in the code anymore.</li><li><code>NEW</code> - a new string you haven't yet translated.</li><li><code>NEEDS REVIEW</code> - string has changed in the code and you might want to take a look to make sure it's still valid.</li><li><code>TRANSLATED</code> - string has been translated in the selected language and no action is needed.</li></ul><h2>Different localization keys for the same string</h2><p>Some languages vary the localized text based on the given context.</p><p>It's likely you'll have to repeat the same string in your app on multiple screens. One of the common examples is a <strong>Cancel</strong> button. In English, the Cancel button is always the same string, but in some other languages, like Croatian, it can have different strings based on the surrounding context.</p><p>This is where you'd want to define a different key for the string with a default value.</p><pre><code><span class="keyword">var</span> cancelOrderInProgress = <span class="type">String</span>(
    localized: <span class="string">"Cancel.order.in.progress"</span>,
    defaultValue: <span class="string">"Cancel"</span>,
    comment: <span class="string">"Cancel button on the orders in progress screen"</span>
)
<span class="keyword">var</span> cancelOrderNew = <span class="type">String</span>(
    localized: <span class="string">"Cancel.order.new"</span>,
    defaultValue: <span class="string">"Cancel"</span>,
    comment: <span class="string">"Cancel button on the new order screen"</span>
)
</code></pre><blockquote><p>Keys have to be unique inside a table.</p></blockquote><p>Make sure to add a comment here so your translator knows the surrounding context. It's a good idea to always add comments, not only for your translators, but for yourself as well.</p><h2>Word variations</h2><p>String Catalog comes with a built-in feature for localizing different word variations.</p><h3>Vary by Device</h3><p>Some strings have different variations depending on the device your app is being used.</p><pre><code><span class="type">Link</span>(
    destination: <span class="type">URL</span>(string: <span class="string">"https://www.url.com"</span>)!,
    label: {
        <span class="type">Text</span>(<span class="string">"Tap to learn more!"</span>)
    }
)
</code></pre><p>"Tap to learn more!" works well for an iPhone or an Apple Watch, but users can't tap on their Macs. In the String Catalog, you can <strong>right-click</strong> on a table row and add a <strong>Vary by Device</strong>. This will add a new entry where you can specify a different string for a Mac, or any other Apple device on the list.</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-06.png "String Catalog in Xcode with vary by device option"" alt="String Catalog in Xcode with vary by device option"/><h3>Vary by Plural</h3><p>It's never been easier to localize plural words too. <strong>Right-click</strong> the table row and add <strong>Vary by Plural</strong>.</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-07.png "String Catalog in Xcode vary by plural option"" alt="String Catalog in Xcode with vary by plural option"/><p>In English language, every plural word is the same - "books". However, Croatian is not that simple. There are different variants in the plural. For a few books, or 2, 3 and 4, the plural word is different. For 5 - 10 books the word is the same as for a single book.</p><p>It's confusing, let me show you.</p><img src="https://www.danijelavrzan.com/images/posts/2023/06/string-catalog-08.png "String Catalog in Xcode vary by plural option"" alt="String Catalog in Xcode with vary by plural option"/><p>Apple made sure to add all the different variants for different languages. It's awesome how easy it is to localize your app now!</p><h2>Custom Views</h2><p>If you're creating custom views in your app and passing strings to other views, your strings need to be of type <code>LocalizedStringResource</code>, instead of <code>String</code>, if you want them localized.</p><pre><code><span class="keyword">struct</span> CustomView: <span class="type">View</span> {
    <span class="keyword">var</span> title: <span class="type">LocalizedStringResource</span>
    <span class="keyword">var</span> subtitle: <span class="type">LocalizedStringResource</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(title)
            <span class="type">Text</span>(subtitle)
        }
    }
}
</code></pre><h2>Migrating to String Catalog</h2><p>String Catalog can coexist with your current localizable strings. Once you're ready to migrate to the new format, <strong>right-click</strong> the <code>.strings</code> file and choose <strong>Migrate to String Catalog</strong>.</p><p>You'll see a new window with all your <code>.strings</code> and <code>.stringsdict</code> files where you can select ones that you want to migrate. Click <strong>Migrate</strong> and you're all done!</p><h2>Final Thoughts</h2><p>You still need translators to translate all your strings, but String Catalog makes it easier than ever to localize your apps. Your code is the source of truth for all your strings and you don't have to manage them manually anymore.</p><p>If you want to learn more, watch the <a href="https://developer.apple.com/videos/play/wwdc2023/10155/">Discover String Catalogs</a> session from WWDC23.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/05/one-year-of-writing</guid><title>Looking back: One year of writing about Swift</title><description>Writing has helped me learn technical topics in greater detail. There's nothing like thinking you know something until you try to explain it to someone. It's been one year since I've published my first blog post and I'd like to share some of my thoughts and experiences.</description><link>https://www.danijelavrzan.com/posts/2023/05/one-year-of-writing</link><pubDate>Wed, 31 May 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Looking back: One year of writing about Swift</h1><p>It's hard to believe it's been one year and 22 published posts since I started writing on my personal website. It was May 17th, 2022 when I hit that <strong>Publish</strong> button for the first time. I remember reading the post a few times, and making sure there were no grammar mistakes and the code examples worked.</p><p>After the first post, next ones were easier to publish. You start with so many thoughts of things that could go wrong, and what if it's not good enough.</p><p>I've been writing articles for <a href="https://www.kodeco.com/u/dvrzan">kodeco.com</a> for even longer time. But, there's a team of folks who read your article and make sure what you wrote is correct and up to certain standards. Writing on your own is being on your own and doing everything yourself. It's different.</p><p>Here are some of my thoughts and experiences after one year of writing.</p><h2>Building a Website</h2><p>I got inspired to start writing my own blog posts after meeting <a href="https://twitter.com/twannl">Antoine</a> and <a href="https://twitter.com/DonnyWals">Donny</a> at SwiftLeeds 2021.</p><p>After some thought, I bought a domain and decided to build a website.</p><p>The biggest decision was to choose how and where to create a website. I tried using WordPress but I didn't like it. So I went with <a href="https://github.com/JohnSundell/Publish">Publish</a>. It's a static site generator that allows you to build your website in Xcode using Swift.</p><blockquote><p>If you're interested in creating your own website with Publish, I wrote a post on <a href="https://www.danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">How to Create a Personal Website in Swift using Publish</a> that can help you get started. Once you're up and running, check other <a href="https://www.danijelavrzan.com/tags/publish/">Publish</a> posts as well to help you style and deploy your new website.</p></blockquote><p>It was a rough start. Publish wasn't easy to figure out and it took me 4 months to get my website up and running. But, I've had a lot of fun with it. I designed the entire website myself and I've enjoyed the process.</p><h3>Thoughts on using Publish after one year</h3><p>I decided to go with a static site generator but have since been thinking to go back on using WordPress.</p><p>Tinkering with Publish was a lot of fun, but it takes a lot of my time. Nowadays I find my time better used for other things.</p><p>I'd rather have the website running, without having to think much about it, and spend time writing instead. Availability of different plugins is another plus for WordPress. You can also add or even create your own Publish plugins. These plugins are usually for some simple features that would come built in with WordPress. Also, if they are not updated on time it can get tricky.</p><p>There are a lot of static site generators out there and some might be easier to navigate than others. Choose whatever works for you, but don't spend too much time thinking about it. You can always switch later.</p><h2>Writing posts</h2><p>I love writing. I've been writing short stories and poems ever since I was 10.</p><p>Technical writing is different, but there's always a story that you're trying to tell.</p><h3>Topic ideas</h3><p>At first, I thought there's nothing I could write about and there were posts about every topic written by someone else.</p><p>While building my website with Publish I had to figure out a lot of things on my own. I found there's not a lot of documentation that covers Publish, so I decided to write a few posts to help other developers like me.</p><p>If you ever find yourself working on something and realize there's no documentation out there that helped you out, write about it. But, also, if you do find some documentation out there and realize it's not written well or you can't understand the concept well enough, write about it.</p><p>I'm sure you've searched how to develop something and it took you reading a few different posts to finally understand that topic. That's why you should write about it even if 10 different websites already covered it. Your writing will have a different perspective. Even if they have the same title, no two posts are the same.</p><p>Write about something you've figured out how to do at work or a topic you want to learn more about. I found writing posts helps me understand concepts better and I learn a lot in the process. Write about anything you want, really.</p><h3>Writing process</h3><p>Everyone has a different writing process that they like. I write my posts in markdown using <a href="https://obsidian.md">Obsidian</a>. It's simple and I don't have to do much styling during writing.</p><p>I write my posts on Monday evening and publish them Tuesday morning. I do it every other week because I find it to be a lot of work and I want to stay sane.</p><p>I start by duplicating one of my older posts, update the metadata at the top, delete all content, and start writing.</p><p>When writing a technical article, I always create a sample Xcode project or a playground to make sure everything works as expected. I do that while I'm writing.</p><p>It takes me on average about 3 hours to write a post. After I finish writing, I run my website locally to make sure the styling looks good and there are no grammar mistakes. Then I run the whole post through <a href="https://hemingwayapp.com">Hemingway</a>. After that I close my laptop.</p><p>I open my post again in the morning and read it once again to make sure everything I wrote last night makes sense. Sometimes I change a few things and sometimes not. If everything looks good I create a post image on <a href="https://www.canva.com">Canva</a> and publish the post.</p><p>I still publish manually because I've been too lazy to look up how to do it automatically. Something I really have to do.</p><h3>Non-technical posts</h3><p>I love reading posts about experiences. Things someone has learned, how they accomplished things, and their thoughts. I always learn a lot. I sometimes write a non-technical post, like this one, to share my experience as well.</p><p>It's those things you'd learn from someone over a cup of coffee while chatting in person.</p><p>One thing to note, I've found writing non-technical posts to take much longer than writing a technical one. I always end up re-writing sentences and deleting whole sections because I don't like how they sound.</p><h2>Thoughts after one year of writing</h2><p>I've since overcome the fear of pressing the <strong>Publish</strong> button.</p><p>My posts got featured in a few newsletters and that has made me both happy and proud. It gave me confidence I've been doing something right. I've received great feedback and comments from folks on how my posts helped them.</p><p>I write all my posts on my personal time. I don't have any running costs to cover and I don't earn anything from writing either.</p><p>Why did I start writing? I wanted to leave my comfort zone and put myself out there. I wanted to have something to show for. But also, I wanted to become a better developer and give back to the community.</p><p>I write for myself. Writing has helped me learn some topics in greater detail. There's nothing like thinking you know something until you try to explain it to someone.</p><p>It's like that quote from Einstein,</p><p><em>“If you can’t explain it simply, you don’t understand it well enough.”</em></p><p>I always strive for simplicity in my posts. I try to make them short and on point. But I also like to tell a story so you might notice most of my posts start with a topic introduction that may or may not be necessary. But it's my style of writing and I like to do it.</p><p>Writing also helps me improve my communication skills. It helps me structure my thoughts and learn how to express them so that everyone around me can understand what I'm saying. I found that to be a great skill in my career.</p><p>I decided to publish a new post every two weeks. I sometimes feel tired and don't publish it for a month. The most important thing is to take care of yourself and that's my first priority.</p><p>In the end, I publish my posts for myself. It's my online repository of knowledge that helps me learn and improve a few skills along the way. If it helps anyone else out there, than that's an extra bonus on top.</p><h2>Final Thoughts</h2><p>If you're interested in writing, I encourage you to try it out.</p><p>Writing does take time, so keep that in mind. Especially if you're starting out. It might take you a few days to write a post and that's completely understandable. It does get much easier over time.</p><p>If writing is not your thing, then try doing videos instead?</p><p>You know how I said I publish on Tuesdays and non-technical posts take me longer? Well, I had to finish writing this one on Tuesday evening so I can publish it on Wednesday morning. I know I'm not super consistent with that yet, but I'm trying.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/05/deep-dish-swift-2023</guid><title>DeepDishSwift 2023: That's a Wrap</title><description>Conferences are an awesome opportunity to network and meet other developers. They always inspire me and remind me why I take a lot of time out of my day to share my learnings and be the part of the community.</description><link>https://www.danijelavrzan.com/posts/2023/05/deep-dish-swift-2023</link><pubDate>Tue, 9 May 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>DeepDishSwift 2023: That's a Wrap</h1><p>It all started with a tweet on August 31st, 2022 by <a href="https://twitter.com/joshdholtz">Josh Holtz</a>...</p><img src="https://www.danijelavrzan.com/images/posts/2023/05/deep-dish-swift-2023-01.png "Josh Holtz tweeting about starting a conference"" alt="Josh Holtz tweeting about starting a conference"/><p>At a time, there were no Swift conferences in North America. <a href="https://360idev.com">360iDev</a> had their final run in 2022 when they announced they would sunset the conference. North America had no conferences in sight.</p><p>In the meantime, Europe's conference list was growing larger by month. There were new conferences announced and the old ones picked up and re-launched again. We were finally ready to start conferencing in-person after a long time.</p><p>While some conferences kept running by going online, some decided to pause.</p><p>I've had an opportunity to participate and speak at a few online conferences and while I've really enjoyed attending, the experience just wasn't the same. While I do acknowledge the accessibility of online conferences, there is no substitution to meeting people in-person. We are, after all, social beings.</p><blockquote><p>Organizing a conference is not an easy task. Something we, attendees, sometimes take for granted. We buy tickets, attend, and enjoy all the fruit of hard work someone put in for us. So acknowledge all conference organizers and all the work they put into the conference! A simple <em>thank you</em> means a lot.</p></blockquote><h2>The Conference</h2><p>After the initial tweet about <em>not starting a conference</em>, it took Josh only <strong>58 days</strong> to announce <a href="https://deepdishswift.com">DeepDishSwift</a>. I mean, no one doubted him. What Josh says, he accomplishes.</p><img src="https://www.danijelavrzan.com/images/posts/2023/05/deep-dish-swift-2023-02.png "Josh Holtz tweeting about DeepDishSwift"" alt="Josh Holtz tweeting about DeepDishSwift"/><p>The interest in this new <em>supreme</em> conference in Chicago was great. People were lining up and the excitement was real.</p><p>Josh initially thought he'd sell about 150 tickets, and was really hoping for some good sales. Little did he know he'd sell <strong>322 tickets</strong>. He completely sold out the tickets a few weeks before the conference and people were still lining up on a waitlist. Talking about the interest!</p><h2>The Podcast</h2><p><a href="https://twitter.com/malinsundberg">Malin</a> and <a href="https://twitter.com/airkai">Kai</a> had an idea of starting a podcast and interview all the speakers prior to the conference. The idea was to get to know the speakers and learn more about their background. What do the speakers do, how do they prepare for their talks, and what are they going to talk about.</p><p>It was a great idea, one that Malin and Kai have put to reality just as everything they do! The conference podcast called <a href="https://podcasts.apple.com/ca/podcast/slices-the-deep-dish-swift-podcast/id1670026071">Slices: The Deep Dish Swift Podcast</a> was a big success and gained a lot of popularity.</p><p>One of the questions they asked all speakers was <strong>Two Truths and a Lie</strong>. Speakers had to come up with three interesting things about them, two were true and one was a lie. The idea was to create a conversation starter questions and learn interesting things about speakers.</p><p>One of the attendees, <a href="https://twitter.com/mortengregersen">Morten</a>, thought of a really cool app idea and created an iOS app called <a href="https://apps.apple.com/us/app/deepdishlie/id6448354703">DeepDishLie</a>. The app was available for everyone on the first day of the conference. It was such a cool idea for anyone interested in collecting all the lies.</p><img src="https://www.danijelavrzan.com/images/posts/2023/05/deep-dish-swift-2023-03.png "DeepDishLie app screenshot of the speaker initial list on the left and all lies guessed on the right"" alt="DeepDishLie app screenshot of the speaker initial list on the left and all lies guessed on the right"/><h2>The Indie Dev Track - Day One</h2><p>The first day of the conference was on Sunday. It was half a day of talks about indie development. Quite an interesting idea. And it did not surprise me to see it announced considering the connection Josh has with the indie dev community.</p><blockquote><p>Josh runs a website and a newsletter called <a href="https://indiedevmonday.com">Indie Dev Monday</a> that highlights indie developers in the community and the apps they've launched.</p></blockquote><p>I've found the indie dev track quite interesting and very insightful. Indie developers sharing their success stories and paths they took before going full indie. They shared how they started, what worked, and also what didn't.</p><p>I've gained a deeper appreciation towards indie developers knowing it's not easy to leave a stable, full time job, and jump on a unknown aventure that may or may not go well. But they pushed through good and bad, and are all happy with where they are. So inspiring!</p><p>After the conference, we've had a speakers dinner at Giordanni's. It was the first time I've had the deep dish pizza. The taste was good, but I wouldn't call it a pizza. More like a cheese pie!</p><p>I love speaker dinners because we all get to catch up and hang out together. Most of the time at conferences we hang out with attendees.</p><h2>The Main Track - Day Two</h2><p>On Monday, the conference was in full swing! It was the first day of the main track of talks, six of them, with a closing <a href="https://launchedfm.com">Launched</a> live podcast with <a href="https://twitter.com/_chuckyc">Charlie</a> and <a href="https://twitter.com/jeiting">Jacob</a>.</p><p>In the early morning, during breakfast, the hallway was full with people. New friendships were being formed and old friends catching up. Everyone was up and about. It was a nice sight to see.</p><blockquote><p>We've been missing conferences for a long time in North America and even although the WWDC22 was in-person, it's not the same. What makes conferences different is that everyone pretty much knows where everyone else is. Most people stay in the same hotel or nearby and it's much easier to schedule dinner plans and hang out.</p></blockquote><p>After breakfast, we started the main track with an opening keynote from <a href="https://twitter.com/steipete">Peter Steinberg</a>, the founder of <strong>PSPDFKit</strong>. It was an inspiring talk about his life and his work. It's always interesting to hear the paths others took in their life and where it led them. I found the story inspiring. Thank you Peter for sharing it with us, it's not easy to open yourself up in front of such a large group of people.</p><p>After the opening keynote, we started the main track of talks.</p><p>I'm not going to talk about every talk individually. If you're interested in that, I've created a <a href="https://twitter.com/dvrzan/status/1652732720278036482?s=20">thread on Twitter</a> where you can see all the speakers and their talks.</p><blockquote><p>The talks were not recorded. You had to be there!</p></blockquote><p>Also, <a href="https://twitter.com/danielsaidi">Daniel Saidi</a> wrote short summaries of every talk for <a href="https://danielsaidi.com/blog/2023/04/30/deep-dish-swift-day-1">Day 1</a>, <a href="https://danielsaidi.com/blog/2023/05/01/deep-dish-swift-day-2">Day 2</a>, and <a href="https://danielsaidi.com/blog/2023/05/02/deep-dish-swift-day-3">Day 3</a> if you're interested in reading more about the talks.</p><p>At the end of the day, <a href="https://www.womenwhocode.com">WomenWhoCode</a> organized a dinner. It was a small and safe surrounding for women attending and speaking at a conference to get together and get to know each other. I've met awesome ladies there!</p><h2>The Main Track - Day Three</h2><p>On Tuesday, it was another main track day. It was the final day.</p><p>There were less people during breakfast, everyone still sleeping from the last night's out. But also, even although everyone had a lot of fun, we were starting to get tired. Three days of presentations, focus, people, talking, and going around, is a lot for anyone.</p><p>I'm an introvert. Hanging around with people tires me. When I got back home from the conference, it took me entire week to recover.</p><p>People were still hanging around between every talk; exchanging contacts, stickers, and pins. There were a lot of goodbyes. The day went by quite fast.</p><p>Final talk of the day was the closing keynote by <a href="https://twitter.com/twostraws">Paul Hudson</a> titled <strong>Forward, Together</strong>. It was a talk about community, about caring, and about moving forward, together. Paul cares a great deal about our community and making sure everyone has a say and everyone can participate, equally.</p><p>It was an insightful talk on diversity and inclusion. What I take from the talk is, <em>be nice to everyone</em>.</p><h2>The Community</h2><p>Conferences are an awesome opportunity to network and meet people. I've met so many people at DeepDishSwift, I lost track. There were 300+ people in the room and I still haven't talked to everyone.</p><p>I got to meet a lot of people I've only known through social media, like Twitter. Some of them I've known since I started learning iOS Development and I finally got to meet them in person. That was an awesome experience.</p><p>The people in this community is what makes conferences awesome. Not swag, not speakers, and not pizza. The community.</p><img src="https://www.danijelavrzan.com/images/posts/2023/05/deep-dish-swift-2023-04.png "A collage of images from DeepDishSwift 2023"" alt="A collage of images from DeepDishSwift 2023"/><h2>Final Thoughts</h2><p>I love conferences. I enjoy meeting people from around the world, listen to their stories, and how they got to where they are now. I learn a lot from talking to people and it makes me look at certain things from a different perspective.</p><p>After meeting people at a conference, where everyone does a lot of things, it can be overwhelming. Developers publishing apps, writing blogs and books, mentoring bootcamps, and a lot of other things.</p><p>After I get home, I have a lot of inspiration from everyone, but it can also feel like you're not doing enough or nothing at all. Know that it's fine not to publish apps every other month and to not have written a book or a blog. Don't compare yourself to others and do your own thing. Maybe you're mentoring someone or teaching programming at a school? That's amazing!</p><p>In case you're interested into speaking at a conference, I suggest reading my post on <a href="https://www.danijelavrzan.com/posts/2022/05/why-speak-at-conferences/">Why speak at conferences and how to apply</a>. Feel free to reach out if that interests you and I'd be happy to help!</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and thank you to Josh, Kari, and Suzannah for the amazing first year of DeepDishSwift!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/04/login-xcode-breakpoint</guid><title>Skip typing your login credentials manually with Xcode breakpoints</title><description>Typing your login credentials manually during development takes away your time and focus. If you make a lot of small changes and need to check them often, that's a lot of time spent on the login screen. Set up a breakpoint in Xcode instead and speed up your development time.</description><link>https://www.danijelavrzan.com/posts/2023/04/login-xcode-breakpoint</link><pubDate>Wed, 19 Apr 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Skip typing your login credentials manually with Xcode breakpoints</h1><p>You're working on your app and you want to see if your changes look good. You run your app on the Simulator and you're presented with a login screen. You type in your testing credentials and navigate to the screen you want to see. It doesn't look quite good. Repeat the process.</p><p>You have to enter your login credentials every time you run your app to get past the login screen. That can get annoying very quickly.</p><p>In some cases, you can implement logic to skip the login screen entirely during development. But sometimes, you need to log in.</p><h2>Xcode breakpoints</h2><p>Xcode breakpoints are an awesome tool we have at our disposal for all things debugging. But, they can also help us speed our development process.</p><p>With Xcode breakpoints you can set up your login credentials during development so you don't have to type them manually every time you run your app.</p><h2>Sample login code in SwiftUI</h2><p>I'm using a sample login screen with two <code>TextFields</code> presented as a full screen modal. When the app launches with an <code>initiateLogin()</code> it dismisses the modal screen if text fields contain correct credentials.</p><p>Here's the code in case you'd like to try it out for yourself.</p><p><strong>LoginView.swift</strong></p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> LoginView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> username: <span class="type">String</span> = <span class="string">""</span>
    <span class="keyword">@State private var</span> password: <span class="type">String</span> = <span class="string">""</span>
    <span class="keyword">@Environment</span>(\.<span class="property">dismiss</span>) <span class="keyword">var</span> dismiss

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span>(alignment: .<span class="dotAccess">center</span>, spacing: <span class="number">20</span>) {
            <span class="type">HStack</span> {
                <span class="type">Image</span>(systemName: <span class="string">"person"</span>)
                <span class="type">TextField</span>(<span class="string">"Enter username"</span>, text: <span class="property">$username</span>)
            }
            <span class="type">HStack</span> {
                <span class="type">Image</span>(systemName: <span class="string">"key"</span>)
                <span class="type">TextField</span>(<span class="string">"Enter password"</span>, text: <span class="property">$password</span>)
            }
            <span class="type">Button</span>(<span class="string">"LOG IN"</span>) {
                <span class="comment">// BREAKPOINT HERE</span>
                <span class="call">initiateLogin</span>()
            }
            .<span class="call">buttonStyle</span>(.<span class="dotAccess">borderedProminent</span>)
        }
        .<span class="call">padding</span>()
        .<span class="call">textFieldStyle</span>(.<span class="dotAccess">roundedBorder</span>)
    }

    <span class="comment">// Login Function</span>
    <span class="keyword">func</span> initiateLogin() {
        <span class="keyword">if</span> username == <span class="string">"Danijela"</span> &amp;&amp; password == <span class="string">"123456!"</span> {
            <span class="comment">// Short pause - dismiss is too fast</span>
            <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">asyncAfter</span>(deadline: .<span class="call">now</span>() + <span class="number">1.0</span>) {
                <span class="call">dismiss</span>()
            }
        }
    }
}
</code></pre><p><strong>ContentView.swift</strong></p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> isPresented = <span class="keyword">true

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"Hello! You've successfully logged in."</span>)
        }
        .<span class="call">onAppear</span> {
            isPresented = <span class="keyword">true</span>
        }
        .<span class="call">fullScreenCover</span>(isPresented: <span class="property">$isPresented</span>) {
            <span class="type">LoginView</span>()
        }
    }
}
</code></pre><h2>Create a breakpoint</h2><p>Create a breakpoint on the login button's action. When you tap the login button you'll be automatically logged in without having to type the credentials manually.</p><p>Right-click on the breakpoint and click <strong>Edit Breakpoint...</strong></p><p>You can give the breakpoint a name if you'd like. Under <strong>Action</strong> click <strong>Add Action</strong> and this will add a new <strong>Debugger Command</strong> field. Click on <strong>+</strong> to add another action.</p><p>These two actions will populate the text field with correct credentials.</p><p>In the first action, add <code>expr _username.wrappedValue = "[USERNAME]"</code>. In the second one, add <code>expr _password.wrappedValue = "[PASSWORD]"</code>. Change the username and password strings to match your login credentials.</p><p>Because both <code>username</code> and <code>password</code> are <code>@State</code> properties, you need to directly access their values using <a href="https://developer.apple.com/documentation/swiftui/state/wrappedvalue">wrappedValue</a> to pass the data to the text fields.</p><p>Make sure to check the <strong>Automatically continue after evaluating actions</strong> so your app continues executing after the breakpoint. You don't want to pause the execution of your app here.</p><img src="https://www.danijelavrzan.com/images/posts/2023/04/login-xcode-breakpoint-01.png "Xcode edit breakpoint window"" alt="Xcode edit breakpoint window"/><p>That's it! Now run the app, tap the login button and your login credentials will populate automatically.</p><img src="https://www.danijelavrzan.com/images/posts/2023/04/login-xcode-breakpoint-02.gif "Login button populates credentials automatically"" alt="Login button populates credentials automatically"/><p>It's likely you'll use the same credentials when working on something in your app, so this saves you a lot of typing time. If you need to use different credentials and you know you'll have to type them in multiple times, just change their values in the breakpoint.</p><h2>Breakpoint expressions in UIKit</h2><p>If you have a UIKit app with <code>UITextField</code>, your breakpoint looks a bit different. Instead of using the <code>wrappedValue</code> you need to use the <code>.text</code> value of the text field.</p><img src="https://www.danijelavrzan.com/images/posts/2023/04/login-xcode-breakpoint-03.png "Xcode edit breakpoint window"" alt="Xcode edit breakpoint window"/><h2>Log in automatically without tapping the button</h2><p>Another option is to login automatically without tapping the login button.</p><p>You want the login to trigger when the view appears so you don't have to tap any buttons. The login will complete and you'll be automatically logged in. Create a breakpoint in the <code>viewWillAppear()</code> for UIKit app or <code>.onAppear()</code> for SwiftUI app of your login view.</p><p>Next, add the third <strong>Debugger Command</strong> field to your breakpoint with <code>expr initiateLogin()</code>, changing the method call to your method's name.</p><p>Open your app and when the login screen appears, it will populate the text fields and trigger the login method. You'll log in without typing anything. That's it.</p><h2>Final Thoughts</h2><p>I like to reduce doing things manually as much as I can. It helps speed up my development time and I have less things to think about.</p><p>I've learned this cool tip recently and wished I knew about it sooner! All those times I had to type in the credentials manually...</p><p>Hope you like this cool tip that will help you save some time! Do you have any tips like this you use in your everyday work? I'd love to hear about it!</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/04/start-new-job</guid><title>10 Things to do when starting a new job</title><description>Interviews are hard. But when you get the job, you've done the hard part. You already made a good first impression so just continue being yourself and you'll do great. Read these 10 pragmatic tips to help you get started with a bang.</description><link>https://www.danijelavrzan.com/posts/2023/04/start-new-job</link><pubDate>Tue, 4 Apr 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>10 Things to do when starting a new job</h1><p>Starting a new job can be both stressful and exciting at the same time. But remember, you already did the hard part, you got the job.</p><p>Our bodies are interesting machines. As with anything new and unknown, starting a new job comes with a lot of uncertainty. You have no idea what awaits you on the other side, so your body goes into a survival mode and you feel stressed out.</p><p>But worry not, they hired you for a reason. You already have the knowledge and skills. And you already left a good first impression or you wouldn't be there.</p><p>To help you get started with a bang, let me share a few pragmatic tips you should do when you start a new job.</p><h2>1. Your workflow</h2><p>In your first week, you'll go through onboarding. You might watch some videos and you'll set up your dev environment.</p><p>Most people stop here.</p><p>I suggest setting up your laptop the way you'd set up your personal one. Make your workflow the way you'd like it to be. You don't have to settle for less.</p><p>Ask around on what the policy is for installing other apps on your machine. Most companies don't mind you installing third party apps. I love to use <a href="https://www.alfredapp.com">Alfred</a> so that's the first app I install on every laptop. I am so used to it that I feel lost without it.</p><p>Then I install a note-taking app, like <a href="https://obsidian.md">Obsidian</a>, and <a href="https://www.macbartender.com">Bartender</a> for the menu bar. I immediately become more productive and both my work and my personal laptop use the same workflows.</p><h2>2. Inbox Zero</h2><p>Yes, inbox zero. And I mean it.</p><p>Every morning when I start my work I go through all the emails I've received. And every day before I leave work, I do the same. I've been doing this every day since I started my first job. I highly recommend it.</p><p>Organize your emails with folders. When you read an email, if you need to keep it for reference, move it to a folder. If you don't need it, delete it. Sometimes you're discussing something important or you need to remind yourself, keep the email there, or pin it at the top until you don't need it anymore. Then repeat the step before.</p><p>There are always going to be some emails, I like to call <strong>spam</strong>, that you'll receive because someone put you on a list and you don't need to read it. Create a filter in your email client and make it automatically go away. One email less to read. Do this for any other recurring email you don't need to read.</p><p>Create filters for GitHub and Jira emails as well and let them automatically move to a separate folder.</p><h2>3. Write it down</h2><p>I'm one of those people who like to keep everything in their head. Do not recommend. I rarely forget anything, but it's years of practice. Although I don't keep notes for my personal life, I do put events in my calendar.</p><p>When it comes to work, there's too much happening every day, I have to keep notes.</p><p>I organize my note taking app very deliberately. I have folders for all recurring meetings and notes for every meeting. One-on-one with a manager? There's a folder for that and a note for every meeting organized by date.</p><p>Keep notes of everything, people, flows, links, anything you think is important and anything you think is not important, because you'll need it at some point.</p><h2>4. Your Calendar</h2><p>Keep your calendar up-to-date. Always. Your colleagues will appreciate it.</p><p>Schedule lunches or any other appointments if you're away from your desk. Add events in your calendar when you're on vacation and remember to mark them as "Away".</p><p>Own your calendar.</p><h2>5. Promotions and raises</h2><p>Learn all about the company process on how promotions and raises work. And write it down if it's not already documented somewhere.</p><p>How does the feedback loop go? Who decides who gets a promotion or a raise? Learn all about it!</p><p>What is it you have to do in your role to get a promotion or a raise, which leads us to the next point...</p><h2>6. Define success</h2><p>Learn the rules to the game so you can play it properly.</p><p>Set up recurring one-on-one meetings with your manager, if they don't schedule it first. Every week or every two weeks to start with.</p><p>Define success. Ask your manager what they think you should do to get that promotion or a raise, and ultimately be successful in your role. Set clear expectations. Write it down.</p><h2>7. Ask for feedback</h2><p>More often that not, people won't give you unsolicited feedback. So ask for it.</p><p>However, it's not that easy. We're not all comfortable sharing or receiving feedback. Especially when it's something we don't want to hear or say. Giving feedback is hard. Receiving even harder.</p><p>To make this as comfortable as it can get, set a good rapport with your team and other people in your organization.</p><p>This doesn't only go for asking if you're doing good or not. It goes for asking about your code or documentation you wrote, as well. Ask other developers in your team to take a look at your code and provide feedback. Is there anything you could've done better? Sure, they will see your PRs. But do it before a PR.</p><h2>8. Meet the team</h2><p>Meet your team and everyone else.</p><p>This goes for whether you work remotely or not. It's much harder to meet people when you're working remotely, so you have to be deliberate about it. Schedule coffee chats with people in your team and then branch out to other people in your organization.</p><p>I don't know who said it or where I've read it, but it goes something like this: <em>"There's a correlation between how much work you get done and how many people you know."</em></p><p>And there's something to it. Knowing whom you could reach out and ask for help means a great deal.</p><h2>9. Be There. Be Valuable.</h2><p>Providing value means giving feedback or an opinion when the time calls for it. Take part in team meetings, like daily standups and retrospectives. Don't be the person who's physically on the call but doing something else in the background.</p><p>Also, don't be the person only repeating what others have said to provide value. This will get noticed and you're not doing yourself a favor.</p><h2>10. Be kind to yourself</h2><p>I highly recommend watching this talk from Jeremy on <a href="https://www.youtube.com/watch?app=desktop&v=CybrQoPioJY">Flying Solo</a> from Do iOS 2022 in Amsterdam. Jeremy sums up the <strong>imposter syndrome</strong> in a few words:</p><p><em>"Imposter Syndrome is a desease that doesn't exist." - Jeremy B.</em></p><p>Remember when you started learning programming and you had no idea what a <strong>variable</strong> is? Or how to write a <strong>function</strong>? When I started learning programming for the first time I had a really hard time understanding that <strong>"="</strong> is not read <strong>equal</strong>. <code>var num = 3</code> doesn't read <strong>num is equal to 3</strong>. It took me weeks to grasp that logic. Felt like I was just starting to learn how to read. And I kinda was.</p><p>Stop, take a look back, and remember everything you've learned so far. After a year at my first job I thought to myself I haven't learned anything. But then I remembered everything I did learn, instead of looking at what I didn't.</p><p>No one knows everything and we've all been there. Your colleagues with 10 years of experience, they have all been there.</p><p>Be kind to yourself. Understand that you don't know everything and you never will. When you embrace that fact, you'll allow yourself to grow and learn. And don't forget to acknowledge the progress you make along the way.</p><h2>Final Thoughts</h2><p>Should you start doing these things in your first week, your first 30 days, 90 days? It doesn't matter. It's never too early or too late.</p><p>This is in no way a final list of things you should do. There are many others, but I wrote down those I thought important.</p><p>What really matters in the end is to keep progressing and show you care. Be humble and open minded. You've never done this exact work in this exact setting, so adapt yourself.</p><p>Now have fun and enjoy the ride!</p><hr><p>What do you do when you start a new job? Do you have any interesting tips? Let me know, I'm interested to learn more about your thoughts!</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/03/in-app-safari-view</guid><title>Display in-app web content with SFSafariViewController in SwiftUI</title><description>In SwiftUI, you can use Link to let the user open a website in their default web browser. But sometimes you want them to stay in your app; to read privacy policy or similar. In that case, you have different options to present web content without the user ever leaving your app.</description><link>https://www.danijelavrzan.com/posts/2023/03/in-app-safari-view</link><pubDate>Tue, 21 Mar 2023 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Display in-app web content with SFSafariViewController in SwiftUI</h1><p>You can use <code>Link</code> to let users open a website in their web browser, outside of your app. But sometimes you want to present web content and don't want the users to leave your app.</p><p>To implement this feature, we have two available APIs: <a href="https://developer.apple.com/documentation/webkit/wkwebview">WKWebView</a> and <a href="https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller">SFSafariViewController</a>. Which one you choose, depends on the experience you want to provide.</p><p><code>WKWebView</code> is part of the <strong>WebKit</strong> framework. It allows you to embed web content into your app. You can embed entire views or parts of your UI. Use it when you need to incorporate web content into your app alongside your app's native views. It's flexible and highly customizable. If you have to assign a custom user agent, then this API is for you.</p><p><code>SFSafariViewController</code> is part of the <strong>SafariServices</strong> framework. It allows you to present a website from within your app. Users will never leave your app and they get the same experience as if they were using Safari, including password auto-fill and all security Safari provides. Use it when you need to display websites you don't own or present parts of web content that's out of scope of your app.</p><blockquote><p>Always make sure the view controller is visibly present and never track users without their consent or you'll be in violation with the <a href="https://developer.apple.com/app-store/review/guidelines/">App Store Review Guidelines</a>.</p></blockquote><p>In this article, you'll learn how to use the latter.</p><h2>Wrap the View Controller</h2><p><code>SFSafariViewController</code>, as the name suggests, is a <strong>UIKit</strong> component. To use it in your SwiftUI app, you need to create a view that represents a UIKit view controller by implementing the <code>UIViewControllerRepresentable</code> protocol.</p><p>First, import <strong>SwiftUI</strong> and <strong>SafariServices</strong> frameworks. Create the <strong>SafariViewWrapper</strong> and conform to the <code>UIViewControllerRepresentable</code> protocol. Implement the required methods:</p><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> SafariServices

<span class="keyword">struct</span> SafariViewWrapper: <span class="type">UIViewControllerRepresentable</span> {
    <span class="keyword">let</span> url: <span class="type">URL</span>

    <span class="keyword">func</span> makeUIViewController(
        context: <span class="type">UIViewControllerRepresentableContext</span>&lt;<span class="type">Self</span>&gt;
    ) -&gt; <span class="type">SFSafariViewController</span> {
        <span class="keyword">return</span> <span class="type">SFSafariViewController</span>(url: url)
    }

    <span class="keyword">func</span> updateUIViewController(
        <span class="keyword">_</span> uiViewController: <span class="type">SFSafariViewController</span>,
        context: <span class="type">UIViewControllerRepresentableContext</span>&lt;<span class="type">SFSafariViewWrapper</span>&gt;
    ) {}
}
</code></pre><p>Since you're only presenting a website, in the <code>makeUIViewController(context:)</code> method you return the <code>SFSafariViewController(url:)</code> and pass the <strong>url</strong> as an argument.</p><p><code>updateUIViewController(_ :context:)</code> is required for protocol conformance, but we don't need to do any updates so we can leave it empty. You're only presenting a website, in this case.</p><h2>SafariView</h2><p>You can call the <code>SafariViewWrapper</code> directly, but I like to create a reusable View component because it's likely I'll need to use it multiple times.</p><p>Create a <strong>SafariView</strong> with <code>showSafari</code> state property and pass in the <code>title</code> and <code>url</code>:</p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> SafariView: <span class="type">View</span> {
    <span class="keyword">@Binding var</span> showSafari: <span class="type">Bool</span>
    <span class="keyword">var</span> title: <span class="type">String</span>
    <span class="keyword">var</span> url: <span class="type">String</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span>(title) {
            showSafari = <span class="keyword">true</span>
        }
        .<span class="call">popover</span>(isPresented: <span class="property">$showSafari</span>) {
            <span class="type">SafariViewWrapper</span>(url: <span class="type">URL</span>(string: url)!)
        }
    }
}
</code></pre><p>You create a <strong>Button</strong> with a title that updates the presentation state of the popover when the user taps on it. You can also present the website as a full screen cover, but in this example, I'm using a modal popover.</p><p>Finally, you can implement it in any View:</p><pre><code><span class="type">SafariView</span>(
    showSafari: <span class="property">$showSafari</span>,
    title: <span class="string">"My Website"</span>,
    url: <span class="string">"https://www.danijelavrzan.com"</span>
)
</code></pre><p>Add the <code>@State private var showSafari = false</code> at the beginning of your view to pass in the state to the child view to present the popover. Give the link an appropriate title and a url.</p><p>When you tap the link, you'll see the website inside your app.</p><img src="https://www.danijelavrzan.com/images/posts/2023/03/in-app-safari-view-01.png "In-app website popover presented using the SFSafariViewController"" alt="In-app website popover presented using the SFSafariViewController"/><h2>Final Thoughts</h2><p>At the time of writing, there's no SwiftUI way of presenting an in-app web view so we have to resort to using UIKit APIs. But using them interchangeably is not a big task. They pair nicely with each other.</p><p>You can wrap any UIKit controller into a SwiftUI view and vice versa.</p><p>If you're interested in learning more how you can use both SwiftUI and UIKit to build responsive UIs, this talk from <a href="https://twitter.com/b3ll">Adam Bell</a> at iOS Conf SG 2023 is a good watch: <a href="https://www.youtube.com/watch?v=Vbpr9xp7XKk">Building Responsive Interactions</a>.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/02/card-view-swiftui</guid><title>SwiftUI Design: Create a card view</title><description>Card-like designs are seen often in UIs. Usually, a view with a white background, rounded corners, and a dark shadow that makes the view look like a card on top of another view. It gives a nice look to different view components and separates parts of UI.</description><link>https://www.danijelavrzan.com/posts/2023/02/card-view-swiftui</link><pubDate>Wed, 22 Feb 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>SwiftUI Design: Create a card view</h1><p>Card-like designs are seen often in UIs. Usually, some view with a white background, rounded corners, and a dark shadow that makes the view look like a card on top of another view. Not too complicated to implement, but gives a nice look to different view components and separates parts of UI.</p><p>Let's see how to create it.</p><h2>Card view</h2><p>Any view can be created as a card view. It only depends how you want to design your UI. Let's create a home page for a macronutrient tracking app. It has a title as a greeting, current day of the week, some information on user's activity and a breakdown of macronutrients.</p><img src="https://www.danijelavrzan.com/images/posts/2023/02/card-view-swiftui-01.png "Simulator screenshot of a home page for a macronutrient tracking app"" alt="Simulator screenshot of a home page for a macronutrient tracking app"/><p>It's a simple, flat UI, and it looks good.</p><p>This is where the card view comes into place. While the UI of the view is not that bad at all, we can make it much better. By modifying some UI components into card views, we'll separate different pieces of information for the user. This will make UI more readable and user can glance at different information more quickly.</p><p>We'll create a reusable view modifier that will transform any UI component into a card.</p><h2>Custom view modifier</h2><p>Just as SwiftUI already gives us some default view modifiers, like <code>font()</code> and <code>padding()</code>, we can also create our own, custom modifiers. <a href="https://developer.apple.com/documentation/swiftui/reducing-view-modifier-maintenance">Bundling view modifiers into a custom modifier</a> lets you declutter your view code and avoids the overheard of maintaining your UI. Changing a font in a single place is much easier than going over 100s of files.</p><p>We'll create a custom <strong>CardBackground</strong> view modifier so it can be reused whenever we need it. You can create separate files for every modifier, but I like to keep them all in a single file. Or, at least, group them by type.</p><pre><code><span class="keyword">import</span> SwiftUI

<span class="comment">// view modifier</span>
<span class="keyword">struct</span> CardBackground: <span class="type">ViewModifier</span> {
    <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
        content
            .<span class="call">background</span>(<span class="type">Color</span>(<span class="string">"CardBackground"</span>))
            .<span class="call">cornerRadius</span>(<span class="number">20</span>)
            .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">black</span>.<span class="call">opacity</span>(<span class="number">0.2</span>), radius: <span class="number">4</span>)
    }
}
</code></pre><p>Here, we create a custom <code>CardBackground</code> view modifier and apply three modifiers: <code>.background()</code>, <code>.cornerRadius</code>, and <code>.shadow(color:radius:)</code>. By applying these modifiers, we can make any UI component into a card view.</p><p>I'll keep the same values for <code>corner</code>, <code>color</code> and <code>radius</code> throughout, but you can pass these values with the modifier as well if you want to change them for different views.</p><p>You're able to use the new view modifier by calling it with <code>.modifier(CardBackground())</code>. However, it doesn't look great on the call site so we'll write an extension on the view. Your modifier will look like any other modifier you've used.</p><pre><code><span class="comment">// view extension for better modifier access</span>
<span class="keyword">extension</span> <span class="type">View</span> {
    <span class="keyword">func</span> cardBackground() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
        <span class="call">modifier</span>(<span class="type">CardBackground</span>())
    }
}
</code></pre><p>With the code above, you can now apply your modifier to any view with <code>.cardBackground()</code>.</p><p>I'll apply it on the user's activity view and the macronutrient view.</p><img src="https://www.danijelavrzan.com/images/posts/2023/02/card-view-swiftui-02.png "Simulator screenshot of a home page for a macronutrient tracking app with parts of UI created as cards"" alt="Simulator screenshot of a home page for a macronutrient tracking app with parts of UI created as cards"/><p>Look at that! Much better.</p><p>Light mode looks great. But what about dark mode?</p><h2>Dark mode support</h2><p>To support dark mode in a card view, we need to take a look at the colors we use. We use colors in two places; one in the background of the card view and another in the shadow.<br><br>You might have noticed I've used a background color of <strong>Color("CardBackground")</strong> in the <code>.background()</code> modifier above.</p><p>For light mode, that's <strong>white</strong>. But white doesn't work for dark mode.</p><p>What about <strong>black</strong> color? If we use the same color for the card view as the color of the parent view's background, we lose our card view:</p><img src="https://www.danijelavrzan.com/images/posts/2023/02/card-view-swiftui-03.png "Simulator screenshot of a home page for a macronutrient tracking app in dark mode"" alt="Simulator screenshot of a home page for a macronutrient tracking app in dark mode"/><p>In this case, you just have to make sure you use a different color. Or a different shade of black, like a <strong>dark gray</strong>. I'm using the default <strong>primary</strong> color for the view's background, so I'll use a lighter version for the card view background.<br><br>Create a new custom color in your <strong>Assets</strong> file called <strong>CardBackground</strong> or any other name you'd like. I'm using <strong>white</strong> for <strong>Any Appearance</strong> and <strong>Lead</strong> from <strong>Pencils</strong> section for <strong>Dark</strong>, or <strong>#212121</strong> hex color.</p><p>Dark mode now looks like this:</p><img src="https://www.danijelavrzan.com/images/posts/2023/02/card-view-swiftui-04.png "Simulator screenshot of a home page for a macronutrient tracking app with parts of UI created as cards in dark mode"" alt="Simulator screenshot of a home page for a macronutrient tracking app with parts of UI created as cards in dark mode"/><p>Wow, look at that. Quite nice. But wait, where's the shadow?</p><p>The color of the shadow matches the color of the parent view, or in this case, <strong>black</strong>. This means that shadow is <em>neutralized</em> in the dark mode. We don't need a shadow in the dark mode and a white shadow will not look good at all.</p><p>Your UI still looks great without a shadow in the dark mode and it's completely fine to have different designs for different appearances.</p><h2>Final Thoughts</h2><p>I like to use this type of card view in my designs.</p><p>It makes your UI look great and it doesn't require a lot of effort. It's easy to implement and looks much better than a flat design.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/02/create-pull-request</guid><title>5 Tips to creating a (good) pull request</title><description>Creating an reviewing pull requests (PRs) is an everyday part of our work. Why don't make it easier and more enjoyable for others reviewing your work? Your colleagues will thank you for it! Learn here how you can improve your pull requests in 5 tips.</description><link>https://www.danijelavrzan.com/posts/2023/02/create-pull-request</link><pubDate>Tue, 7 Feb 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>5 Tips to creating a (good) pull request</h1><p>You've finally got all your unit tests to pass and you're satisfied with the work you've done on your ticket. The UI is pixel-perfect and even your designer says you've done a great job with the assets they gave you. You've tested the UI and it works without any issues. You feel very proud.</p><p>You're ready to show off your work to your colleagues. You create a PR and patiently await their comments and approval. Days go by and no approvals yet. Not a single comment.</p><p>Maybe your PR is too big and no one's had time to review it yet. Or it's missing important parts and no one was able to understand it, so they glanced and postponed reviewing it.</p><blockquote><p>If you don't know what a pull request or a PR is, I suggest you read more <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">About pull requests</a> in GitHub Docs.</p></blockquote><h2>1. Keep it short</h2><p>Reviewing other people's PRs is already hard enough without having to go through hundreds, possibly thousands of lines of code. Try to make your PRs as short and on point as possible.</p><p>Most likely your PR will be tied to the ticket you're working on and will only require you to do the work as part of that ticket. Don't go around fixing other code and potentially making your PR large and out of scope of your current work. Not only does it make your PR bigger, it makes it harder to read because there's no story to the work you've done.</p><p>Treat your PR as a short story. It has just enough information to read it in a single sitting without getting bored halfway through.</p><h2>2. Add more information</h2><p>Depending how the process is set up in your company or your team, you might already have a default template set up when creating new PRs. They are very useful and can help a great deal in explaining the background of the work you've done. Remember, not everyone may know what your PR is about, so add some background to the story.</p><h3>What and Why</h3><p>Introduce the characters and give the summary of what and why.</p><p>What is the ticket about and why do we need it? No one is going to search for your ticket and read the requirements to learn what you're trying to do.</p><p>How did you implement the requirements? Add all the necessary information a person may need before they take a look at your code. Write the reason behind the work and explain any technical decisions you made. You want the person reading your PR to understand why you did what you did. I've seen too many reviewer comments asking a developer to change their approach when something was done for a specific reason.</p><p>But, don't get into too much detail and be specific. Add only relevant information. Think about what you'd want to see when you're reviewing someone else's PR.</p><h3>Screenshots or gifs of before and after</h3><p>Add images where appropriate. Everyone loves images. If you're working on something that adds a new or changes an existing UI component, add a screenshot or a gif in the description. No one knows how something looks like by reading the code. You might think you've copied the design assets perfectly when you might have chose an incorrect shade of blue or forgot to round the corners.</p><p>If you're fixing an issue, add an image of <strong>before</strong> and <strong>after</strong> so others know what you've changed. If you're creating a new component add a <strong>design asset</strong> vs <strong>your working implementation</strong>.</p><blockquote><p>TIP: You can add images in a table with two columns. One for <em>before</em> and one for <em>after</em> or any other use case. It's neat to see them side by side.</p></blockquote><h3>Link other relevant PRs</h3><p>Does your PR require code change in another repository? If you had to make more than one PR for the work you've done, link them all in the description. It's much easier and faster to click on the link that leads to all other relevant PRs that hunting them down.</p><h2>3. Leave in-line code comments</h2><p>This is something I like to do.</p><p>If I've implemented or wrote something in a specific way for a reason but it wouldn't make sense for a person reading my code, I'll leave a comment on that line of code in the PR. Maybe I've talked to a designer or a technical architect and we've agreed on an approach. You have to remember that people who haven't worked with you on a specific problem don't have any outside context.</p><p>It will especially help those "<em>you could've used this, instead of this</em>" comments.</p><h2>4. Assign people or groups as reviewers</h2><p>Don't leave your PRs out there in the wild and hope someone will see them. Remember to assign them to relevant people, or groups if you have that set up. You'll get a review much sooner.</p><h2>5. Let your colleagues know your PR is ready for review</h2><p>Apart from assigning reviewers, write a line in your team's chat letting everyone know there's a PR ready for their review. You could create a channel for this purpose only. It's likely someone will see the chat notification sooner than an e-mail one.</p><h2>Final Thoughts</h2><p>Be mindfull of the time your colleagues have to spend reviewing your PRs. Be a good colleague and show them you care about the time they put into reviewing your code and make their job easier. They will thank you for it.</p><p>One more thing. Never take comments on your code too personal and don't be passive aggressive when reviewing other people's PRs. Remember - no one knows everything.</p><p><em>"It's nice to be important, but it's more important to be nice."</em></p><hr><p>Do you have any other tips on writing a good pull request? Let me know, I'd be interested to learn more about your thoughts!</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy reviewing!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2023/01/completion-handler-async-function</guid><title>How to use async/await with completion handlers</title><description>When the new Swift concurrency model was announced at WWDC 2021 we all wanted to jump on that wagon. However, rewriting your entire codebase might not be the best solution. Instead, you have the option to slowly start adapting the new model by bridging the old code with the new.</description><link>https://www.danijelavrzan.com/posts/2023/01/completion-handler-async-function</link><pubDate>Tue, 24 Jan 2023 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>How to use async/await with completion handlers</h1><p>We've all been there. WWDC announces a shiny new API that would make all your problems go away, but your app supports an older version of iOS and you have to wait for a few years to implement it. <em>(Sigh)</em></p><p>Swift's new concurrency model was announced at WWDC 2021 along with iOS 15. A few months later, starting with Xcode 13.2, it became backwards compatible up to iOS 13. This meant you could use the new concurrency model even if you had to support older versions of operating system.</p><p>However, as with anything else, it wasn't that simple.</p><h2>Completion handlers</h2><p>It's likely your codebase has at least one completion handler. Rewriting entire codebase or even just your networking layer to use async/await might not be a trivial task.</p><p>Consider the following code:</p><pre><code><span class="keyword">func</span> getJokes(completion: <span class="keyword">@escaping</span> ([<span class="type">Joke</span>]) -&gt; <span class="type">Void</span>) {
  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://official-joke-api.appspot.com/jokes/ten"</span>)!

  <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: url) { data, response, error <span class="keyword">in
    guard let</span> data = data <span class="keyword">else</span> {
      <span class="call">completion</span>([])
      <span class="keyword">return</span>
    }
    <span class="keyword">if let</span> jokes = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">Joke</span>].<span class="keyword">self</span>, from: data) {
      <span class="call">completion</span>(jokes)
      <span class="keyword">return</span>
    }
  }
  .<span class="call">resume</span>()
}
</code></pre><p>It's fetching 10 jokes from a Joke API using the <code>dataTask(with:)</code>, decoding them into an array, and returning with a completion handler. Your standard networking code.</p><p>Completion handlers are not <em>async</em>, at least not in the new concurrency model way. You can't use them in the async/await context as-is. But there's a way to integrate them into the new model using <strong>continuations</strong>.</p><h2>Continuations</h2><p>Continuations are structs with a specific generic type that allow us to bridge completion handlers with the new async/await code. This allows us to continue using our old code without having to completely rewrite it and still benefit from the new concurrency model. This way you can slowly adapt your codebase to use async/await.</p><p>To use continuation with the above function you'll write a new async function <code>getJokes()</code> that calls the old function and returns a value:</p><pre><code><span class="keyword">func</span> getJokes() <span class="keyword">async</span> -&gt; [<span class="type">Joke</span>] {
  <span class="keyword">await</span> <span class="call">withCheckedContinuation</span> { continuation <span class="keyword">in</span>
    <span class="call">getJokes</span> { jokes <span class="keyword">in</span>
      continuation.<span class="call">resume</span>(returning: jokes)
    }
  }
}
</code></pre><p>Continuation is created by calling the <code>withCheckedContinuation()</code> function which suspends the current task and then passes the continuation to the closure as a captured value. Continuation is resumed by calling the <code>resume(returning:)</code> method.</p><blockquote><p>It's very important to keep in mind you must call a resume method <strong>exactly once on every execution path</strong>. If you call it more than once, your program will crash. If you forget to call it at all, you'll get a big warning in the console because you're leaving your task unsuspended. This means your resources are being retained indefinitely and could cause data leaks.</p></blockquote><p>Finally, you can now call the new function with <code>await</code>:</p><pre><code><span class="keyword">let</span> jokes = <span class="keyword">await</span> <span class="call">getJokes</span>()
</code></pre><p>With continuations, you're not completely rewriting your existing code, but rather incorporating the new async/await model to get all the benefits of it. This way, you can slowly start moving towards the new concurrency model.</p><h2>Checked/unchecked and throwing continuations</h2><p>There are a few different ways to implement continuations in your code:</p><ul><li><code>withCheckedContinuation()</code>, which we implemented above</li><li><code>withCheckedThrowingContinuation()</code></li><li><code>withUnsafeContinuation()</code></li><li><code>withUnsafeThrowingContinuation()</code></li></ul><p>We've already mentioned you must resume your continuation <strong>exactly once</strong> on every execution path. <strong>CheckedContinuation</strong> performs runtime checks for you and makes sure there are no missing, or multiple, resume operations. It will log a message in the console if these are violated.</p><p><strong>UnsafeContinuation</strong>, on the other hand, doesn't enforce these rules during runtime so make sure you're using it only if you have to and if it causes a runtime performance problem.</p><p><strong>CheckedThrowingContinuation</strong> and <strong>UnsafeThrowingContinuation</strong> let you create continuations that can throw errors.</p><p>There are also a few different ways to resume the task:</p><ul><li><code>resume(returning:)</code>, resumes the tasks normally from suspension</li><li><code>resume(throwing:)</code>, resumes the task by throwing an error</li><li><code>resume(with:)</code>, resumes the task either normally or throws an error based on the given <code>Result</code> value</li></ul><p>All of these are used depending on the type of continuation you're using and the return value.</p><h2>Final Thoughts</h2><p>Implementing continuations means we don't have to wait years to be able to incorporate the new concurrency model in our code. We can bridge our existing code and get all the benefits of the new async/await model. This means you can also start adopting it in your codebase without having to completely rewrite the old code.</p><p><a href="https://twitter.com/clattner_llvm">Chris Lattner's</a> <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782#file-taskconcurrencymanifesto-md">Swift Concurrency Manifest</a> is an interesting read if you'd like to learn more about the design and the background story on Swift's new concurrency model.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/12/year-wrap</guid><title>2022: Year in Review</title><description>Have you ever looked back a certain period of time; a week, a month, a year, and thought you haven't done anything? I have. We all have. Sometimes I think I haven't learned anything, looking at what's left to learn. Sometimes I think I haven't done anything looking at what's left undone.</description><link>https://www.danijelavrzan.com/posts/2022/12/year-wrap</link><pubDate>Tue, 27 Dec 2022 07:00:00 -0500</pubDate><content:encoded><![CDATA[<h1>2022: Year in Review</h1><p>Have you ever looked back a certain period of time; a week, a month, a year, and thought you haven't done anything? I have. We all have. Sometimes I think I haven't learned anything, looking at what's left to learn. Sometimes I think I haven't done anything looking at what's left undone.</p><p>We look at things we wanted to accomplish but didn't have time or space. Yet we often forget things we did accomplish as if they don't count at all.</p><p>Small achievements matter. Consistency matters. Not doing something matters as well.</p><h2>New website</h2><p>I decided it was time to build a new, more polished, website. The old version was not the best, but it server well when I didn't have any professional experience. Now that I was working as an iOS Developer for over a year, I needed something different.</p><img src="https://www.danijelavrzan.com/images/posts/2022/12/year-wrap1.png "Old version of my website in CSS and HTML on the left and the new version in Swift using Publish on the right."" alt="Old version of my website in CSS and HTML on the left and the new version in Swift using Publish on the right."/><p>I chose <a href="https://github.com/JohnSundell/Publish">Publish</a> and spent four months learning how to build a website in Swift. It was a steep, but fun, learning curve. I've enjoyed tinkering with it. Polishing the website with CSS took the longest. Adding padding, choosing fonts and colors took whole month of April. I had to stop and set a publish date. It'll never be perfect. And that was not the point.</p><p>~ <em>Perfection is the enemy of done.</em></p><h2>Writing</h2><p>I published my first blog post in May. After deploying my website, it took a while to get started writing. My first post took me three weeks. I had to sort a lot of styling issues and add missing components on the website. But I finally did it.</p><p>After that, I continued publishing new posts every two weeks. I write on Monday and publish on Tuesday. I didn't want to take on too much work. Publishing on a weekly schedule was a bit too much, so I chose what works for me.</p><p>Today I'm writing my 15th blog post. The last one for the year.</p><p>It takes time to write, but I love writing. I used to write love poems and short stories when I was 10. I've been writing ever since.</p><h2>Speaking</h2><p>I met <a href="https://twitter.com/Adam9Rush">Adam</a> during <a href="https://www.kodeco.com/10418006-introducing-rw-community-care">Kodeco's Community Care</a> event in 2020. He was running one of the events and I participated in all of them.</p><p>When he invited me to speak at <a href="https://swiftleeds.co.uk">SwiftLeeds</a> 2021, a conference he organized in Leeds, UK, I asked him if he was serious. I thought he wanted to invite someone else and invited me by mistake. I didn't think I had anything of value to share.</p><p>We agreed I'd speak about my career journey and how I left my 10 years of Civil Engineering to become an iOS Developer.</p><p>I was scared and excited at the same time. This was an opportunity for me to try public speaking. I never spoke at a conference before and I never would've imagined I'd be preparing for my sixth talk.</p><h2>Mentoring</h2><p>In June this year, kodeco decided to run another <a href="https://store.kodeco.com/bootcamp">bootcamp</a>. After giving it some thought, I decided to mentor a group of students. I became one of the four mentors and had 12 students.</p><p>We spent two months polishing curriculum content, creating homework assignments and materials before bootcamp even started. It ran for 14 weeks. I led breakout rooms for my group of students, graded their homework, and tried my best to teach them coding practices and how to be good developers.</p><p>It was a lot of work. I tried to give them as much of my time as I could, but it wasn't easy navigating a full time job and mentoring a cohort of students. But it was a rewarding experience. I only hope I was able to give them good foundation they can build on.</p><p>I feel like a proud parent hearing their success stories and cheering them to succeed. I learned a great deal about mentoring, giving feedback, and how to look at concepts from different perspective to be able to explain it in a way someone else can understand.</p><h2>Learning to say no</h2><p>It's not easy to say no, but saying no opens doors to other opportunities. It also keeps you sane. Take as much work as you can handle, don't overwork yourself.</p><p>It's important to say no. Don't feel bad about it. Prioritize.</p><p>I've been juggling just enough work not to feel overwhelmed. Or at least I thought so. I felt overwhelmed on a few occcassions when work overlapped. I wished I didn't took as much work as I did. I wished I said no.</p><p>When the right opportunity presents itself, sometimes, you have to sacrifice things. It can't always be easy. But it doesn't have to be hard either. Learn to manage your time and listen to yourself.</p><p>I had to say no to a few conferences and events. I couldn't manage writing a new article every week. I had to postpone a few other endeavours as well. You can only do as much with your time. Always make sure you can handle everything you do say yes to.</p><p>~ <em>It's better to do a few things well, than a lot of things poorly.</em></p><h2>New Year 2023</h2><p>Speaking at conferences takes a lot of time. People only see and hear the talk, but preparation starts a few months before that. There's a lot of research, reading, making notes, creating slides, and rehearsing the talk. If you don't reuse the topic, you have to do this for every talk you give. It's a lot of work.</p><p>For next year, I plan to slow down with conferences. I'll see you at <a href="https://iosconf.sg">iOSConfSG</a> in January and <a href="https://deepdishswift.com">Deep Dish Swift</a> in May. For now.</p><p>I plan to continue writing for kodeco and on my personal blog every two weeks. I learn great deal by writing and it makes me a better developer.</p><p>One thing I'd love to do next year is publish my first iOS app. I started working on it in August this year, but had to put it on hold for other things. I didn't want to overwork myself and no one would benefit from it. Not me, not my loved ones.</p><p>I have an idea for my app all broken down in detail and I wrote down what I want from an MVP. I even wrote the mission statement.</p><p>All that's left to do is get to work! I'm hoping this will keep me accountable.</p><h2>Final Thoughts</h2><p>It's nice to look back at the year and see things you've accomplished. A year is a long time and we tend to forget everything we've done. Sit down and think what you did because you did a great deal. You've probably learned new things, worked with new APIs or did something else you should be proud of. Any small thing matters. It doesn't have to be life altering.</p><p>Cheered on a colleague who did something great? Volunteered to do something at work that you weren't comfortable with, but did it anyway? Managed to solve a complex problem? You've done a lot. You're amazing.</p><p>Don't forget, we all have different life situations and take different paths. Don't look at what others are doing. Look at what you did and celebrate even smallest achievements.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading. Merry Christmas and a Happy New Year! Hope you're taking some time to recharge and spend them with your loved ones.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/12/reusable-button</guid><title>How to create a reusable button in SwiftUI</title><description>Oftentimes, when developing your apps, you create a specific button style with different labels and actions to keep your UI consistent across different screens. You'll learn how to create a button view you can reuse across your app instead of having to create a new one every time.</description><link>https://www.danijelavrzan.com/posts/2022/12/reusable-button</link><pubDate>Tue, 13 Dec 2022 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>How to create a reusable button in SwiftUI</h1><p>We use buttons to interact with apps on our phones. They are an essential component of every app. They are everywhere.</p><p>Oftentimes, when developing your apps, you create a specific button style with different labels and actions to keep your UI consistent across different screens. For that reason, you create custom view modifiers. It keeps your code DRY (Don't Repeat Yourself) and if you need to make a change, there's only one place to do so.</p><p>But even then, you still have to create a new button view every time to accommodate different labels and actions. This is where you might want to create a reusable button.</p><h2>ButtonView</h2><p>First, you create a new <strong>ButtonView</strong>:</p><pre><code><span class="keyword">struct</span> ButtonView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span> {
            <span class="comment">// Add action</span>
        } label: {
            <span class="comment">// Add label</span>
        }
    }
}
</code></pre><p>It's as simple as that. You can name it as you'd like.</p><h2>Label and icon</h2><p>Next, you need to define a label for the button. Depending on your use case, you might need to add an icon as well. It could be a system image or a custom asset in your Bundle.</p><p>Let's add both:</p><pre><code><span class="keyword">struct</span> ButtonView: <span class="type">View</span> {
    <span class="keyword">let</span> label: <span class="type">String</span>
    <span class="keyword">let</span> icon: <span class="type">String</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span> {
            <span class="comment">// Add action</span>
        } label: {
            <span class="type">Image</span>(systemName: icon)
            <span class="type">Text</span>(label)
        }
    }
}
</code></pre><p>Structs don't need initializers. They get them by default. However, we're creating a reusable button. While we might need a label for our button, the icon image is completely optional. Not every button will have one.</p><h2>Custom initializer for default parameters</h2><p>Let's make the icon optional and create a custom initalizer for the button:</p><pre><code><span class="keyword">struct</span> ButtonView: <span class="type">View</span> {
    <span class="keyword">let</span> label: <span class="type">String</span>
    <span class="keyword">let</span> icon: <span class="type">String</span>?
    
    <span class="keyword">init</span>(label: <span class="type">String</span>, icon: <span class="type">String</span>? = <span class="keyword">nil</span>) {
        <span class="keyword">self</span>.<span class="property">label</span> = label
        <span class="keyword">self</span>.<span class="property">icon</span> = icon
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span> {
            <span class="comment">// Add action</span>
        } label: {
            <span class="keyword">if let</span> icon {
                <span class="type">Image</span>(systemName: icon)
            }
            <span class="type">Text</span>(label)
        }
    }
}
</code></pre><p>Assign the icon a default value of <code>nil</code>. You'll only change this value if the button requires both text and icon. If there's no icon, only text will show. Since icon is an <strong>optional</strong>, we need to unwrap it with an <code>if let</code>.</p><p>Now, what about an action?</p><h2>Actions</h2><p>To keep our button truly reusable, we need to be able to pass any functionality to the button's action. We're going to do that by creating a <strong>trailing closure</strong> with no parameters and no return value:</p><pre><code><span class="keyword">struct</span> ButtonView: <span class="type">View</span> {
    <span class="keyword">let</span> label: <span class="type">String</span>
    <span class="keyword">let</span> icon: <span class="type">String</span>?
    <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span>

    <span class="keyword">init</span>(
        label: <span class="type">String</span>,
        icon: <span class="type">String</span>? = <span class="keyword">nil</span>,
        action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>
    ) {
        <span class="keyword">self</span>.<span class="property">label</span> = label
        <span class="keyword">self</span>.<span class="property">icon</span> = icon
        <span class="keyword">self</span>.<span class="property">action</span> = action
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span> {
            <span class="call">action</span>()
        } label: {
            <span class="keyword">if let</span> icon {
                <span class="type">Image</span>(systemName: icon)
            }
            <span class="type">Text</span>(label)
        }
    }
}
</code></pre><p>Then just update the <code>init()</code> and call the <code>action()</code> in the button's action.</p><p>And voila! Pretty neat. You can now call this button anywhere you want to use it, define a label and pass any functionality to it. You can customize the button to your preference and pass any other properties you might need.</p><h2>Previews</h2><p>If you were wondering how to make the <strong>Previews</strong> work for the <strong>ButtonView</strong>, you need to define all the properties in your <code>View</code>, including the <strong>closure</strong> you created:</p><pre><code><span class="keyword">struct</span> ButtonView_Previews: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ButtonView</span>(label: <span class="string">"OK"</span>) {}
    }
}
</code></pre><p>You own your Previews. When you want to enable them for the specific View, you need to add everything the View needs to display properly.</p><h2>Seeing it in action</h2><p>Let's create two buttons with some styling. One with icon and text, and another with text only:</p><img src="https://www.danijelavrzan.com/images/posts/2022/12/reusable-button1.png "ContentView with two ButtonViews"" alt="ContentView with two ButtonViews"/><h2>Button UI Code</h2><p>If you're interested, here's the complete code for the button I've created, including all the styling:</p><pre><code><span class="keyword">struct</span> ButtonView: <span class="type">View</span> {
    <span class="keyword">let</span> icon: <span class="type">String</span>?
    <span class="keyword">let</span> label: <span class="type">String</span>
    <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span>
    
    <span class="keyword">init</span>(
        label: <span class="type">String</span>,
        icon: <span class="type">String</span>? = <span class="keyword">nil</span>,
        action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>
    ) {
        <span class="keyword">self</span>.<span class="property">label</span> = label
        <span class="keyword">self</span>.<span class="property">icon</span> = icon
        <span class="keyword">self</span>.<span class="property">action</span> = action
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span> {
            <span class="call">action</span>()
        } label: {
            <span class="type">HStack</span>(spacing: <span class="number">8</span>) {
                <span class="keyword">if let</span> icon {
                    <span class="type">Image</span>(systemName: icon)
                        .<span class="call">resizable</span>()
                        .<span class="call">scaledToFit</span>()
                        .<span class="call">frame</span>(width: <span class="number">28</span>, height: <span class="number">28</span>)
                }
                <span class="type">Text</span>(label)
            }
            .<span class="call">font</span>(.<span class="dotAccess">title2</span>)
            .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">12</span>)
            .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">purple</span>)
            .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
            .<span class="call">background</span> {
                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">12</span>)
                    .<span class="call">stroke</span>(<span class="type">Color</span>.<span class="property">purple</span>, lineWidth: <span class="number">2.0</span>)
                  .<span class="call">background</span> {
                      <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">12</span>)
                          .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">purple</span>.<span class="call">opacity</span>(<span class="number">0.2</span>))
                  }
            }
        }
    }
}
</code></pre><h2>Final Thoughts</h2><p>You can create custom view modifiers and apply the styling to the button. You could also create a custom button style.</p><p>There are different ways you can approach building customizable and reusable UI components. There's no definitive approach to take. Use what works for you.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/11/xcode-configuration</guid><title>How to manage build settings using Xcode configuration files</title><description>You use Xcode build configuration files to define all sorts of useful build settings. You can open them with different text editors outside of Xcode and all properties are in plain text. It's common to use them for managing constants across different environments.</description><link>https://www.danijelavrzan.com/posts/2022/11/xcode-configuration</link><pubDate>Tue, 29 Nov 2022 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>How to manage build settings using Xcode configuration files</h1><p>If you are working as part of a team in a bigger company, it's likely you have multiple environments set up. The names can be different, but these are usually a <strong>development</strong> environment for devs to do their work, a <strong>testing</strong> environment for QAs and a <strong>production</strong> environment.</p><p>If you are working alone, you might not have these environments set up for a smaller app. But even if you don't, you could still benefit from creating an Xcode build configuration file for different build settings.</p><p>You can open Xcode configuration files outside of Xcode and with any text editor. Because all properties are in plain text, they are easier to read and you don't have to navigate Xcode's maze of build settings.</p><p>One of the popular use-cases for using a configuration file is to manage constants across different environments. We're going to use it to store a base URL for our API.</p><blockquote><p>I suggest reading this article by <a href="https://twitter.com/mattt">Matt</a> from NSHipster on <a href="https://nshipster.com/secrets/">Secret Management on iOS</a>. He suggests never to use Xcode Configuration files to manage your API Keys (or secrets). The best way to keep your secrets secure, is to <strong>obfuscate</strong> them using code generation.</p></blockquote><p>Or, in the words of Julian Assange:</p><blockquote><p><em>"The only way to keep a secret is to never have one."</em></p></blockquote><h2>Configuration Settings File</h2><p>Xcode build configuration files or <strong>.xcconfig</strong> files allow us to define and manage build settings for our apps in plain text. Each file consists of a sequence of key-value properties in a <strong>KEY_NAME = value</strong> format, where value can be <code>String</code>, <code>Int</code>, <code>Bool</code>, or other defined formats. You can read more on configuration settings file format in Apple's <a href="https://help.apple.com/xcode/mac/11.4/#/dev745c5c974">Xcode Help</a> documentation.</p><p>In your Xcode project, create a new <strong>Configuration Settings File</strong> anywhere you'd like and name it <strong>Configuration</strong>. Make sure not to select any targets for it.</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/xcode-configuration1.png%20"Configuration Settings File in Xcode"" alt="Configuration Settings File in Xcode"/><p>Next, add a property for your base url to the file:</p><pre><code><span class="comment">// Example:</span>
<span class="type">BASE_URL</span> = awesome.<span class="property">example</span>.<span class="property">com</span>
</code></pre><h2>Info.plist</h2><p>Build settings defined by Xcode project and configuration files are only available at build time. When you compile the app, none of it is available. As it should be.</p><p>After creating the <strong>BASE_URL</strong> property, you need to add it to your <strong>Info.plist</strong> file. It'll get compiled during build time based on the build settings provided and copied into the app bundle.</p><p>But wait, there's no <strong>Info.plist</strong> file in Xcode. Following Xcode 13 release, there's no <strong>Info.plist</strong> file by default anymore when you create a new project in Xcode. This file is a feature and only created when needed. We're nudged to use Xcode's Build Settings instead.</p><p>Select your project in Xcode and go to <strong>Info</strong> tab. Expand <strong>Configurations</strong> and add your <strong>Configuration.xcconfig</strong> file to both <strong>Debug</strong> and <strong>Release</strong>. We only have a single configuration file, but this is where you can set up different configuration files for different environments:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/xcode-configuration2.png%20"Adding Configuration file in Info settings"" alt="Adding Configuration file in Info settings"/><p>Now all that's left to do is to add a reference to the property in target's build settings.</p><h2>Custom iOS Target Properties</h2><p>By adding a reference to the configuration properties, you can access their values with Foundation's <code>Bundle</code> API.</p><p>Select your project's target in Xcode and go to <strong>Info</strong> tab. Select any property in <strong>Custom iOS Target Properties</strong> and click on the <strong>+</strong> button to add a new property.</p><p>Add <strong>BASE_URL</strong> with the reference to your configuration property <strong>$(BASE_URL)</strong>:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/xcode-configuration3.png%20"Custom iOS Terget Properties"" alt="Custom iOS Terget Properties"/><p>After adding the property, an <strong>Info.plist</strong> file gets added to your project automatically. All your custom user properties will get stored here.</p><p>Now all you have to do is access the base url in your code.</p><h2>Bundle</h2><p>Create a new <strong>Swift</strong> file and name it any way you'd like. I'll name it <strong>Environment</strong>. Add the following code to the file:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">public struct</span> Environment {
    <span class="keyword">enum</span> Keys {
        <span class="keyword">static let</span> baseURL = <span class="string">"BASE_URL"</span>
    }
    
    <span class="comment">// Get the BASE_URL</span>
    <span class="keyword">static let</span> baseURL: <span class="type">String</span> = {
        <span class="keyword">guard let</span> baseURLProperty = <span class="type">Bundle</span>.<span class="property">main</span>.<span class="call">object</span>(
            forInfoDictionaryKey: <span class="type">Keys</span>.<span class="property">baseURL</span>
        ) <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> {
            <span class="call">fatalError</span>(<span class="string">"BASE_URL not found"</span>)
        }
        <span class="keyword">return</span> baseURLProperty
    }()
}
</code></pre><p>Here you create a new <strong>Environment</strong> <code>struct</code> and a <strong>Keys</strong> <code>enum</code> that defines all your custom keys. Then you create a <strong>baseURL</strong> constant to get the value from the bundle. Now you have access to its value where needed.</p><p>Let's print it out in a View to make sure it's working:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/xcode-configuration4.png%20"Base url printed out in a View"" alt="Base url printed out in a View"/><h2>Final Thoughts</h2><p>Xcode build configuration files are quite useful to manage configuration properties between different environments. You can also use them to easily assing a different app name and an app icon for specific environment.</p><p>What makes them especially useful is you can open them outside of Xcode with any text editor. It also keeps your configuration properties outside of your code.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/11/publish-cname-record</guid><title>Publish: Persist CNAME record when deploying with GitHub Pages</title><description>To configure custom domain for websites hosted on GitHub Pages, your repository needs to contain a CNAME record file. You can add the file manually through GitHub, but it gets overwritten after deployment. Publish force pushes to the repository and overwrites the content. In this post, learn how to persist the CNAME record and make sure it never gets deleted.</description><link>https://www.danijelavrzan.com/posts/2022/11/publish-cname-record</link><pubDate>Tue, 15 Nov 2022 08:45:00 -0500</pubDate><content:encoded><![CDATA[<h1>Publish: Persist CNAME record when deploying with GitHub Pages</h1><blockquote><p>If you want to learn how to deploy your website on GitHub Pages, check the <a href="https://danijelavrzan.com/posts/2022/08/publish-deploy-to-github/">Publish: Deploying your website on GitHub Pages</a> post. Or if you're looking to get started using <a href="https://github.com/JohnSundell/Publish">Publish</a>, check the <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">How to Create a Personal Website in Swift using Publish</a> post.</p></blockquote><p>So you bought a shiny new domain and deployed your website on GitHub Pages for the world to see. Everything works as expected, until a friend of yours messages you about a typo in the <em>about me</em> section and you stumble fast to deploy a fix.</p><p>However, after deploying your website again, it's not working. Uh-oh. You try to revert the changes you made, to the state where everything worked, but that doesn't fix the issue.</p><h2>Custom Domain on GitHub Pages</h2><blockquote><p>This post won't go into details about creating or setting up custom domains. I assume you already have one and it's set up to use. Check this article if you want to learn more about <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">Custom Domains and GitHub Pages</a>.</p></blockquote><p>When you set up your custom domain for the first time, it works like a charm. However, any other subsequent deployment overwrites the setup. Your website stops working on <strong>amazingdeveloper.com</strong> and reverts back to using the default <strong>yourUsername.github.io</strong> domain.</p><p>Then you realize after deploying your website with <code>publish deploy</code>, the <strong>Output</strong> folder gets overwritten and the <strong>CNAME</strong> record that was added manually through GitHub gets deleted. Your website no longer uses your custom domain, but reverts back to a default one.</p><blockquote><p>A <strong>Canonical Name record</strong> (or <strong>CNAME record</strong>) is a resource record in the <a href="https://en.wikipedia.org/wiki/Domain_Name_System "Domain Name System"">Domain Name System</a> (DNS) that maps one domain name (an alias) to another (the canonical name).</p></blockquote><p>There's a section in GitHub Docs under <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages">CNAME Errors</a> that explains how some static site generators work:</p><p><em>"For your site to render at the correct domain, make sure your </em>CNAME<em> file still exists in the repository. For example, many static site generators force push to your repository, which can overwrite the </em>CNAME<em> file that was added to your repository when you configured your custom domain."</em></p><h2>Quick Fix on GitHub</h2><p>You can fix this quickly by opening your repository on GitHub and going to <strong>Pages</strong> section. Under <strong>Custom domain</strong>, add the missing domain:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/publish-cname-record1.png%20"GitHub Pages settings section and Custom domain setup"" alt="GitHub Pages settings section and Custom domain setup"/><p>When you add your custom domain, GitHub automatically adds a <strong>CNAME</strong> record to the root of your <strong>Output</strong> folder.</p><p>While this does fix the issue, it's not a permanent solution. You'd have to do it manually every time you deploy a new change to your website.</p><p>And there's a better solution.</p><h2>Add CNAME to Resources</h2><p>You can't persist the <strong>CNAME</strong> record on the GitHub repository itself, because Publish force pushes and overwrites the content. You can't add it to the <strong>Output</strong> folder in Xcode either, because when Xcode runs the build, it overwrittes the content of the folder every time as well. If you try adding it, when you run the build, it will get deleted.</p><p>But, there is a way to persist the file on every build and make sure it gets pushed to your repository on every deployment. You need to add the <strong>CNAME</strong> record to the <strong>Resources</strong> folder. And you only need to do this once.</p><p>One of the publishing steps in the publishing pipeline in <code>main.swift</code> file is called <code>.copyResources()</code>. Inspecting this method, tells us its purpose is to <em>"copy the website's main resources into its output folder"</em>. Exactly what we need.</p><p>In Xcode, create a new <strong>Empty</strong> file and add it to the root of your <strong>Resources</strong> folder. Rename it to <strong>CNAME</strong>. Make sure to name it exactly like that, all uppercase, or it won't work:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/publish-cname-record2.png%20"Adding a new empty file type in Xcode"" alt="Adding a new empty file type in Xcode"/><p>Then, add your custom domain on the first line, in the format of <strong>domainname.com</strong>.</p><p>Now every time you run the build in Xcode, the content of the <strong>Resources</strong> folder is copied to the <strong>Output</strong> folder, including your new <strong>CNAME</strong> file.</p><p>When you deploy your website, the file will push to your website's repository and GitHub will persist your domain on every deployment. Much better than doing it manually every time.</p><h2>Final Thoughts</h2><p>I hope this small tip improves your experience working with Publish and GitHub Pages.</p><p>GitHub Pages are easy to set up and Publish has a built-in deployment method for it. It's more than enough to use for personal websites that might not change in content, or small blogs. And it's free!</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/11/network-connection-alert-swiftui</guid><title>How to check for network connection and present an alert in SwiftUI</title><description>Implementing network connectivity monitor doesn't require a lot of code. But it can mean a lot between a happy and a frustrated user.</description><link>https://www.danijelavrzan.com/posts/2022/11/network-connection-alert-swiftui</link><pubDate>Tue, 1 Nov 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to check for network connection and present an alert in SwiftUI</h1><p>Most apps use some type of networking in their code. Whether you're handling user accounts or fetching data from a remote server, you need to handle network connection issues gracefully. Not <em>just</em> making sure your app doesn't crash with a fatal error, but displaying a proper information back to the user.</p><h2>NWPathMonitor</h2><p>To check for and react to any changes in network connectivity you can use the <strong>NWPathMonitor</strong> observer from the <strong>Network</strong> framework. You can initialize the path monitor with different properties, such as specifying the type of connection (wifi, cellular...) or whether it's restricted by low data. You can check the <a href="https://developer.apple.com/documentation/network/nwpathmonitor">official documentation</a> for more information.</p><p>In this example, we'll initalize the path to observe all available interface types (wifi, cellular, wired and other).</p><h2>NetworkMonitor</h2><p>Create a new <strong>NetworkMonitor</strong> class with the following code:</p><pre><code><span class="keyword">class</span> NetworkMonitor: <span class="type">ObservableObject</span> {
    <span class="keyword">private let</span> networkMonitor = <span class="type">NWPathMonitor</span>()
    <span class="keyword">private let</span> workerQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"Monitor"</span>)
    <span class="keyword">var</span> isConnected = <span class="keyword">false

    init</span>() {
        networkMonitor.<span class="property">pathUpdateHandler</span> = { path <span class="keyword">in
            self</span>.<span class="property">isConnected</span> = path.<span class="property">status</span> == .<span class="dotAccess">satisfied</span>
            <span class="type">Task</span> {
                <span class="keyword">await</span> <span class="type">MainActor</span>.<span class="call">run</span> {
                    <span class="keyword">self</span>.<span class="property">objectWillChange</span>.<span class="call">send</span>()
                }
            }
        }
        networkMonitor.<span class="call">start</span>(queue: workerQueue)
    }
}
</code></pre><p>NetworkMonitor conforms to @ObservableObject protocol so we can listen for any changes and update the UI accordingly.</p><p>First, create two private properties, an <code>NWPathMonitor</code> observer and a <code>DispatchQueue</code> where the monitor will do its work. The third property is a <code>Boolean</code> value we'll call in the View to check for network connectivity. The initial value is <strong>false</strong>.</p><p>Next, create an initializer and call the <code>.pathUpdateHandler</code> on the path monitor to handle the changes. Update <code>isConnected</code> to <strong>true</strong> when the path status is satisfied (connection is available) and notify observers for any changes with <code>objectWillChange.send()</code>.</p><p>Finally, start the monitoring on the specified queue.</p><blockquote><p>Our network monitor can be used in both UIKit and SwiftUI views.</p></blockquote><p>Now the fun part.</p><h2>Inject into SwiftUI environment</h2><p>To use network monitor in your app, instantiate it in the <code>@main</code> app struct and inject as an environment object:</p><pre><code><span class="keyword">@main
struct</span> MyApp: <span class="type">App</span> {
    <span class="keyword">@StateObject var</span> networkMonitor = <span class="type">NetworkMonitor</span>()

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">ContentView</span>()
                .<span class="call">environmentObject</span>(networkMonitor)
        }
    }
}
</code></pre><p>Then you can call it anywhere in your app.</p><h2>Update UI</h2><p>There are a few options for displaying different views and alerts when network connection is unavailable. It depends on the requirements of your app and the design of your UI. Most apps update the view displaying the <em>no network connection</em> text on the view itself.</p><p>First, you need to call the environment object in the view:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> networkMonitor: <span class="type">NetworkMonitor</span>
    ...
}
</code></pre><h3>Change the View</h3><p>Instead of having an empty screen when network connection is unavailable, you can create and show a different view. Something like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> networkMonitor: <span class="type">NetworkMonitor</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationView</span> {
	      <span class="comment">// If monitor detects valid network connection</span>
            <span class="keyword">if</span> networkMonitor.<span class="property">isConnected</span> {
	          <span class="comment">// Show home view</span>
                <span class="type">HomeView</span>()
            } <span class="keyword">else</span> {
	          <span class="comment">// Otherwise, show something else</span>
                <span class="type">NoNetworkView</span>()
            }
        }
     }
}
</code></pre><blockquote><p>You can test network connection in the Simulator by setting your laptop's internet off. But it doesn't work well. It doesn't detect network issues consistently and it may not present the view when you turn off your internet. I suggest testing on a real device.</p></blockquote><p>Turning your internet on and off will update the UI automatically:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/network-connection-alert-swiftui1.png%20"Left: view displayed with the valid network connection. Right: No network connection view with unavailable connection"" alt="Left: view displayed with the valid network connection. Right: No network connection view with unavailable connection"/><h3>Present an alert</h3><p>Another way of letting the user know their network connection is offline is by presenting an alert on the screen. Instead of changing the view, you can display an alert.</p><blockquote><p>Some apps display both. If you only present an alert, your view will still be empty once the alert is dismissed. Present an alert to get user's attention and still have the <em>"no network connection"</em> text on the view.</p></blockquote><p>First, you need to create a property that will determine whether to display the alert with the default value of <strong>false</strong>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> networkMonitor: <span class="type">NetworkMonitor</span>
    <span class="keyword">@State private var</span> showNetworkAlert = <span class="keyword">false</span>
    ...
}
</code></pre><p>Then, add <code>.alert()</code> and <code>.onChange(of:)</code> modifiers on the view:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> networkMonitor: <span class="type">NetworkMonitor</span>
    <span class="keyword">@State private var</span> showNetworkAlert = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationView</span> {
            <span class="type">HomeView</span>()
        }
        .<span class="call">onChange</span>(of: networkMonitor.<span class="property">isConnected</span>) { connection <span class="keyword">in</span>
            showNetworkAlert = connection == <span class="keyword">false</span>
        }
        .<span class="call">alert</span>(
            <span class="string">"Network connection seems to be offline."</span>,
            isPresented: <span class="property">$showNetworkAlert</span>
        ) {}
    }
}
</code></pre><p>Alert listens to <strong>showNetworkAlert</strong> binding for changes so it knows when to present. <code>onChange(of:)</code> listens for changes in the network connectivity and updates the alert's binding depending on the network status.</p><p>The UI will look like this:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/network-connection-alert-swiftui2.png%20"Left: view displayed with the valid network connection. Right: Alert presented on the view with unavailable connection"" alt="Left: view displayed with the valid network connection. Right: Alert presented on the view with unavailable connection"/><h3>Present a popover</h3><p>There's not much change in code to display a popover. Both alert and popover use binding to listen for changes. Replace an alert with a popover:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> networkMonitor: <span class="type">NetworkMonitor</span>
    <span class="keyword">@State private var</span> showNetworkAlert = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationView</span> {
            <span class="type">HomeView</span>()
        }
        .<span class="call">onChange</span>(of: networkMonitor.<span class="property">isConnected</span>) { connection <span class="keyword">in</span>
            showNetworkAlert = connection == <span class="keyword">false</span>
        }
        .<span class="call">popover</span>(isPresented: <span class="property">$showNetworkAlert</span>) {
            <span class="type">Text</span>(<span class="string">"Network connection seems to be offline."</span>)
        }
    }
}
</code></pre><p>The UI will change to this:</p><img src="https://www.danijelavrzan.com/images/posts/2022/11/network-connection-alert-swiftui3.png%20"Left: view displayed with the valid network connection. Right: A popover presented on the view with unavailable connection"" alt="Left: view displayed with the valid network connection. Right: A popover presented on the view with unavailable connection"/><h2>Final Thoughts</h2><p>Implementing network connectivity monitor doesn't require a lot of code. But it can mean a lot between a happy and a frustrated user.</p><p>Crafting delightful user experiences is part of what we do every day and also the reason why users keep coming back to our apps. We want them to come back.</p><p>You can have the best error handling code in your app and still have users leaving 1 star reviews titled <em>"sucks"</em>. Where there should have been an amazing UI, was an empty screen. So, well, the user didn't realize their network connection was lost or the server decided to become a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418">teapot</a>.</p><blockquote><p>Thanks to <a href="https://twitter.com/twannl">@twannl</a> for pointing out Apple's recommendation not to check for network connections and instead running requests and handling potential networking errors. <strong>Network</strong> framework can still be helpful to pro-actively inform users about a bad networking condition without blocking any UI.</p></blockquote><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/10/publish-automatic-local-changes</guid><title>Publish: How to Preview Local Changes on Your Website Instantly</title><description>You're working on your website and making changes, but nothing has changed. You refresh the browser and yet nothing happens. In this post, learn how to use the tools available to refresh your website and see the changes you've made, applied instantly.</description><link>https://www.danijelavrzan.com/posts/2022/10/publish-automatic-local-changes</link><pubDate>Tue, 18 Oct 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Publish: How to Preview Local Changes on Your Website Instantly</h1><p>You've decided to <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">create a website in Swift using Publish</a> and you're working locally on your machine. You're making local changes before you deploy a new version or publish a new post.</p><p>While you're working on the website, you make a change, run the build, and for some reason the changes are not applied. You run the build again and nothing happens. You're not sure anymore if what you're doing is correct or is there another issue. There <em>is</em> another issue.</p><p>Your website is <strong>cached</strong> and changes take a long time to update. That includes any local changes.</p><p>You'll see how to fix this issue in an easy way and see the changes you've made <em>almost</em> automatically. It's not SwiftUI Previews, but close enough.</p><h2>Browser Cache</h2><p>Web browsers cache resources from websites you visit in a small database of files. Common resources in a browser cache are images, text, HTML, CSS, and Javascript.</p><p>This data is stored on your computer and a browser doesn't know if you're looking at an online or a local server content. Resources are stored anyway. This is why when you open your <strong>http://localhost:8000</strong> website, HTML and CSS get cached. When you make a change and refresh the browser, the changes may not show right away.</p><p>Let's take a look at how to fix this issue.</p><h2>Google Chrome</h2><p>Whether you're already using it, or not, Chrome is the first choice for testing websites in web development. Their <strong>Developer Tools</strong> are the best out there. This is what you'll use to fix the issue and finally be able to see your new changes with a simple refresh.</p><p>In Chrome, go to <strong>View</strong> -&gt; <strong>Developer</strong> -&gt; <strong>Developer Tools</strong> or <strong>Option+Command+I</strong> as a shortcut. There'll be a new panel at the bottom of the browser:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/publish-automatic-local-changes01.png%20"Google Chrome web browser with Developer Tools opened"" alt="Google Chrome web browser with Developer Tools opened"/><p>You'll need to open Tools every time you're working on your website so you'll remember the shortcut quite fast. Tools close automatically when you close the browser.</p><p>Developer Tools are a very powerful toolkit to inspect website elements, see web traffic, and do a lot of other things we won't be getting into details now. We're interested in turning off the cache so we can see the changes we make during development.</p><p>In Developer Tools, find the <strong>Network</strong> tab at the top and click on <strong>Disable cache</strong> below it:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/publish-automatic-local-changes02.png%20"Network tab in Developer Tools with cache disabled"" alt="Network tab in Developer Tools with cache disabled"/><p>When you disable cache in Developer Tools, this setting with persist across browser launches, but it will only apply when the Tools are open. This won't mess with the regular use of your browser.</p><p>Now every time you're working on your website and want to see the change you make in the code, run the build in Xcode and <strong>Command+R</strong> to refresh the page and see your changes instantly.</p><h2>Safari and Other Browsers</h2><p>I personally prefer using Chrome during development, but if you'd like to use other browsers, they all have some type of developer tools.</p><p>In Safari, it's called <strong>Web Inspector</strong> and can be found under <strong>Develop</strong>, or opened with the same shortcut <strong>Control+Command+I</strong>.</p><p>Then under <strong>Network</strong> tab, you'll find the same <strong>Disable cache</strong> option on the right side of the panel:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/publish-automatic-local-changes03.png%20"Network tab in Web Inspector with cache disabled in Safari"" alt="Network tab in Web Inspector with cache disabled in Safari"/><h2>Final Thoughts</h2><p>All that's left to do now is make some changes, run the build, and refresh the page. Your website will update instantly.</p><p>There might be other ways out there to achieve this, but I've found this works quite well.</p><p>While Publish does allow us to build websites using Swift, it still requires some knowledge of web development. I hope your website development process will now become faster and more enjoyable.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/10/class-diagram</guid><title>How to create a class diagram</title><description>A class diagram describes the structure of a system by showing its classes, their attributes, methods, and their relationships. It's one of the many diagrams of UML and a most common one. Knowing how to create a class diagram could give you an advantage and it's a useful skill to have. Creating a class diagram could come as an interview question.</description><link>https://www.danijelavrzan.com/posts/2022/10/class-diagram</link><pubDate>Tue, 4 Oct 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to create a class diagram</h1><p>Some companies require development teams to create <strong>Unified Model Language (UML)</strong> diagrams as part of the architectural process, before development begins. UML diagrams are blueprints of a system. They show components and their interaction in a visual way.</p><p>When a developer takes a specific task, they might need to read the diagram and translate the blueprints into code. Reading and writing UML diagrams is a useful skill to have.</p><p>Most universities teach UML as part of their curriculum. But if you've never worked with them before, the hardest part is understanding how they connect to your code.</p><p>I won't go into too much theory. Wikipedia describes what UML is in a concise way and I couldn't have explained it better:</p><blockquote><p>"<em>The <strong>Unified Modeling Language</strong> (<strong>UML</strong>) is a general-purpose, developmental modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.</em>"</p></blockquote><p>You can read the theory behind <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">UML</a> and <a href="https://en.wikipedia.org/wiki/Class_diagram">class diagrams</a> if you'd like to learn more. To see the practical part and how to create a diagram from an existing Swift code, continue reading.</p><h2>Class Diagram</h2><p>A class diagram describes the structure of a system by showing its classes, their attributes, methods, and their relationships. It's one of the many diagrams of UML and a most common one.</p><blockquote><p>Creating a class diagram could be an interview question. I've had to create it once myself. I got a design of a screen; it was a list with some data. I had to translate the design into a class diagram and then translate the diagram into code.</p></blockquote><p>A class diagram can be as detailed as needed or as general as you'd like. It really depends on the requirement.</p><p>You'll see how to create a simple class diagram given some Swift code with all the properties, methods, and their relationships.</p><blockquote><p>It's worth mentioning that there might be different class diagrams out there using different notations. While UML diagrams have certain set of <em>rules and notations</em>, developers aren't really following it to the letter and that's not the point of it. You can write it any way you'd like as long as it's readable and understandable.</p></blockquote><p>A class diagram has a <em>class</em> in its name but it doesn't only show classes. It shows all objects in your code: structs, enums, protocols, classes and other.</p><p>In the diagram, an object is represented with a box divided into three parts:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/class-diagram01.png%20"A diagram showing three different parts and their content"" alt="A diagram showing three different parts and their content"/><ul><li><strong>The top part contains the name of the class</strong>. It's written in bold and centered, and the first letter is capitalized, just like any Swift <code>class</code> or <code>struct</code>.</li><li><strong>The middle part has all the properties of the object</strong>. They are left-aligned and the first letter is lowercase.</li><li><strong>The bottom part contains the methods</strong>. They are also left-aligned and the first letter is lowercase.</li></ul><p>Properties and methods are denoted with a sign that represents their visibility or access control.</p><p>Access control notations are as follows:</p><ul><li><code>+</code> Public</li><li><code>-</code> Private</li><li><code>#</code> Protected</li><li><code>~</code> Package</li></ul><h2>Creating a diagram from a struct</h2><p>Consider the following <strong>Pet</strong> <code>struct</code>:</p><pre><code><span class="keyword">struct</span> Pet: <span class="type">Identifiable</span> {
  <span class="keyword">var</span> id = <span class="type">UUID</span>()
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> age: <span class="type">Int</span>
  <span class="keyword">let</span> owner: <span class="type">Owner</span>
  <span class="keyword">let</span> type: <span class="type">Animal</span>
  <span class="keyword">let</span> petInfo: <span class="type">PetInformation</span>

  <span class="keyword">func</span> feed() {
    <span class="keyword">if</span> <span class="call">isHerbivore</span>() {
      <span class="call">print</span>(<span class="string">"Feed with lettuce!"</span>)
    }
  }

  <span class="keyword">private func</span> isHerbivore() -&gt; <span class="type">Bool</span> {
    <span class="keyword">return</span> type.<span class="property">herbivore</span>
  }
}
</code></pre><p>It has a few properties describing the object and two methods, one of which is <code>private</code>. It also has an <strong>id</strong> of type <code>UUID</code> and conforms to <code>Identifiable</code> protocol.</p><blockquote><p>I'm using <a href="https://app.diagrams.net">draw.io</a> to create the class diagram and it's a simple free website that lets you create UML diagrams and then export them into any format you'd like. There are other websites, like <a href="https://www.lucidchart.com/pages/">Lucidchart</a>, which is widely used by companies. It has a free tier but requires an account.</p></blockquote><p>This is how the class diagram of a <strong>Pet</strong> looks like:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/class-diagram02.png%20"A class diagram showing the Pet struct"" alt="A class diagram showing the Pet struct"/><p>The default access control for Swift types is <code>internal</code> and there's no notation in UML for that specific access control type. Most developers omit the access control for it or make up their own sign. <code>isHerbivore()</code> is marked with <code>-</code> as a <code>private</code> method.</p><h2>Adding protocols and implementation relationships</h2><p><strong>Pet</strong> conforms to <code>Identifiable</code> so it can implement the unique identifier. To show this type of relationship in your diagram, create a diagram with a single box for the protocol and add the relationship:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/class-diagram03.png%20"A class diagram showing the Pet struct and conformance to Identifiable with an implementation relationship"" alt="A class diagram showing the Pet struct and conformance to Identifiable with an implementation relationship"/><p>An <strong>implementation relationship</strong> is a relationship between two models, in which one model implements the behavior that the other model specifies. It's used for protocol conformance. The graphical representation of the relationship is a dashed line with an empty triangle arrow pointing towards the protocol.</p><p>For default protocols you don't need to add any properties or methods on the protocol diagram, only its name in bold and the <code>&lt;&lt;protocol&gt;&gt;</code> notation. For custom protocols, you can decide whether you want to add the properties and methods that your protocol defines.</p><h2>Adding other models and their relationships</h2><p>The rest of the code defining our models:</p><pre><code><span class="keyword">struct</span> Owner: <span class="type">Experienced</span> {
  <span class="keyword">let</span> name: <span class="type">String</span>

  <span class="keyword">func</span> isExperienced() {
    <span class="call">print</span>(<span class="string">"Maybe"</span>)
  }
}

<span class="keyword">protocol</span> Experienced {
  <span class="keyword">func</span> isExperienced()
}

<span class="keyword">struct</span> Animal {
  <span class="keyword">let</span> type: <span class="type">String</span>
  <span class="keyword">let</span> breed: <span class="type">String</span>
  <span class="keyword">let</span> herbivore: <span class="type">Bool</span>
}

<span class="keyword">struct</span> PetInformation {
  <span class="keyword">let</span> traits: [<span class="type">String</span>]
  <span class="keyword">let</span> vaccines: [<span class="type">Vaccine</span>]
}

<span class="keyword">struct</span> Vaccine {
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> type: <span class="type">String</span>
}
</code></pre><p>And the class diagram looks like this:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/class-diagram04.png%20"A class diagram"" alt="A class diagram"/><p>The solid line with an open arrow pointing towards the class that supplies the property is a graphical representation of an <strong>association relationship</strong> and is used to link any number of classes.</p><p>The text on the relationship arrows is optional and is not required. But it can sometimes be very useful.</p><p>This is how the basic class diagram looks like from the given code. You should also be able to write the code given the class diagram, following the same principles. There are a few notations and relationship to learn that keep repeating all the time. Once you've learned them, you'll be able to create any class diagram for a system.</p><h2>What about a ViewModel?</h2><p>A ViewModel is a class that you can add as a diagram like any other diagram you've added. Let's say you have a PetViewModel with pets property and an initializer. Your class diagram would now look like the following:</p><img src="https://www.danijelavrzan.com/images/posts/2022/10/class-diagram05.png%20"A class diagram with a ViewModel"" alt="A class diagram with a ViewModel"/><h2>Final Thoughts</h2><p>Class diagrams are common in programming and it's worth knowing how to create and read them. It's one of the overlooked skills that might give you an advantage knowing how it works.</p><p>This is not the ultimate guide on how to create UML or class diagrams, but it should be enough to get you started on your own.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/09/publish-get-started-custom-theme</guid><title>Publish: Getting Started with Custom Themes</title><description>Publish has a default HTML theme called Foundation. But it serves as a guideline and a point of reference to creating your own theme. So your next step, before deploying your website, is to change the default theme and create your own.</description><link>https://www.danijelavrzan.com/posts/2022/09/publish-get-started-custom-theme</link><pubDate>Tue, 6 Sep 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Publish: Getting Started with Custom Themes</h1><p>So you've learned <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">how to create a personal website in Swift using Publish</a> and you're ready to show it off to the world... almost!</p><blockquote><p>We'll use the website called <strong>MyWebsite</strong>, we created in the previous post, for this and all other posts on Publish.</p></blockquote><p>Before <a href="https://danijelavrzan.com/posts/2022/08/publish-deploy-to-github/">deploying your website</a> you might want to change the theme and create some custom HTML elements.</p><h2>Theme</h2><p>Publish uses a default theme to render your website called <strong>Foundation</strong>. It exists as a guide and a point of reference for creating your own theme.</p><p>Under <strong>Package Dependencies</strong>, find <strong>Publish</strong> and expand it. Go to <strong>Sources</strong> -&gt; <strong>Publish</strong> -&gt; <strong>API</strong> and open <strong>Theme+Foundation</strong> file. At the top you'll find the foundation theme:</p><pre><code><span class="keyword">public extension</span> <span class="type">Theme</span> {
    <span class="comment">/// The default "Foundation" theme that Publish ships with, a very
    /// basic theme mostly implemented for demonstration purposes.</span>
    <span class="keyword">static var</span> foundation: <span class="type">Self</span> {
        <span class="type">Theme</span>(
            htmlFactory: <span class="type">FoundationHTMLFactory</span>(),
            resourcePaths: [<span class="string">"Resources/FoundationTheme/styles.css"</span>]
        )
    }
}
</code></pre><p>Theme consists of two parts. First, you have the <strong>HTMLFactory</strong> where you define the HTML components and create your header, navigation, footer, and other basic HTML elements. Then, you have the <strong>styles.css</strong> file to style your website.</p><blockquote><p>You write your website's components in a SwiftUI-like syntax using Swift language. However, it's good to be familiar with both HTML and CSS. If you've never worked with them before, getting familiar with both and learning some basics will help you design and style your components faster.</p></blockquote><p>To create your own theme, you'll need to add the above extension and define your own HTMLFactory and a CSS file.</p><p>Copy the above code and paste it in your <strong>main.swift</strong> file, above <code>.publish(withTheme:)</code> line:</p><pre><code><span class="comment">// Define your Theme here</span>
...

<span class="comment">// This will generate your website using the built-in Foundation theme:</span>
<span class="keyword">try</span> <span class="type">MyWebsite</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">foundation</span>)
</code></pre><p>Xcode will complain it <em>Cannot find FoundationHTMLFactory in the scope</em> and it's not wrong (this time). You need to create it. But before you do that, change the name of your new HTMLFactory inside the theme extension to whatever name you'd like. I'll name it <strong>MyThemeHTMLFactory()</strong>.</p><h2>Styling</h2><p>To create your own custom theme, you need to create a CSS file.</p><p>The theme you defined in <strong>main.swift</strong> is still pointing to foundation theme's <strong>styles.css</strong> file and you need to create your own.</p><p>In your Xcode project, under <strong>Resources</strong>, create a new folder and name it <strong>MyTheme</strong>.</p><p>Now in <strong>Package Dependencies</strong>, find <strong>Publish</strong> and expand it. Go to <strong>Resources</strong> -&gt; <strong>FoundationTheme</strong> and copy the <strong>styles.css</strong> file. You can open Publish in Finder and copy the file from there then paste it in the newly created folder:</p><img src="https://www.danijelavrzan.com/images/posts/2022/09/publish-get-started-custom-theme-01.png%20"styles.css file under Resources folder in Xcode project"" alt="styles.css file under Resources folder in Xcode project"/><p>After you copied the CSS file, make sure to update all the properties you've changed. Open <strong>main.swift</strong> and update the name of your theme, path to your CSS file and the theme name you're publishing your website with:</p><img src="https://www.danijelavrzan.com/images/posts/2022/09/publish-get-started-custom-theme-02.png%20"main.swift file showing highlighted parts of code to change the custom theme name, path to resources folder of the css file and  the call to theme in publish method"" alt="main.swift file showing highlighted parts of code to change the custom theme name, path to resources folder of the css file and the call to theme in publish(withTheme) method"/><h2>HTMLFactory</h2><p>Next, open <strong>Theme+Foundation.swift</strong> file under <strong>Package Dependencies</strong>. Below the <code>extension Theme</code> is a definition of <code>FoundationHTMLFactory</code>. Below the factory are definitions of a few of the HTML components; <code>SiteFooter</code>, <code>SiteHeader</code>, <code>Wrapper</code>, <code>ItemList</code> and <code>ItemTagList</code>.</p><p>First, copy the HTMLFactory and all of the components. Next, create a new file in your Xcode project under <strong>Sources</strong> -&gt; <strong>MyWebsite</strong>. Name it <strong>MyThemeHTMLFactory</strong> or whatever name you chose for your factory. Paste your code to this new file.</p><p>Change the name of the FoundationHTMLFactory to <strong>MyThemeHTMLFactory</strong> or the name of your choice. Then, import both <strong>Publish</strong> and <strong>Plot</strong> below <code>import Foundation</code> at the top of the file:</p><pre><code><span class="keyword">import</span> Foundation
<span class="comment">// Import Publish and Plot</span>
<span class="keyword">import</span> Publish
<span class="keyword">import</span> Plot

<span class="keyword">private struct</span> MyThemeHTMLFactory&lt;Site: <span class="type">Website</span>&gt;: <span class="type">HTMLFactory</span> {
...
}
</code></pre><p>All the errors are now gone and you're ready to customize your theme.</p><p>You can take a closer look what methods define the HTMLFactory by jumping to its definition.</p><blockquote><p>To read the definition of a code component in Xcode, whether from a third party or Apple's API, right-click on the code you want to learn more about and click <strong>Jump to Definition</strong>.</p></blockquote><pre><code><span class="comment">/// Protocol used to implement a website theme's underlying factory,
/// that creates HTML for a site's various locations using the Plot DSL.</span>
<span class="keyword">public protocol</span> HTMLFactory {
    <span class="comment">/// The website that the factory is for. Generic constraints may be
    /// applied to this type to require that a website fulfills certain
    /// requirements in order to use this factory.</span>
    <span class="keyword">associatedtype</span> Site: <span class="type">Website</span>

    <span class="comment">/// Create the HTML to use for the website's main index page.
    /// - **parameter** index: The index page to generate HTML for.
    /// - **parameter** context: The current publishing context.</span>
    <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                       context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>

	...
}
</code></pre><p>There are six methods used to define the HTMLFactory. Each method defines a larger HTML component of your website, for example, the index page (your homepage), sections, pages, items (your blog posts), tag list and tag details.</p><blockquote><p>Use tags to filter your blog posts by a category. Publish creates an new page that has a list of all the tags you define in your blog posts. This list is generated automatically. All tags are defined in the metadata section of a blog post. We'll take a look at this in the future post.</p></blockquote><h2>Standalone Components</h2><p>Standalone components are smaller HTML elements you create outside of the HTMLFactory and call them in any of the makeHTML methods, depending on the use case.</p><p>For example, at the end of the file, there's a <code>SiteFooter()</code> struct that defines your website's footer:</p><pre><code><span class="keyword">private struct</span> SiteFooter: <span class="type">Component</span> {
    <span class="keyword">var</span> body: <span class="type">Component</span> {
        <span class="type">Footer</span> {
            <span class="type">Paragraph</span> {
                <span class="type">Text</span>(<span class="string">"Generated using "</span>)
                <span class="type">Link</span>(<span class="string">"Publish"</span>, url: <span class="string">"https://github.com/johnsundell/publish"</span>)
            }

            <span class="type">Paragraph</span> {
                <span class="type">Link</span>(<span class="string">"RSS feed"</span>, url: <span class="string">"/feed.rss"</span>)
            }
        }
    }
}
</code></pre><p>These <em>smaller</em> components are created using <a href="https://github.com/JohnSundell/Plot">Plot</a> framework and are of type <code>Component</code>. Plot parses the code your write into HTML for your website.</p><p>You'll notice a very SwiftUI-like syntax here. It looks very similar to creating a <strong>SwiftUI</strong> <code>View</code>, there are UI components like <code>Footer</code>, <code>Paragraph</code>, <code>Text</code> and <code>Link</code> inside the <code>body</code>. These are all Plot components you can use to create the UI of your website. You can find more components to use in the Plot API.</p><p>When you create a standalone <code>Component</code> you need to call it in one of the HTMLFactory methods. Or all of them. Since <code>SiteFooter</code> is an HTML component that all the web pages of your website will have, that component is called at the end of every method.</p><blockquote><p>The order of calling the components matters. SiteFooter is added at the end because it's the last element of a web page.</p></blockquote><p>The footer is rendered like this on your website:</p><img src="https://www.danijelavrzan.com/images/posts/2022/09/publish-get-started-custom-theme-03.png%20"Highlighted parts of website: header, body and footer"" alt="Highlighted parts of website: header, body and footer"/><p>And the underlying HTML looks like this:</p><pre><code class="language-no-highlight">&lt;footer&gt;
  &lt;p&gt;Generated using 
    &lt;a href="https://github.com/johnsundell/publish"&gt;Publish&lt;/a&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href="https://www.danijelavrzan.com/feed.rss"&gt;RSS feed&lt;/a&gt;
  &lt;/p&gt;
&lt;/footer&gt;
</code></pre><p>We won't go into details on every component and every makeHTML method. I've shown you how they work and now you can explore them on your own.</p><h2>Final Thoughts</h2><p>This is where things get more complex when using Publish. You have to explore on your own. You have to read both Publish and Plot APIs code to figure out how to create components and how they fit together.</p><p>There will be more posts on this topic and how to work with the CSS file as well. This is just to get you started creating your own custom theme. I suggest you explore on your own and figure things out as you go along.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/08/publish-deploy-to-github</guid><title>Publish: Deploying your website on GitHub Pages</title><description>You've created your website and you're ready to show it off to the world. Next thing on your list is to choose where to host it. In this post, I'll show you how to deploy your Publish website on GitHub Pages.</description><link>https://www.danijelavrzan.com/posts/2022/08/publish-deploy-to-github</link><pubDate>Tue, 23 Aug 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Publish: Deploying your website on GitHub Pages</h1><p>So you've learned <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">how to create a personal website in Swift using Publish</a> and you're ready to show it off to the world!</p><blockquote><p>We'll use the website called <strong>MyWebsite</strong> we created in the previous post for this and all other posts on Publish.</p></blockquote><p>Next thing on your list is to choose the hosting platform.</p><p>I've decided to host mine on <a href="https://pages.github.com">GitHub Pages</a>. I already use GitHub every day and I chose it for its convenience and simplicity. You're welcome to choose any platform you like, but this post will show you how to host your website on GitHub Pages.</p><blockquote><p>Want to learn how to host your website using GitHub, AWS Route 53 and AWS Amplify? I recommend watching this video <a href="https://www.youtube.com/watch?v=pE6vPHP3AoA">Deploy Your Publish Website</a> by <a href="https://twitter.com/kilo_loco">Kilo Loco</a>.</p></blockquote><h2>Generate the content</h2><p>All Publish websites are implemented as <strong>Swift Packages</strong>. When you open your website's <strong>Package.swift</strong> file and run it on Xcode using <strong>Product -&gt; Run</strong>, Xcode generates all the files and folders of your website and puts them in the <strong>Output</strong> folder:</p><img src="https://www.danijelavrzan.com/images/posts/2022/08/publish-deploy-to-github-01.png%20"Folder structure of projects generated by Publish with Output folder highlighted"" alt="Folder structure of projects generated by Publish with Output folder highlighted"/><p>This folder <em>is</em> your website. Every time you make a change in Xcode project, add a new file or change the style, you need to run the build. Xcode will then regenerate the contents of the <strong>Output</strong> folder and update your website with the new changes.</p><h2>Setup GitHub Pages</h2><p>To host your website on GitHub Pages you need to create a new <strong>public</strong> repository named <strong>[yourGitHubUsername].github.io</strong>. The first part needs to exactly match your username or it won't work.</p><blockquote><p>For GitHub Pages to work, your repository has to be <strong>public</strong>. If you'd like it to be <strong>private</strong>, your only option is to get a <strong>GitHub PRO</strong> account or any of the <strong>Enterprise</strong> accounts. But even then, all your content and HTML files will be public. Make sure you keep any private files out of it.</p></blockquote><p>And that's it! Now all you need to do is define the deployment method in Xcode and deploy your website!</p><h2>Define a deployment method</h2><p>Publish offers a powerful set of APIs that let you customize the generation process of your website to your liking.</p><p>In <strong>Sources -&gt; MyWebsite</strong> folder there's a <strong>main.swift</strong> file. This file contains the <strong>configuration</strong> for your website. At the bottom of the file, there's a single line of code that generates your website when you run the project in Xcode:</p><pre><code><span class="keyword">try</span> <span class="type">MyWebsite</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">foundation</span> ... )
</code></pre><p><code>publish(withTheme: ...)</code> is a default pipeline that generates all the needed files and folders for you. It generates the RRS feed, site map and everything else. Behind the <strong>...</strong> are other parameters with default values.</p><p>With this single line of code, you can generate your website without adding anything else. But, if you want to customize the steps to generate your website, you need to call the <code>publish(at:using:file:)</code> instead.</p><p>After some tweaking and adding a few deployment steps, your publishing pipeline might look like this:</p><pre><code><span class="keyword">try</span> <span class="type">MyWebsite</span>()
    .<span class="call">publish</span>(using: [
        .<span class="call">addMarkdownFiles</span>(),
        .<span class="call">copyResources</span>(),
        .<span class="call">generateHTML</span>(withTheme: .<span class="dotAccess">foundation</span>),
        .<span class="call">generateRSSFeed</span>(including: [.<span class="dotAccess">posts</span>]),
        .<span class="call">generateSiteMap</span>(),
        <span class="comment">// Deployment step</span>
        .<span class="call">deploy</span>(using: .<span class="call">gitHub</span>(
            <span class="string">"dvrzan/dvrzan.github.io"</span>,
            branch: <span class="string">"main"</span>,
            useSSH: <span class="keyword">false</span>)
        )
    ])
</code></pre><p>In the last step, you define the deployment method with <code>deploy(using:)</code>, where you specify the GitHub project for your website. This is the GitHub Pages repository that you set up earlier. You can also add a specific branch and whether you want to deploy using SSH or HTTPS.</p><p>Finally, you're ready to show off your new website.</p><h2>Deploy your website</h2><p>There are different ways to deploy your website and I'll show you a few options.</p><h3>Deploy with command line tool</h3><p>Even after you've added a deployment method to your publishing pipeline, deployment steps are disabled by default so you don't accidentally deploy your website during development.</p><p>To deploy your website, open the command line tool and navigate to your project's root folder. Run <code>publish deploy</code> and Publish will execute your publishing pipeline. Your website is now deployed to your GitHub Pages repository on the branch you specified.</p><p>Behind the scenes, Publish does everything for you. Only the contents of your <strong>Output</strong> folder are deployed. It contains everything needed to render your website. You can push everything else to another branch of your choice.</p><p>Open your browser and go to <strong>[yourGitHubUsername].github.io</strong>. Your website should be up and running!</p><h3>Deploy with Xcode</h3><p>You can enable deployment steps in Xcode, by adding <code>--deploy</code> command line flag to an Xcode Scheme. So lets create a new deployment scheme.</p><p>Open <strong>Product -&gt; Scheme -&gt; New Scheme...</strong> and call it <strong>Deploy MyWebsite</strong>.</p><p>After you've created your scheme it should be automatically selected. If it's not, make sure you select it. After that, open <strong>Product -&gt; Scheme -&gt; Edit Scheme...</strong>. On the left pane, select <strong>Run</strong> and then select an <strong>Arguments</strong> tab. Under <strong>Arguments Passed on Launch</strong>, add a new <code>--deploy</code> argument.</p><p>Now every time you run your website with this scheme selected, it will deploy your website to GitHub. Be careful and make sure it's not selected during development because you don't want to break your website and deploy changes that are not yet ready for deployment.</p><h2>Final Thoughts</h2><p>Deploying your Publish website with GitHub Pages is as simple as creating a new repository and defining a publishing pipeline in your project.</p><p>You can also create an automated deployment pipeline through <a href="https://github.com/features/actions">GitHub Actions</a> or other CI/CD tool of your choice so you don't have to manually deploy your website every time.</p><p>We'll talk about automation process in another post.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/08/get-a-job-as-junior</guid><title>Getting your first job as a junior developer</title><description>It's already daunting enough to learn a new programming language. However, learning never stops. So when do you know is a good time to start applying for your first job as a junior developer? Is there ever a good time for that or should you just go for it? In this post, I've shared my personal experience and things I did that helped me land my first job. It took me one year.</description><link>https://www.danijelavrzan.com/posts/2022/08/get-a-job-as-junior</link><pubDate>Tue, 9 Aug 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Getting your first job as a junior developer</h1><p>My journey to becoming a developer <a href="https://vimeo.com/646517989">is a bit different</a>. Not everyone goes back to University after already having a degree. I've decided to get a Computer Science degree to get some basic knowledge about computers and the science behind it. While I did learn about web development, databases, algorithms and too much math, I didn't really learn how to code.</p><p>Sometime during my third year, I decided I wanted to learn Swift and become an iOS developer. After graduating, I started watching tutorials and coding along. I built a few basic apps; a weather app, a to-do app and a social media app. I created a portfolio website, linked all projects on my GitHub profile and started looking for my first job.</p><p>When should you start looking for a job? Today! I started interviewing while I was still learning how to correctly parse a JSON. Maybe not the best idea. But there's really no best time to start applying. You'll never feel ready. If the job application opens for a company that really interest you, apply even if you don't feel like you're ready. If you know someone from the company and that person knows you, you can reach out and ask for a referral.</p><h2>Resume</h2><p>The first thing you need when applying for a job, is a resume. I like to keep mine up to one page long. You can go for more. You'll surely have two page resumes once you gain more experience. But keep in mind a resume is not a <a href="https://icc.ucdavis.edu/materials/resume/resumecv">CV</a>. It's a short overview of your most important experience, skills, education and other skills worth mentioning. Keep it short and on point.</p><p>Also, it's better to have a simpler than a flashy <em>full-of-graphics</em> resume. Some companies use the automated software to screen through resumes and you want to make sure your passes. They also look for certain keywords. Take keywords from the job post and find place for it in your resume.</p><p>I took an entire week to research how to create a good resume that stands out and can get the attention of a recruiter. It all comes down to a few important things.</p><h3>Experience</h3><p>Since you're applying for your first job, you probably have no experience. If you have any internships, that's amazing. That will definitely set you apart from everyone. If you're like me and have no internships, maybe you've worked other jobs that are not strictly related to programming. Choose a few that are worth mentioning and add them to the experience section. You might have not done any programming, but maybe in your previous career you were an engineer and did some other cool stuff you can mention? Or you worked in a call-centre or as a bartender and know how to deal with customers.</p><p>On different jobs you learn different skills. It's not all about coding. If you've worked on any customer facing jobs, you gained the most important skill to have as a developer - how to communicate.</p><h3>Volunteering</h3><p>You can add any volunteer work under experience or add it as a separate section. You did some work to help someone out but weren't paid for it? No shame in that. You organized a meetup or a conference? Awesome, you probably picked a few organizational skills! You lead summer guitar workshops in your local community? Cool, it means you know how to approach teaching others.</p><p>I learned English by playing video-games in high school and being a community manager for a guild on Aion MMORPG. Good times.</p><h3>Numbers</h3><p>It's all about numbers or quantification. Try to quantify one or two points on each of your jobs on a list. I was a volunteer for a local association in my city for more than 10 years and one year I participated in organizing a summer camp for volunteers. I lead a small group of 5 volunteers and coordinated the activities. That's quantity! It also shows some management skills. I'm sure you can think of something like that to add to each of your jobs. No more than one or two bullet points.</p><h3>Certificates</h3><p>A few years ago, I was using Linux. I even made my own Arch Linux once. But then I decided I don't have time for it. It's like a second job figuring out why it starts crashing after an update.</p><p>I was so into it I got an <a href="https://www.lpi.org/our-certifications/linux-essentials-overview">LE-1: Linux Essentials</a> certificate from Linux Professional Institute. I studied hard for that one. I always show it off on my resume. If you have other certificates like that, add them all.</p><h3>Skills</h3><p>Add another section about your skills, but don't quantify anything. One thing I've seen developers do is say they know 95% of Swift. No one knows 95% of Swift. Not even people who wrote it! Don't do this. Have a list with some skills that you do have. Don't say you know Python if you once read a few lines of code. You should be able to demonstrate the skills you mentioned. Use this section to write those keywords we mentioned before. You probably know Swift, UIKit or SwiftUI and then maybe CoreData or some other frameworks you've worked with.</p><h2>Portfolio</h2><p>As a junior developer you need a way to show others you can code. You need a portfolio. Creating a personal website is a perfect way to do that. Not only does it show all your projects, but also that you can figure out how to create and host a website. You can go as simple as editing a Jekyll template and deploying it on GitHub Pages, or something completely custom. Or just show your GitHub profile and make sure your projects have nice READMEs with descriptions and screenshots of your apps.</p><blockquote><p>If you wanted to really show off, you could create your website in Swift! It's simple enough and you already know the programming language. If you're interested. Check the <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">How to create a personal website in Swift using Publish</a> post.</p></blockquote><p>It doesn't really matter what approach you take, as long as a potential hiring manager can check out your projects and read your code.</p><p>You might think your code is bad and you don't want to show it around. Everyone's been there. When you first start learning, your code might not be all structured and using best practices. But it's still your code. You made that app and it's working! You should be proud you have something to show off. Some companies like if developers have an app on the App Store. If you have that, even better! But if not, it's not a big deal. Having a structured GitHub profile with easy-to-find projects or a personal website is a way to go.</p><p>I had a simple website I hosted on GitHub Pages showing off a few of my projects. Some of them were incomplete so I put them as a work in progress. But I had tons of screenshots and each one describing the programming concepts I've learned while building it. During few of my interviews, I had an interviewer tell me about my website and mentioning my projects. Some of them even read my code. They all said it helped get their attention.</p><p>This is also how I got my first job. I talked with the interviewer about my projects on GitHub. He said I could code and I didn't need to do any coding sessions. So we casually talked about other things, programming concepts in general and my opinions on SwiftUI and 3rd party APIs. It was a fun interview.</p><h2>Networking</h2><p>Networking is a great way to meet other developers and possibly make new friends. As an introvert, I was always that awkward person who couldn't find courage to approach people and would stick to the corner of the room. But, I knew I had to do something about it so I slowly started to work on that. I needed to get out of my comfort zone.</p><p>The most important thing when meeting and interacting with others is to be respectful and genuine. Be yourself.</p><h3>Twitter</h3><p>One day I came across a video by <a href="https://twitter.com/seanallen_dev">Sean Allen</a> where he suggested developers should create a Twitter account. You could network and meet other developers by sharing your own experiences. I haven't had a Twitter account before that so I decided to give it a try. I started following other developers and accounts I found interesting. My entire feed is mostly about iOS development.</p><p>It can be a bit awkward to start interacting with people you've never met and just randomly pop-up in a conversation. But iOS development community on Twitter is the best community out there! I've never met so many amazing people at one place. Given that you act with respect towards others, of course.</p><p>Start by sharing your own journey and experience, ask for help and give help when you can. You'll meet other like-minded people and it's a great place to network online. Of course, take care of yourself first. It's just another social media platform. What I love about Twitter is you can make it your own and only follow people whose content you find interesting. You can mute keywords you don't want to see and only stay up-to-date with information that interests you.</p><h3>Meetups and Conferences</h3><p>Attending a conference is another great way to meet new people and learn something new. Not just by watching presentations, but just by being there and talking with other developers. <a href="https://swiftleeds.co.uk">SwiftLeeds</a> was the first iOS conference I ever attended and it was my first conference as a speaker, thanks to the amazing <a href="https://twitter.com/Adam9Rush">Adam Rush</a> who invited me to speak.</p><p>I've met a lot of people that day and learned a lot by listening to them. I overheard a few conversations and learned a few things I didn't know before. Developers talk about code. It's one thing we all have in common so you don't have to come up with topics to talk about. <em>"Hi, my name is Danijela. Have you tried that new API...?"</em> is an easy conversation starter :].</p><p>The downside is that conferences tend to be a bit expensive, especially if they are in-person and you need to fly to be there. But, you can still find some local meetups that are usually free to attend and are still a great way to meet people and learn something new. Or, you can apply to speak! Speakers get a free conference ticket and it's an amazing experience to share your knowledge with others. Think you have nothing to speak about or don't have enough experience? Check my <a href="https://danijelavrzan.com/posts/2022/05/why-speak-at-conferences/">Why speak at conferences and how to apply</a> blog post. You have more to share than you know!</p><p>I found in-person conferences and meetups to be much more enjoyable. During pandemic, everything went online. While it's great to attend an online remote conference, I find it easier to talk to others in-person. But, it's a personal preference. Online talks, conferences and meetups are still a good way to meet others.</p><blockquote><p>Have you heard about <a href="https://www.iosdevhappyhour.com">iOS Dev Happy Hour</a>? I have to say it's definitely my favorite online meetup. The concept and the execution of it is amazing. iOS Developers all over the world come together and network once a month. After a few fellow colleagues share their career journeys, you're free to choose a breakout room and talk to other folks. I've heard a few people got their jobs just by attending and meeting other developers who were hiring for a role. Do check it out!</p></blockquote><h2>Interviewing</h2><p>Interviewing could be another blog post on its own. I'm not going to deep dive into this topic. I've had different interviews while looking for a job as a junior. From take-home tests and whiteboarding algorithms to writing calculators. It all depends on the person who's interviewing you. Even different team within the same company could have different interviewing approaches.</p><p>The best advice I can give you is to come prepared and don't wing it. Interviewers will notice if you come unprepared.</p><h3>Research</h3><p>Research the company as best as you can. Look for them on <a href="https://www.glassdoor.ca/index.htm">Glassdoor</a>. It's an amazing resource to check what other employees have to say about the company. If you're lucky you might even find some iOS interview examples from other people.</p><p>Also, <a href="https://www.reddit.com">Reddit</a>! People discuss companies and interviews on Reddit all the time. It doesn't really come up when you search online, so append reddit to your search query and voila!</p><p>And the first thing I should've mentioned is to check the company website. Find everything you can about the company and their values. They will likely ask you a few behavioral questions. They want to see whether you align with their values.</p><h3>Questions</h3><p>Ask a lot of questions! Prepare them ahead of time. If the interviewer doesn't leave enough time for you to ask them anything, let them know you have a few questions. Ask them if they could extend the interview or whether you should ask these question asynchonously by an email.</p><p>Meaningful questions show you've done your research and you genuinely care about the job. It's one thing that might set you apart from other candidates.</p><p>Interviews are two-way conversations.</p><h3>Algorithms</h3><p>We all dread algorithms and whiteboarding. In reality, they are not as hard as we make them. There's no other way to learn them then to sit down and code. The idea here is to show the way you approach problem solving. It also shows your communication skills. Can you present your approach clearly and do you understand the interviewer?</p><p>Ask a lot of questions to make sure you understand the problem and just go for it. Code the solution you think works well and then re-iterate on your solution and try to optimize it.</p><blockquote><p>If you want to learn or brush up on your algorithms, I highly recommed <a href="https://www.manning.com/books/grokking-algorithms">Grokking Algorithms</a> book. If you're like me and you're a visual learner, you'll love it! The solutions are so simple and well presented. You'll learn basic algorithms in no time and see how fun they actually are.</p></blockquote><h3>Take-Home projects</h3><p>These are my favorite. You can show off your skills here any way you like. Some take-home projects can have a deadline as long as a week and some require you to complete a task in 4 hours. Whatever the length, give you best here!</p><p>If you end up not fully completing the assignment on time, send over what you have and then work on the rest for a day or two and then send it again. It will give you extra points for not giving up!</p><p>If you end up with more time, use it to your advantage and implement an additional feature. Maybe take an API that the company uses in their app?</p><h2>Final Thoughts</h2><p>Finally, enjoy the journey.</p><p>It took me 1 year to get my first job from the day I started learning Swift and iOS development. I thought I'd never get it. But then I watched a video where someone mentioned it's normal for your first job search to take anywhere from 6 months to 2 years. I felt much better.</p><p>Of course the end goal is to find the job and start your career. But don't skip the small accomplishments along the way. Passing a technical part of the interview and failing a system design is still an amazing accomplishment!</p><p>Learn from your mistakes and make it a point to do better next time.</p><p>Make friends along the way and develop deeper connections with people. Reach out to people you've met and ask them how they're doing.</p><p>As a junior developer, it's important to show you're willing to learn and you can communicate well. Show that you have opinions on topics like UIKit vs SwiftUI and native vs 3rd party frameworks.</p><p>It's not all about the code.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and good luck in your job search!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/07/how-to-test-custom-codable</guid><title>How to test custom Codable initializer</title><description>Sometimes, when parsing a JSON, you need to implement a custom Codable initializer. Because of that custom logic, you're no longer using the default implementation. It's a good idea to test your code.</description><link>https://www.danijelavrzan.com/posts/2022/07/how-to-test-custom-codable</link><pubDate>Tue, 26 Jul 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to test custom Codable initializer</h1><p>Sometimes, when parsing a <strong>JSON</strong>, you need to implement a custom <code>Codable</code> initializer. Whether <code>Decodable</code> or <code>Encodable</code>, depends on the use-case.</p><p>Because of that custom logic, you're no longer using the default implementation. It's a good idea to test your code.</p><h2>Custom Decodable initializer</h2><p>Consider the following struct with a custom decodable initializer:</p><pre><code><span class="keyword">struct</span> Conference: <span class="type">Codable</span> {
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> city: <span class="type">String</span>
  <span class="keyword">let</span> country: <span class="type">String</span>
  <span class="keyword">let</span> date: <span class="type">String</span>
  <span class="keyword">let</span> days: <span class="type">Int</span>
  <span class="keyword">let</span> isOnline: <span class="type">Bool</span>

  <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
    <span class="keyword">case</span> name, city, country, date, days, isOnline
  }

  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
    name = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">name</span>)
    city = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">city</span>)
    country = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">country</span>)
    date = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">date</span>)
    days = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">days</span>)
    isOnline = (<span class="keyword">try</span>? container.<span class="call">decode</span>(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">isOnline</span>)) ?? <span class="keyword">false</span>
  }
}
</code></pre><p>Instead of creating an optional with a default value, you create a custom decoder for <code>isOnline</code> in the initializer. If the key is missing, give it a default value of <code>false</code>.</p><h2>Mock the data</h2><p>First, you need to create a mock data for the <code>Conference</code>. If you try to create a conference, you'll see you can't initialize a <code>Conference</code> object using its properties:</p><img src="https://www.danijelavrzan.com/images/posts/2022/07/testing-custom-codable-01.png%20"Initializing a struct with a custom codable initializer has no stored properties to define"" alt="Initializing a struct with a custom codable initializer has no stored properties to define"/><p>When you create custom decodable initializer, you lose the <strong>memberwise initializer</strong>.</p><h2>Memberwise initializer</h2><p>Structure types automatically get a default initializer, called <strong>memberwise initializer</strong>. It's generated by compiler based on structure's stored properties or <em>members</em>. But, if you define custom initializer, you lose the default memberwise initializer.</p><blockquote><p>You can learn more about memberwise initializers in the Apple's <a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html">Swift Language Guide</a>.</p></blockquote><p>Luckily, there's an easy solution. To preserve the memberwise initializer, you need to move the initializer to an <strong>extension</strong>:</p><pre><code><span class="keyword">extension</span> <span class="type">Conference</span> {
    <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
      <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
      name = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">name</span>)
      city = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">city</span>)
      country = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">country</span>)
      date = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">date</span>)
      days = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">days</span>)
      isOnline = (<span class="keyword">try</span>? container.<span class="call">decode</span>(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">isOnline</span>)) ?? <span class="keyword">false</span>
    }
}
</code></pre><p>Now you have both your custom initializer and the memberwise initializer:</p><img src="https://www.danijelavrzan.com/images/posts/2022/07/testing-custom-codable-02.png%20"Memberwise initializer is preserved when moving custom initializer to an extension"" alt="Memberwise initializer is preserved when moving custom initializer to an extension"/><p>With this, you can create some mock data:</p><pre><code><span class="keyword">struct</span> Seed {
    <span class="keyword">static let</span> conference = <span class="type">Conference</span>(
        name: <span class="string">"iOSDevUK"</span>,
        city: <span class="string">"Aberystwyth"</span>,
        country: <span class="string">"United Kingdom"</span>,
        date: <span class="string">"04/09/2022"</span>,
        days: <span class="number">4</span>,
        isOnline: <span class="keyword">false</span>
    )
}
</code></pre><h2>Mock the JSON</h2><p>To test if your custom decodable implementation works, you also need to mock the JSON data:</p><pre><code><span class="keyword">private let</span> conferenceData = <span class="type">Data</span>(<span class="string">"""
{
    "name": "iOSDevUK",
    "city": "Aberystwyth",
    "country": "United Kingdom",
    "date": "04/09/2022",
    "days": 4
}
"""</span>.<span class="property">utf8</span>)
</code></pre><h2>Unit test</h2><p>Pass the JSON data to the <code>JSONDecoder.decode(_:from:)</code> and test whether the decoded output is equal to the expected <code>conference</code> seed:</p><pre><code><span class="keyword">func</span> test_customDecoding_returnsExpectedValue() {
    <span class="comment">//Given</span>
    <span class="keyword">let</span> conference = <span class="type">Seed</span>.<span class="property">conference</span>

    <span class="comment">//When</span>
    <span class="keyword">let</span> decodedConference = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Conference</span>.<span class="keyword">self</span>, from: conferenceData)

    <span class="comment">//Then</span>
    <span class="call">XCTAssertEqual</span>(
        decodedConference,
        conference,
        <span class="string">"Decoded JSON doesn't match the given Conference() object"</span>
    )
}
</code></pre><p>Now, Xcode will complain once more:</p><img src="https://www.danijelavrzan.com/images/posts/2022/07/testing-custom-codable-03.png%20"When asserting two values are equal, add Equatable conformance"" alt="When asserting two values are equal, add Equatable conformance"/><p>Because you're testing for equality, you need to add the <code>Equatable</code> conformance to the <code>Conference</code> struct:</p><pre><code><span class="keyword">struct</span> Conference: <span class="type">Codable</span>, <span class="type">Equatable</span> {
  ...
}
</code></pre><p>That's it! You should have a passing unit test for your custom decodable initializer.</p><blockquote><p>Make sure your conference seed and the JSON you're testing with have identical data. If one value is incorrect, the test will fail.</p></blockquote><h2>Failing test</h2><p>If your test fails, <code>XCTAssertEqual</code> doesn't really give any useful information on why and where the test failed:</p><img src="https://www.danijelavrzan.com/images/posts/2022/07/testing-custom-codable-04.png%20"XCTAssert fails and shows a lengthy error"" alt="XCTAssert fails and shows a lengthy error"/><p>Imagine testing against an array of data or a large nested JSON. It would be impossible to look where the test failed.</p><p>Krzysztof Zabłocki (<a href="https://twitter.com/merowing_">@merowing_</a>), created a pretty cool library to help you identify the difference between two instances, conveniently called <a href="https://github.com/krzysztofzablocki/Difference">Difference</a>.</p><p>When you import the library to your project, instead of the obscure error message, you'll see this:</p><img src="https://www.danijelavrzan.com/images/posts/2022/07/testing-custom-codable-05.png%20"XCTAssert error when using a library called Difference"" alt="XCTAssert error when using a library called Difference"/><p>Pretty cool, right? I use the library in my projects and I can tell you it helps a lot when you have large JSON files. Thank you Krzysztof!</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown</guid><title>Publish: Creating Website Content with Markdown</title><description>After generating a website using Publish you have two options to start building your website: using markdown files or programmatically. In this post, you'll learn how to add sections and content with markdown files.</description><link>https://www.danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown</link><pubDate>Tue, 28 Jun 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Publish: Creating Website Content with Markdown</h1><blockquote><p>If you're wondering how to get started using <a href="https://github.com/JohnSundell/Publish">Publish</a>, check the <a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">How to Create a Personal Website in Swift using Publish</a> post. Continue reading to learn how to create content for your website with markdown files.</p></blockquote><h2>Project Structure</h2><p>Publish generates static websites as Xcode Packages where the executable product is your website.<br><br>When you open <strong>Package.swift</strong> for the first time, you'll see the following folder structure:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-01.png%20"Folder structure of projects generated by Publish"" alt="Folder structure of projects generated by Publish"/><h3>Content</h3><p><strong>Content</strong> is where you put your website's content; blog posts, sections, and pages.</p><p>Publish lets you generate your website's content in two ways: by using markdown files or programmatically. When you add markdown files to <strong>Content</strong>, Publish parses the content automatically. It uses <a href="https://github.com/johnsundell/ink.git">Ink</a> markdown parser library, created by John Sundell.</p><p>We'll explore how to generate content with markdown files in the rest of the article.</p><h3>Output</h3><p><strong>Output</strong> is the main folder of your website. It contains all the files necessary to display the content of the website. It's generated every time you build the project in Xcode. Once you start adding more content and custom pages to your website, you'll see more files and folders appear.</p><blockquote><p>You don't add or edit anything in this folder as it contains all the content and information to generate your website. Consider it as <em>read-only</em>. You'll see <strong>feed</strong> and <strong>sitemap</strong> files there along with <strong>styles.css</strong>. This CSS file is the pre-defined styling for your website, but you'll learn how to customize it and add custom styling in the later post.</p></blockquote><h3>Resources</h3><p><strong>Resources</strong> is where you add any media files for your content, like images, videos, audio, and fonts.</p><h3>Sources</h3><p><strong>Sources</strong> has all the <em>Swift</em> files to build your website. Currently, there's one <strong>main.swift</strong> file which contains a configuration information for your website. You can add sections, specific item metadata, website properties, and configure publishing steps:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-02.png%20"main.swift file showing the pre-defined configuration for the website"" alt="main.swift file showing the pre-defined configuration for the website"/><blockquote><p>Publish uses specific terminology to refer to basic structure of the website. <strong>Pages</strong> are standalone webpages on your website. <strong>Sections</strong> are special types of webpages, navigated using navigation menu. <strong>Items</strong> are blog posts.</p></blockquote><h2>Content Structure</h2><p>When you first generate your website, you'll see two items in <strong>Content</strong>; <strong>index.md</strong> file and <strong>posts</strong> folder. Inside <strong>posts</strong>, there are two files: <strong>index.md</strong> and <strong>first-post.md</strong>.</p><p>The root index file is your website's homepage. You can see it when you open the website in your browser:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-03.png%20"MyWebsite running on local server in Google Chrome"" alt="MyWebsite running on local server in Google Chrome"/><p>Right now, if you try to add anything inside the markdown file it won't render on the website. As you can see, the file is empty, but the homepage of your website has some data displayed. These components get added programmatically using the built-in <strong>Foundation</strong> theme that Publish ships with. Anything you add in both index files is overriden programmatically.</p><p>You won't be creating a custom theme in this post, but you can take a look at the built-in theme and how the components get created programmatically. Under <strong>Package Dependencies</strong>, find <strong>Publish</strong> and expand it. Go to <strong>Sources</strong> -&gt; <strong>Publish</strong> -&gt; <strong>API</strong> and open <strong>Theme+Foundation</strong> file:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-03.png%20"Theme+Foudation.swift file showing the first few lines of code"" alt="Theme+Foudation.swift file showing the first few lines of code"/><blockquote><p>We'll take a look at how to build a custom theme in one of the future posts.</p></blockquote><p>You can try adding more markdown files to <strong>posts</strong> as additional blog posts and once you build your website, they will all appear on your homepage.</p><h2>Adding Sections</h2><p>Open <strong>main.swift</strong> file and add two more sections under <code>SectionID</code>. You can add any section you want. Let's add <strong>about</strong> and <strong>portfolio</strong> sections:</p><pre><code><span class="comment">// This type acts as the configuration for your website.</span>
<span class="keyword">struct</span> MyWebsite: <span class="type">Website</span> {
    <span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
        <span class="comment">// Add the sections that you want your website to contain here:</span>
        <span class="keyword">case</span> posts
        <span class="comment">// New sections</span>
        <span class="keyword">case</span> about
        <span class="keyword">case</span> portfolio
    }
    ...
</code></pre><p>Build the project and you'll see two new folders under <strong>Output</strong>: <strong>about</strong> and <strong>portfolio</strong>. Refresh your website and you'll see two more sections in your navigation menu.</p><p>To populate your new section pages with content, add <strong>about.md</strong> and <strong>portfolio.md</strong> files to the root of <strong>Content</strong> folder. The files need to have the same name as sections. Then write some markdown inside. Build the project and refresh the website:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-04.png%20"About webpage showing the section's content and three navigation menu items: My Posts, About and Portfolio"" alt="About webpage showing the section's content and three navigation menu items: My Posts, About and Portfolio"/><h2>Adding Pages</h2><p>To add standalone pages that you can navigate to using navigation menu, add the markdown file for the page in the root of <strong>Content</strong>. Then, link to the page anywhere you'd like.</p><p>Let's say you want to add a custom <strong>Contact</strong> page. Create a <strong>contact.md</strong> file and add the link to it in about section with markdown <code>[Contact me](/contact)</code>. Build the project, refresh the website and you can navigate to the contact page:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/publish-creating-content-with-markdown-05.png%20"Contact page with Contact Me! title and two paragraphs"" alt="Contact page with Contact Me! title and two paragraphs"/><hr><p>You've learned how to build your website with markdown using the built-in Foundation theme. You can add sections, standalone pages, and blog posts. You can build a simple static website using markdown only.</p><p>In the future post, you'll learn how to go behind the scenes and build your website in Swift with a custom theme. You'll also learn how to add some flavor and colors with CSS.</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish</guid><title>How to Create a Personal Website in Swift using Publish</title><description>Publish is a static site generator that lets you build website in your favourite programming language - Swift!</description><link>https://www.danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish</link><pubDate>Tue, 14 Jun 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to Create a Personal Website in Swift using Publish</h1><p>So you've decided to create a personal website to show your portfolio or start writing a blog. The biggest decision you need to make is choose the tech stack to build the website.</p><h2>CMS or a Static Site</h2><p>You could go with the <strong>Content Management Service (CMS)</strong> that lets you build a website without knowing any web development, like <a href="https://wordpress.com">WordPress</a> or <a href="https://webflow.com">Webflow</a>. If you're feeling more adventorous and want something simple yet customizable, you could choose a static site generator.</p><blockquote><p>Of course, there's always an option to build the entire website yourself. But, let's be honest, who has time for that? Besides, there are many great options out there to choose from!</p></blockquote><p><strong>Static site generator</strong> is an alternative to CMS and a very popular choice among developers. It's a tool that generates a static website based on raw data and a set of templates, automating the task of coding individual HTML pages. These HTML pages are pre-built and load the same way every time a website is open. This makes static websites fast as they load quickly in users' browsers.</p><p>Dynamic websites, on the other hand, load differently each time based on any different data input, like user location, input or action, and require JavaScript code within the browser to render properly.</p><p>Static websites are also <strong>100% JavaScript free</strong> by default. Of course, you could always add JS code yourself later.</p><p>The most popular static site generator among developers is <a href="https://jekyllrb.com">Jekyll</a>. It's using <a href="https://shopify.github.io/liquid/">Liquid</a>, a template language created by Shopify and written in Ruby.</p><p>There's also a third option that you might consider and it's what this post is all about so let's get right to it.</p><h2>Publish</h2><p><a href="https://github.com/JohnSundell/Publish">Publish</a> is a static site generator built by John Sundell to help Swift developers create their personal websites using language they already know. That's right, you can build a static website in Swift, just like this website!</p><blockquote><p>While Publish helps you write website components in Swift, you still need some basic understanding of HTML and CSS. But worry not; nothing complex that a little bit of searching online won't help.</p></blockquote><p>Every website created with Publish is a Swift package. When deployed, a pre-defined set of steps get executed that builds and renders the HTML components and styles them with CSS. We've already mentioned how static sites are pre-built, so Publish does exactly that. Apart from rendering HTML, it also generates the RSS feed and a site map for you.</p><p>Publish comes with a built-in theme that let's you get started quickly, called <strong>Foundation</strong>. It serves as a starting point and you can replace it with your own at any time.</p><h2>Installing the Publish Command Line Tool</h2><blockquote><p>At the time of writing, Publish 0.9.0 version is the latest and supports Swift version 5.5 (or later) and macOS Monterey (12.0) or later. Make sure to check the <a href="https://github.com/JohnSundell/Publish#system-requirements">System Requirements</a> in the official documentation.</p></blockquote><p>Publish comes with a neat command line tool that makes it easy to set up new website projects. To install the tool, clone the Publish repo, get into the root folder and run <code>make</code>:</p><pre><code class="language-no-highlight">$ git clone https://github.com/JohnSundell/Publish.git
$ cd Publish
$ make
</code></pre><blockquote><p>You use the <code>cd</code> command to change the current working directory and <code>make</code> is a utility command for building programs from source code. In this case you build the command line tool for Publish.</p></blockquote><p>To see the list of available commands, run <code>publish help</code> in the command line and you'll see this:</p><pre><code class="language-no-highlight">Publish Command Line Interface
------------------------------
Interact with the Publish static site generator from
the command line, to create new websites, or to generate
and deploy existing ones.

Available commands:

- new: Set up a new website in the current folder.
- generate: Generate the website in the current folder.
- run: Generate and run a localhost server on default port 8000 for the 
       website in the current folder. Use the "-p" or "--port" option for  
       customizing the default port.
- deploy: Generate and deploy the website in the current folder, according to
          its deployment method.
</code></pre><p>These four commands are all you need and will come quite handy.</p><h2>Creating a New Website</h2><p>To create a new website you'll use the Publish command line tool. All you need to do is create a new folder and run <code>publish new</code> inside the newly created folder:</p><pre><code class="language-no-highlight">$ mkdir MyWebsite
$ cd MyWebsite
$ publish new
</code></pre><blockquote><p>You use the <code>mkdir</code> command to create new folders.</p></blockquote><p>Now run <code>open Package.swift</code> or find the folder in Finder and open <strong>Package.swift</strong> manually.</p><p>Xcode will open your new website as a package:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-01.png%20"Xcode window with a Package.swift open"" alt="Xcode window with a Package.swift open"/><p>All you have to do is, run the package in Xcode with <strong>Product</strong> -&gt; <strong>Run</strong> or press the <strong>Command + R</strong> keys. This will generate and update the website every time you make new changes. You'll see the following output in the Xcode console:</p><pre><code class="language-no-highlight">Publishing MyWebsite (6 steps)
[1/6] Copy 'Resources' files
[2/6] Add Markdown files from 'Content' folder
[3/6] Sort items
[4/6] Generate HTML
[5/6] Generate RSS feed
[6/6] Generate site map
✅ Successfully published MyWebsite
Program ended with exit code: 0
</code></pre><h2>Running Website Locally</h2><p>You can preview your website locally before it's published by running a local server. Simply run <code>publish run</code> in command line while in the root folder of your website to run the server and open the link from the console in your browser of choice. If you haven't customized the port, it will be <code>http://localhost:8000</code></p><img src="https://www.danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-02.png%20"Command line output of running publish run"" alt="Command line output of running publish run"/><p>Right now, you'll see your website built with the default Foundation theme:</p><img src="https://www.danijelavrzan.com/images/posts/2022/06/create-portfolio-website-using-publish-03.png%20"MyWebsite running on local server in Google Chrome"" alt="MyWebsite running on local server in Google Chrome"/><p>That's it. Your new website is up and running!</p><p>When you're done working on your website, go back to your Terminal and press <strong>ENTER</strong> to stop the server. When you want to resume, follow the same steps to start the local server.</p><hr><p>This is the first post in the series of how to build a personal website using Publish. If you've been using Publish and found a better way to do something or you think I'm missing something important, please let me know! I'd love to hear what you've learned yourself.</p><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/05/why-speak-at-conferences</guid><title>Why speak at conferences and how to apply</title><description>Attending conferences is a great way to learn new things, meet other developers, and promote your company or personal projects you've been working on. But have you ever wondered what it's like to be a speaker? Are you interested in speaking but don't know how or where to start? Impostor syndrome? You have more to offer than you think! Let's see why you should apply as a speaker and how to do that.</description><link>https://www.danijelavrzan.com/posts/2022/05/why-speak-at-conferences</link><pubDate>Tue, 31 May 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>Why speak at conferences and how to apply</h1><p><strong><em>"Prepare as best as you can, but expect everything to go wrong."</em></strong></p><p>Conference speaking is one of the things I've never expected to do myself. At least not this early in my career. The thought never even crossed my mind.</p><p>I got invited to speak at my first conference and things went on from there. Now, almost a year later, I love speaking at conferences. It's a different world from being an attendee. You get to do everything other attendees do; listen to other talks, learn, and meet new people. But you also get a sneak peek behind the curtains. You get to hang out with other speakers and have an amazing opportunity of sharing your experience with others.</p><h2>Overcoming Impostor Syndrome</h2><p>Who would want to listen to me? What do I have to offer that another more experienced developer cannot? Everyone is going to see that I know nothing and they'll call me an impostor. We've all been there.</p><p>Nobody knows everything. When you learn a new concept and do something practical with it, you gain experience. Experience is what matters and no one can argue your experience is wrong. Take that personal experience to your advantage and make a talk about it. You've find a cool new concept to implement navigation in SwiftUI? Talk about it! Share it with other developers.</p><p>Talk about topics that interest you; that you're passionate about. You don't have to be an expert on the topic to give a talk about it. The secret is to make others reconsider their perspective through yours. The only difference between speakers and other attendees is they have learned something well and they are willing to talk about it.</p><h2>Coming up with an idea</h2><p>One of my previous projects used an architectural pattern I've never heard about before. When I talked to other developers about it, no one heard of it either. So I thought it would make a perfect conference talk. I knew how the pattern worked in a large codebase and have been working with it for over a year.</p><p>Some developers like to submit talk proposals on a technical topic they want to learn more about. At the time they submit their talk, they only have a high level understanding of the topic. If you think you have enough time to learn more about it and get a decent understanding, it's a way to go. But, I wouldn't suggest this.</p><p>Try to get a better understanding of the topic you're submitting a talk proposal for. You will be more comfortable talking about it and it reduces a lot of stress before your talk. Attendees are, after all, paying to come and listen to your talk and are eager to learn from it.</p><p>The topic doesn't have to be unique either. Want to talk about an API but somebody already gave a talk about it? So what, your point of view matters too. Remember, it's all about your own perspective.</p><blockquote><p><strong><em>I don't think I have anything new to say, it's all covered before</em></strong> is only your brain trying to convince you not to do it. It's scary and inconvenient. After all, we like being comfortable. Break out of it and do it! You'll feel amazing afterwards. There's nothing like that feeling of accomplishment after you've delivered your talk.</p></blockquote><p>Once you have a topic (or a few) in mind that you feel you're ready to give a talk about, find conferences that interest you and start applying.</p><h2>Call For Papers</h2><p><strong>CFP</strong> or Call For Papers is a first step in the process. Conferences usually open their CFPs six to four months before the conference and give a month or two for speakers to apply.</p><p>Once you start the application process, your talk doesn't need to be ready. You might start working on your slides and practicing your talk a month or two before the conference. Or as soon as you'd like, but I don't recommend leaving it until the last minute, especially if you're not familiar with the topic. Other things may come up that you weren't expecting and you'll end up rushing and doing sloppy work. The more prepared you are for your talk - the less stressed you'll be.</p><blockquote><p>Of course, no amount of preparation will reduce the stress as you're about to go on stage. Even experienced speakers with years of experience behind them get stressed before the talk. It's completely human. Remember to breathe, drink some water, and you'll do great!</p></blockquote><p>Application process starts with a form and three important fields that you need to fill; talk title, talk description, and about yourself. Some of them may ask more details, but these are consistent parts of every application. Let's talk about each of them.</p><h3>Talk Title</h3><p>Talk title is the first thing conference attendeeds see. You want to keep it short, but descriptive enough to convey the message your talk will give.</p><p>For my iOSDevUK '22 talk about Publish framework to build static websites in Swift, I came up with the title: <strong>"Swift your personal website using Publish"</strong>. In Publish, you write your website components in Swift programming language. The end result is a fast and responsive (swift) static website. I thought it would be a nice play with words.</p><p>Once you have the talk title ready, it's time to come up with the talk description.</p><h3>Talk Description</h3><p>Talk description should answer the following questions:</p><ul><li>Why are you giving this talk?</li><li>What is the purpose of the talk?</li><li>What will the audience take away from it?</li></ul><p>This doesn't mean the description should be a massive block of text. If there is no requirement in the CFP form, keep it around 100 - 150 words long. Nobody likes to read a wall of text. The person reading the description should be able to have answers to the above questions. The idea is to make it interesting so people want to see your talk. Especially if a conference has more tracks.</p><p>This part of application is also called an <strong>abstract</strong>, which means that your talk description should be exactly that. If you know what you want to talk about, then write specific things. But if you have an idea or are not quite sure what approach you want to take, try to write it without anything specific so you have some room to change it up later.</p><p>It's all about balance. Take some time to write a good description and ask others for feedback. Remember to run it through a spell check too, you don't want grammatical errors in there. It shows that you care and are ready to deliver an amazing talk.</p><blockquote><p>One thing I like to do is take a look at how other speakers write their talk titles and descriptions to get inspiration from them. Open any conference website and find talks from previous years. You might get an idea from there.</p></blockquote><p>You wrote the hardest part of application, well done! Now's the time to think about yourself.</p><h3>About Yourself</h3><p>It may sound simple, but I always spend so much time writing and changing the <strong>About Me</strong> part. Use this part of application to tell people a little about yourself. I've seen developers write around 100-150 words. Or you can make it as short as you'd like. I've even seen conferences asking for 200 words of text.</p><p>Mention what you do, where you're from and where you work. Add a little bit about your personal life, like hobbies or fun facts. Write anything you want to share with attendee so they get to know you. If there's no requirement, choose whether you want to write it in first or third person. I've seen different approaches on this. It's up to you.</p><h3>Final thoughts</h3><p>Talk title and description are what conference organizers look at when deciding whether to accept your talk proposal. Make it count! Take time to refine your idea. You have more than enough time to submit a talk proposal. I like to take notes on things I've learned and later revisit them to see if they'd make a great conference talk or a blog post.</p><p>Finally, get excited, you submitted your first talk!</p><p>Don't get discouraged if your talk doesn't get accepted. Conferences get hundreds of applications and have to make a choice what would be of most interest to all attendees. You're always welcome to submit multiple applications and apply to more than one conference.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions or comments. I'd be more than happy to provide any guidance or take a look at your application and provide feedback. Remember, you have more to share about your experience than you think. Anything interesting that you've worked on is a potential topic for a conference talk.</p><p>Thank you for reading and I'm looking forward to seeing your talks!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.danijelavrzan.com/posts/2022/05/how-to-test-published-property</guid><title>How to test @Published property with XCTest</title><description>@Published properties stream values over time and any changes on the property are immediately sent to all observers. Let's recap how the property works and then we'll take a look at how we can test @Published properties using Apple's testing framework - XCTest.</description><link>https://www.danijelavrzan.com/posts/2022/05/how-to-test-published-property</link><pubDate>Tue, 17 May 2022 08:45:00 -0400</pubDate><content:encoded><![CDATA[<h1>How to test @Published property with XCTest</h1><p>How you're testing a functionality of your code depends on what you want to test and understanding how the code works. Let's start with a quick recap of <code>@Published</code> property.</p><h2>@Published property</h2><p><code>@Published</code> properties stream values over time. When the property's marked as <code>@Published</code> it gets assigned a <code>willSet</code> observer. Any changes on the property are immediately sent to all observers.</p><pre><code><span class="keyword">class</span> VideoListViewModel {
  <span class="keyword">@Published var</span> videos = [<span class="type">Video</span>]()
}
</code></pre><p>Observers are views that watch for any upcoming changes on the property to decide if they need to redraw themselves to display newest data. For view to receive any upcoming updates, you need to mark the object you want to observe with <code>@ObservedObject</code>.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@ObservedObject var</span> viewModel: <span class="type">VideoListViewModel</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>Then any type marked as <code>@ObservedObject</code> needs to conform to <strong>ObservableObject</strong> protocol. Conforming to this protocol creates an <code>objectWillChange</code> publisher. It allows observes to watch for any future changes to its <code>@Published</code> properties.</p><pre><code><span class="keyword">class</span> VideoListViewModel: <span class="type">ObservableObject</span> {
  ...
}
</code></pre><h2>Testing current value with direct access</h2><p><code>@Published</code> property is still <strong><em>just</em></strong> like any other property and we can get its current (wrapped) value by asking for it directly.</p><p>One of the use cases here is to test the initial value of the property.</p><pre><code><span class="keyword">func</span> test_videos_initialValue_isEmpty() {
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()

  <span class="call">XCTAssertTrue</span>(
      viewModel.<span class="property">videos</span>.<span class="property">isEmpty</span>,
      <span class="string">"Expected initial value to be empty, but got</span> \(viewModel.<span class="property">videos</span>)<span class="string">."</span>
  )
}
</code></pre><p>Another use case is testing a synchonous operation. A simple example would be to append new values to <strong>videos</strong> array with <code>.append(_:)</code>.</p><pre><code><span class="keyword">func</span> appendVideos() {
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My First Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Second Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Third Video"</span>))
  videos.<span class="call">append</span>(<span class="type">Video</span>(name:<span class="string">"My Fourth Video"</span>))
}
</code></pre><p>You can assert property's current value after the function gets called. The operation will complete before the assertion.</p><pre><code><span class="keyword">func</span> test_videos_whenAppendVideosCalled_hasFourVideos() {
  <span class="comment">//Given</span>
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()
  <span class="comment">//When</span>
  viewModel.<span class="call">appendVideos</span>()
  <span class="comment">//Then</span>
  <span class="call">XCTAssertEqual</span>(viewModel.<span class="property">videos</span>.<span class="property">count</span>, <span class="number">4</span>)
}
</code></pre><p>The whole point of <code>@Published</code> properties is to stream any changes to the view before the value is set. It's like giving someone a heads up something will happen before it does. In that case, you'd want to test the values sent to the view.</p><h2>Testing published value by subscribing to it</h2><p><code>@Published</code> properties stream values over time. To get the published (projected) value of the property, you need to subscribe to it with <code>.sink(receiveValue:)</code>.</p><blockquote><p>While word <strong>sink</strong> might sound confusing at first, it's a common math term. It's often used in engineering and refers to end location of anything that flows (water, data, time, heat etc.). <strong>Source</strong> is where the flow starts and <strong>sink</strong> is where the flow ends. In graph theory, sink is a node of a directed graph with no exiting edges; meaning all directed edges flow towards it. In <strong>Combine</strong>, reactive stream flows towards <code>.sink(receiveValue:)</code>.</p></blockquote><p>To fetch data for the <code>@Published</code> property you'll likely have an asynchronous operation, so you need to use test expectations.</p><pre><code><span class="keyword">func</span> test_videos_whenFetchVideosCalled_hasFourVideos() <span class="keyword">async</span> {
  <span class="comment">//Given</span>
  <span class="keyword">let</span> viewModel = <span class="type">VideoListViewModel</span>()
  <span class="keyword">let</span> expectation = <span class="type">XCTestExpectation</span>(description: <span class="string">"Publishes 4 videos"</span>)

  viewModel.<span class="property">$videos</span>
    <span class="comment">// Remove the first (initial) value - we don't need it</span>
    .<span class="call">dropFirst</span>()
    .<span class="call">sink</span>(receiveValue: {
      <span class="comment">// Assert there are 4 new values</span>
      <span class="call">XCTAssertEqual</span>($0.<span class="property">count</span>, <span class="number">4</span>)
      <span class="comment">// Fulfill the expectation</span>
      expectation.<span class="call">fulfill</span>()
    })
    .<span class="call">store</span>(in: &amp;cancellables)

  <span class="comment">//When</span>
  <span class="keyword">await</span> viewModel.<span class="call">fetchVideos</span>()

  <span class="comment">//Then</span>
  <span class="call">wait</span>(for: [expectation], timeout: <span class="number">1</span>)
}
</code></pre><p>These two examples are common use cases of how you can approach testing your <code>@Published</code> properties. There may be more complex use cases and it all depends on your code. I hope this gives you an idea and a good starting point.</p><hr><p>Please feel free to reach out on <a href="https://twitter.com/dvrzan">Twitter</a> if you have any questions, comments, or feedback. These blog posts come from my own learning and sharing what I've learned with everyone, in hope it can help you where I've struggled. We're all learning and trying to be better developers every day. Constructive feedback is most welcome.</p><p>Thank you for reading and happy coding!</p>]]></content:encoded></item></channel></rss>